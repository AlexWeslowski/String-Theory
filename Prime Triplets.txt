
import math
import mpmath
import mpmath.libmp
import sympy
import numpy
import numpy.polynomial
import numpy.polynomial.chebyshev
import primesieve
import fractions
import pandas
import matplotlib
import matplotlib.pyplot
import random
import time
import os
cls = lambda: os.system('cls') or None



# p1p2 = 101 * 233
# n = mpmath.mpf('481895207.9577049') # p1p2**1.9861833392735777

# 34757 / 12569 = 2.76529556846209
# math.log(34757) / math.log(12569) = 1.1077602223316138
# 599310159886625463663.3147043289 / 73786975882521346047.99590175599 = 8.122167262157576
# 599310159886625463663.3147043289 / 116444870040270626135.8709239289 = 5.146728745365626
# 73786975882521346047.99590175599 / 116444870040270626135.8709239289 = 1.578122272224116
# 
# mpmath.mpf('21.81700132997283480320291982937') / mpmath.mpf('6.076863431364745659118687380973') # mpf('3.59017469725712750923')
# mpmath.mpf('21.81700132997283480320291982937') / mpmath.mpf('7.265525595573285904289801601697') # mpf('3.00281115839237030358')
# mpmath.mpf('7.265525595573285904289801601697') / mpmath.mpf('6.076863431364745659118687380973') # mpf('1.19560455449326919928')
# 
# p1p2 = 12569 * 34757
# n = mpmath.mpf('599310159886625463663.3147043288') # wt = 2
# n = mpmath.mpf('21.81700132997283480320291982937')
# p1p2 = 12569
# n = mpmath.mpf('73786975882521346047.99590175599')
# n = mpmath.mpf('6.076863431364745659118687380973')
# p1p2 = 34757
# n = mpmath.mpf('116444870040270626135.8709239289')
# n = mpmath.mpf('7.265525595573285904289801601697')
# 
# --------------------------------------------------
# 
# mpmath.mpf('873644178238426114237315133457615462453115512.143808862400881') / mpmath.mpf('200619562599349803620558179594781131938725885.741979811117531') # mpf('4.3547307496784341229752038929188950967666')
# mpmath.mpf('873644178238426114237315133457615462453115512.143808862400881') / mpmath.mpf('233283274029753201188723904441737211815132075.469539386116496') # mpf('3.7449927855822213402130481900496340819614')
# mpmath.mpf('233283274029753201188723904441737211815132075.469539386116496') / mpmath.mpf('200619562599349803620558179594781131938725885.741979811117531') # mpf('1.162814189240532512079814864861079020235')
# mpmath.mpf('233283274029753201188723904441737211815132075.469539386116496') - mpmath.mpf('200619562599349803620558179594781131938725885.741979811117531') # mpf('32663711430403397568165724846956079876406189.7275595749989634')
# 
# mpmath.mpf('11509102727984025269705599634278000774016.0') / mpmath.mpf('2041361729732067836515683599744378077168.0') # mpf('5.6379536073180985798820397263632073987001')
# mpmath.mpf('11509102727984025269705599634278000774016.0') / mpmath.mpf('4760444883060073767310505087642606675456.0') # mpf('2.417652763702586861804724919984294784897')
# mpmath.mpf('4760444883060073767310505087642606675456.0') / mpmath.mpf('2041361729732067836515683599744378077168.0')  # mpf('2.3319947727661624047453166410229193591919')
# 
# mpmath.mpf('36.00471277653471826321781767815') / mpmath.mpf('11.70819511086669117603257091252') # mpf('3.075171914680322909308025342316')
# mpmath.mpf('36.00471277653471826321781767815') / mpmath.mpf('10.71524620778262688945839822926') # mpf('3.360138635954441528625886100285')
# mpmath.mpf('11.70819511086669117603257091252') / mpmath.mpf('10.71524620778262688945839822926') # mpf('1.092666923729934660221824176908')
# mpmath.mpf('11.70819511086669117603257091252') - mpmath.mpf('10.71524620778262688945839822926') # mpf('0.9929489030840642865741726832593')
# 
# i = mpmath.mpf(484027 * 968713) # 468,883,247,251
# n = mpmath.mpf('873644178238426114237315133457615462453115512.143808862400881') # wt = 1
# n = mpmath.mpf('873644178238426114237315133421586665432054388.757510225445976') # wt = 2
# n = mpmath.mpf('11509102727984025269705599634278000774016.0') # wt = 2, prec = 128
# n = mpmath.mpf('36.00471277653471826321781767815')
# i = mpmath.mpf(484027)
# n = mpmath.mpf('233283274029753201188723904441737211815132075.469539386116496') # wt = 1
# n = mpmath.mpf('204533349412857928981761367879661000858779502.969431920847966') # wt = 2
# n = mpmath.mpf('2041361729732067836515683599744378077168.0') # wt = 2, prec = 128
# n = mpmath.mpf('2041361729732067836515683599744378077184.0') # wt = 2, prec = 128
# n = mpmath.mpf('10.71524620778262688945839822926')
# i = mpmath.mpf(968713)
# n = mpmath.mpf('200619562599349803620558179594781131938725885.741979811117531') # wt = 1
# n = mpmath.mpf('200554248972013648522758005203145774577077884.695373680195897') # wt = 2
# n = mpmath.mpf('4760444883060073767310505087642606675456.0') # wt = 2, prec = 128
# n = mpmath.mpf('11.70819511086669117603257091252')


# 
# i = mpmath.mpf(483869 * 960593)
# n = mpmath.mpf('35.98534179245500036724159143462380350958')
# mpmath.mpf('366822977.43619759353568981232814448622705') * mpmath.mpf('1266.3922924047436492761633943893897077001') * mpmath.mpf('1.000558363143417295521657216768632936884')
# i = mpmath.log(483869 * 960593)
# n = mpmath.mpf('0.91425062813085168931923125940661754237283')
# n = mpmath.mpf('334545887784050517288927350112.0')
# i = mpmath.mpf(mpmath.sqrt(483869 * 960593))
# n = mpmath.mpf('11.201239953465740743073160178645609454426')
# i = mpmath.log(mpmath.sqrt(483869 * 960593))
# n = mpmath.mpf('0.59200774845885778468548103506610768369179')
# i = mpmath.mpf(483869)
# n = mpmath.mpf('10.71478696257240312996083846399745953549')
# mpmath.mpf('3664.4712358267656129842090070318224467') * mpmath.mpf('131.33622740283280441707250194179637862') * mpmath.mpf('1.0053839431447784670147990614806278478')
# i = mpmath.log(483869)
# n = mpmath.mpf('0.581213551077950805067177632877316370101')
# n = mpmath.mpf('205427176080729845524515225496.0')
# i = mpmath.mpf(960593)
# n = mpmath.mpf('11.695946861251344880243204565904346685209')
# mpmath.mpf('6351.6940406341684336412622408104290497269') * mpmath.mpf('150.52703545783290009735537935328502360215') * mpmath.mpf('1.00469754007335532204758456673750667527')
# i = mpmath.log(960593)
# n = mpmath.mpf('0.60261672631098697343684315526746884113947')
# n = mpmath.mpf('139267494118169162545530380220.0')
# 
# mpmath.mpf('35.98534179245500036724159143462380350958') / mpmath.mpf('11.695946861251344880243204565904346685209') # mpf('3.0767360880951319930624447790517324030841')
# mpmath.mpf('35.98534179245500036724159143462380350958') / mpmath.mpf('10.71478696257240312996083846399745953549')  # mpf('3.3584747805210351405749966156303018943169')
# mpmath.mpf('11.695946861251344880243204565904346685209') / mpmath.mpf('10.71478696257240312996083846399745953549') # mpf('1.0915706399115736734686619572287021873935')
# mpmath.mpf('11.695946861251344880243204565904346685209') - mpmath.mpf('10.71478696257240312996083846399745953549') # mpf('0.98115989867894175028236610190688714970505')
# 
# mpmath.mpf('0.91425062813085168931923125940661754237283') / mpmath.mpf('0.60261672631098697343684315526746884113947') # mpf('1.5171345039285262414802148248974008549849')
# mpmath.mpf('0.91425062813085168931923125940661754237283') / mpmath.mpf('0.581213551077950805067177632877316370101')   # mpf('1.57300294605181158844221503701')    = mpmath.pi()/2 + 1/mpmath.mpf('453.181941953176029104673365307') 
# mpmath.mpf('0.60261672631098697343684315526746884113947') / mpmath.mpf('0.581213551077950805067177632877316370101')   # mpf('1.0368249762816793509722021183443213370387')
# mpmath.mpf('0.60261672631098697343684315526746884113947') - mpmath.mpf('0.581213551077950805067177632877316370101')   # mpf('0.021403175233036168369665522390152471036345') = 1/mpmath.mpf('46.72203956245159523997520918248')
# 
# mpmath.mpf('334545887784050517288927350112.0') / mpmath.mpf('205427176080729845524515225496.0') # mpf('1.628537636386428860184456814761')
# mpmath.mpf('334545887784050517288927350112.0') / mpmath.mpf('139267494118169162545530380220.0') # mpf('2.40218214524766752034171633564')
# mpmath.mpf('205427176080729845524515225496.0') / mpmath.mpf('139267494118169162545530380220.0') # mpf('1.475054731051769074320423451364')

mpmath.mpf('0.91425062813085168931923125940661754237283') / mpmath.mpf('0.59200774845885778468548103506610768369179')
mpf('1.544322064214314114167542781607')
mpmath.mpf('0.91425062813085168931923125940661754237283') / mpmath.mpf('0.581213551077950805067177632877316370101')
mpf('1.57300294605181158844221503701')

# eval_n(i, mpc_pow, re_pow, n, wt=1)
eval_n(mpmath.log(483869 * 960593), 1, 1, mpmath.mpf('0.91425062813085168931923125940661754237283'))
eval_n(mpmath.log(mpmath.sqrt(483869 * 960593)), 1, 1, mpmath.mpf('0.59200774845885778468548103506610768369179'))
eval_n(mpmath.log(483869), 1, 1, mpmath.mpf('0.581213551077950805067177632877316370101'))
eval_n(mpmath.log(960593), 1, 1, mpmath.mpf('0.60261672631098697343684315526746884113947'))
eval_n(mpmath.log(483869), 1, 1, mpmath.mpf('0.59200774845885778468548103506610768369179'))
eval_n(mpmath.log(960593), 1, 1, mpmath.mpf('0.59200774845885778468548103506610768369179'))
eval_n(mpmath.log(483869), 1, 1, mpmath.mpf('0.91425062813085168931923125940661754237283'))
eval_n(mpmath.log(960593), 1, 1, mpmath.mpf('0.91425062813085168931923125940661754237283'))
mpmath.mpf('24.84720060373774254561561686') + mpmath.mpf('2.017674965242748196099710195') # 2 + 1/56.577197537080686
mpmath.mpf('12.07732273180262265380518640') + mpmath.mpf('1.355115052687622717052477133')
mpmath.mpf('11.75356246279171455707285212') + mpmath.mpf('1.336007025114687789128436377')
mpmath.mpf('12.40123407489267058979032896') + mpmath.mpf('1.374072006181417805723709595')
mpmath.mpf('11.63794529140159779069265938') + mpmath.mpf('1.348600990945960656950002905')
mpmath.mpf('12.52261505923666642803924671') + mpmath.mpf('1.361444213648837854577013871')
mpmath.mpf('9.502917320702726507253761457') + mpmath.mpf('1.699796035789812009221516391')
mpmath.mpf('10.15670660825811023897931834') + mpmath.mpf('1.722544489499281102511026617')
mpmath.log(960593) - mpmath.log(483869)
mpmath.mpf('13.77530608107408839551403855787') - mpmath.mpf('13.08956948790640234620128850019')
mpmath.mpf('0.6857365931676860493127500576794') # mpmath.log(1.985233606616667) # 2 - 1/67.721343596921
960593 / 483869
1.985233606616667

mpmath.mpf('24.84720060373774254561561686') / (2 * mpmath.mpf('12.07732273180262265380518640'))
mpmath.mpf('2.017674965242748196099710195') / (2 * mpmath.mpf('1.355115052687622717052477133'))
mpmath.mpf('24.84720060373774254561561686') - (2 * mpmath.mpf('12.07732273180262265380518640'))
mpmath.mpf('2.017674965242748196099710195') - (2 * mpmath.mpf('1.355115052687622717052477133'))
mpf('1.028671716220219307977421341368')
mpf('0.7444662950356352188931781857895')
mpf('0.6925551401324972380052440601002')
mpf('-0.6925551401324972380052440710054')

mpmath.mpf('24.84720060373774254561561686') / (mpmath.mpf('12.07732273180262265380518640') + mpmath.mpf('11.75356246279171455707285212'))
mpmath.mpf('2.017674965242748196099710195') / (mpmath.mpf('1.355115052687622717052477133') + mpmath.mpf('1.336007025114687789128436377'))
mpmath.mpf('24.84720060373774254561561686') - (mpmath.mpf('12.07732273180262265380518640') + mpmath.mpf('11.75356246279171455707285212'))
mpmath.mpf('2.017674965242748196099710195') - (mpmath.mpf('1.355115052687622717052477133') + mpmath.mpf('1.336007025114687789128436377'))
mpf('1.042646985239723304777456782982')
mpf('0.7497522991935285771220130978423')
mpf('1.016315409143405334737578340169')
mpf('-0.6734471125595623100812033150148')

mpmath.mpf('24.84720060373774254561561686') / (mpmath.mpf('12.07732273180262265380518640') + mpmath.mpf('12.40123407489267058979032896'))
mpmath.mpf('2.017674965242748196099710195') / (mpmath.mpf('1.355115052687622717052477133') + mpmath.mpf('1.374072006181417805723709595'))
mpmath.mpf('24.84720060373774254561561686') - (mpmath.mpf('12.07732273180262265380518640') + mpmath.mpf('12.40123407489267058979032896'))
mpmath.mpf('2.017674965242748196099710195') - (mpmath.mpf('1.355115052687622717052477133') + mpmath.mpf('1.374072006181417805723709595'))
mpf('1.015059866476344678937590812958')
mpf('0.7392952266448387525111663027297')
mpf('0.3686437970424493020201014999323')  # mpmath.e() - 1/177.42582897758064 or mpmath.exp(1 - 1/481.79323384411936)
mpf('-0.7115120936262923266764765330129')

mpmath.exp(mpmath.mpf('0.84720060373774254561561686'))
mpf('2.333106412186231605136202186653')
mpmath.mpf('24.84720060373774254561561686') / (mpmath.mpf('11.75356246279171455707285212') + mpmath.mpf('12.40123407489267058979032896'))
mpmath.mpf('2.017674965242748196099710195') / (mpmath.mpf('1.336007025114687789128436377') + mpmath.mpf('1.374072006181417805723709595'))
mpmath.mpf('24.84720060373774254561561686') - (mpmath.mpf('11.75356246279171455707285212') + mpmath.mpf('12.40123407489267058979032896'))
mpmath.mpf('2.017674965242748196099710195') - (mpmath.mpf('1.336007025114687789128436377') + mpmath.mpf('1.374072006181417805723709595'))
mpf('1.028665282482223514213779223643')
mpf('0.7445077955080105088045127538721')
mpf('0.6924040660533573987524357804049')
mpf('-0.6924040660533573987524357770223')

mpmath.mpf('24.84720060373774254561561686') / mpmath.mpf('12.07732273180262265380518640')
mpmath.mpf('2.017674965242748196099710195') / mpmath.mpf('1.355115052687622717052477133')
mpmath.mpf('24.84720060373774254561561686') - mpmath.mpf('12.07732273180262265380518640')
mpmath.mpf('2.017674965242748196099710195') - mpmath.mpf('1.355115052687622717052477133')
mpf('2.057343432440438615954842682735')
mpf('1.488932590071270437786356371579')
mpf('12.76987787193511989181043046009')
mpf('0.6625599125551254790472330619979')
mpmath.mpf('24.84720060373774254561561686') / mpmath.mpf('11.75356246279171455707285212')
mpmath.mpf('2.017674965242748196099710195') / mpmath.mpf('1.336007025114687789128436377')
mpmath.mpf('24.84720060373774254561561686') - mpmath.mpf('11.75356246279171455707285212')
mpmath.mpf('2.017674965242748196099710195') - mpmath.mpf('1.336007025114687789128436377')
mpmath.mpf('24.84720060373774254561561686') / mpmath.mpf('12.40123407489267058979032896')
mpmath.mpf('2.017674965242748196099710195') / mpmath.mpf('1.374072006181417805723709595')
mpmath.mpf('24.84720060373774254561561686') - mpmath.mpf('12.40123407489267058979032896')
mpmath.mpf('2.017674965242748196099710195') - mpmath.mpf('1.374072006181417805723709595')
mpf('2.1140144260428780414691141985')
mpf('1.51022781116704345724281223951')
mpf('13.09363814094602798854276474016')
mpf('0.6816679401280604069712738180138')
mpf('2.003607096977789165198557397456')
mpf('1.468390998554668119188417173411')
mpf('12.44596652884507195582528790013')
mpf('0.6436029590613303903760005999904')
mpmath.mpf('24.84720060373774254561561686') / mpmath.mpf('11.63794529140159779069265938')
mpmath.mpf('2.017674965242748196099710195') / mpmath.mpf('1.348600990945960656950002905')
mpmath.mpf('24.84720060373774254561561686') - mpmath.mpf('11.63794529140159779069265938')
mpmath.mpf('2.017674965242748196099710195') - mpmath.mpf('1.348600990945960656950002905')
mpmath.mpf('24.84720060373774254561561686') / mpmath.mpf('12.52261505923666642803924671')
mpmath.mpf('2.017674965242748196099710195') / mpmath.mpf('1.361444213648837854577013871')
mpmath.mpf('24.84720060373774254561561686') - mpmath.mpf('12.52261505923666642803924671')
mpmath.mpf('2.017674965242748196099710195') - mpmath.mpf('1.361444213648837854577013871')
mpmath.mpf('24.84720060373774254561561686') / mpmath.mpf('9.502917320702726507253761457')
mpmath.mpf('2.017674965242748196099710195') / mpmath.mpf('1.699796035789812009221516391')
mpmath.mpf('24.84720060373774254561561686') - mpmath.mpf('9.502917320702726507253761457')
mpmath.mpf('2.017674965242748196099710195') - mpmath.mpf('1.699796035789812009221516391')
mpmath.mpf('24.84720060373774254561561686') / mpmath.mpf('10.15670660825811023897931834')
mpmath.mpf('2.017674965242748196099710195') / mpmath.mpf('1.722544489499281102511026617')
mpmath.mpf('24.84720060373774254561561686') - mpmath.mpf('10.15670660825811023897931834')
mpmath.mpf('2.017674965242748196099710195') - mpmath.mpf('1.722544489499281102511026617')
mpf('2.135016103065501581548142738187')
mpf('1.496124486626302486884358033225')
mpf('13.2092553123361447549229574801')
mpf('0.6690739742967875391497072899936')
mpf('1.984186249134159564480184860466')
mpf('1.482010753738584159073364844776')
mpf('12.32458554450107611757637014998')
mpf('0.6562307515939103415226963239962')
mpf('2.61469186410856085028063584244')
mpf('1.187010042828599379105585392182')
mpf('15.34428328303501603836185540298')
mpf('0.3178789294529361868781938040126')
mpf('2.44638361253196355859035990624')
mpf('1.171334022164650897504144525302')
mpf('14.69049399547963230663629852011')
mpf('0.2951304757434670935886835780057')

mpmath.mpf('24.84720060373774254561561686') / (mpmath.mpf('11.75356246279171455707285212') + mpmath.mpf('1.374072006181417805723709595'))
mpmath.mpf('24.84720060373774254561561686') / (mpmath.mpf('12.40123407489267058979032896') + mpmath.mpf('1.336007025114687789128436377'))
mpf('1.892740132463585888774264606454')
mpf('1.80874750780376367537764364516')


eval_n(mpmath.mpf(483869 * 960593), 1, 1, mpmath.mpf('35.98534179245500036724159143462380350958'))
eval_n(mpmath.mpf(483869 * 960593), 1, 1, mpmath.mpf('11.201239953465740743073160178645609454426'))
eval_n(mpmath.mpf(483869 * 960593), 1, 1, mpmath.mpf('11.695946861251344880243204565904346685209'))
eval_n(mpmath.mpf(483869 * 960593), 1, 1, mpmath.mpf('10.71478696257240312996083846399745953549'))
mpmath.mpf('464541791302.1598247684209625'), mpmath.mpf('259383014.8401752315790374833')
mpmath.mpf('6111735996375.594386341713755'), mpmath.mpf('446560.509350306280775365328')
mpmath.mpf('5227090599659.057025974111982'), mpmath.mpf('573809.292507004065148015344')
mpmath.mpf('7218833445741.765092599728016'), mpmath.mpf('345302.9846344955195311919293')
eval_n(mpmath.mpf(960593), 1, 1, mpmath.mpf('11.695946861251344880243204565904346685209'))
eval_n(mpmath.mpf(483869), 1, 1, mpmath.mpf('10.71478696257240312996083846399745953549'))
eval_n(mpmath.mpf(960593), 1, 1, mpmath.mpf('35.98534179245500036724159143462380350958'))
eval_n(mpmath.mpf(483869), 1, 1, mpmath.mpf('35.98534179245500036724159143462380350958'))
eval_n(mpmath.mpf(960593), 1, 1, mpmath.mpf('11.201239953465740743073160178645609454426'))
eval_n(mpmath.mpf(483869), 1, 1, mpmath.mpf('11.201239953465740743073160178645609454426'))
eval_n(mpmath.mpf(960593), 1, 1, mpmath.mpf('10.71478696257240312996083846399745953549'))
eval_n(mpmath.mpf(483869), 1, 1, mpmath.mpf('10.71478696257240312996083846399745953549'))
eval_n(mpmath.mpf(960593), 1, 1, mpmath.mpf('11.201239953465740743073160178645609454426'))
eval_n(mpmath.mpf(483869), 1, 1, mpmath.mpf('10.71478696257240312996083846399745953549'))
mpmath.mpf('956101.6740718453971612442147'), mpmath.mpf('4491.325928154602838755785309')
mpmath.mpf('481277.8275396838458564796583'), mpmath.mpf('2591.172460316154143520341688')
mpmath.mpf('541738.442137781937273422132'), mpmath.mpf('58114.01724217411134149849859')
mpmath.mpf('268670.1652553174637411837932'), mpmath.mpf('35270.78514213363972101705808')
mpmath.mpf('997060.4000852549774933217024'), mpmath.mpf('3980.926588013224478243775654')
mpmath.mpf('462120.871515811544635858406'), mpmath.mpf('2914.451096159145954702890106')
mpmath.mpf('1043199.394132826111514814034'), mpmath.mpf('3512.79169567479591922012679')
mpmath.mpf('481277.8275396838458564796583'), mpmath.mpf('2591.172460316154143520341688')
mpmath.mpf('997060.4000852549774933217024'), mpmath.mpf('3980.926588013224478243775654')
mpmath.mpf('481277.8275396838458564796583'), mpmath.mpf('2591.172460316154143520341688')

(mpmath.mpf('956101.6740718453971612442147') + mpmath.mpf('4491.325928154602838755785309')) * (mpmath.mpf('481277.8275396838458564796583') * mpmath.mpf('2591.172460316154143520341688'))
mpmath.mpf('956101.6740718453971612442147') * mpmath.mpf('481277.8275396838458564796583') + mpmath.mpf('956101.6740718453971612442147') * mpmath.mpf('2591.172460316154143520341688') + mpmath.mpf('4491.325928154602838755785309') * mpmath.mpf('481277.8275396838458564796583') + mpmath.mpf('4491.325928154602838755785309') * mpmath.mpf('2591.172460316154143520341688')
mpmath.mpf('460150536604.3526231186275495602') + mpmath.mpf('2477424327.117137360386527349457') + mpmath.mpf('2161575585.474901424185814847892') + mpmath.mpf('11637800.05533809680010823370522')

mpmath.mpf('997060.4000852549774933217024') * mpmath.mpf('462120.871515811544635858406') + mpmath.mpf('997060.4000852549774933217024') * mpmath.mpf('2914.451096159145954702890106') + mpmath.mpf('3980.926588013224478243775654') * mpmath.mpf('462120.871515811544635858406') + mpmath.mpf('3980.926588013224478243775654') * mpmath.mpf('2914.451096159145954702890106')
mpmath.mpf('460762421041.301769519521560052') + mpmath.mpf('2905883775.965347991862880243222') + mpmath.mpf('1839669264.293137347849593000754') + mpmath.mpf('11602215.85816423090556308359548')
mpmath.mpf('464541791302.1598247684209625') - mpmath.mpf('460762421041.301769519521560052')
mpmath.mpf('3779370260.858055248899402447926')
mpmath.mpf('2905883775.965347991862880243222') + mpmath.mpf('1839669264.293137347849593000754')

mpmath.mpf('1043199.394132826111514814034') * mpmath.mpf('481277.8275396838458564796583')
mpmath.mpf('502068738098.9609613394624737931')

mpmath.mpf('997060.4000852549774933217024') * mpmath.mpf('481277.8275396838458564796583')
mpmath.mpf('479863063278.8795215781304607655')

avg_exp(i, 1, 1, mpmath.mpf(0.75), 1) > i
avg_exp(i, 1, 1, mpmath.power(2, 68), 1) > i
# find_n(i, iprec_hi, iprec_lo, iwt, ire, n)
find_n(i, 256, 128, 1, 1, mpmath.mpf(2))
find_n(i, 256, 128, 1, 1, mpmath.power(2, 129))
n = find_n(i, 96, 64, 1, 1, mpmath.power(2, 67))
mpmath.mp.prec = 96

mpmath.mpf(483869 * 960593) % mpmath.mpf('366822977.43619759353568981232814448622705')
mpmath.mpf(483869 * 960593) % mpmath.mpf('1266.3922924047436492761633943893897077001')
mpmath.mpf(483869 * 960593) % mpmath.mpf('1.000558363143417295521657216768632936884')
mpf('36461905.337648990281007780240935950668682')
mpf('1097.9071060564291047452201354092706527493')
mpf('0.15991400868105398668354341324188985085108')
mpmath.mpf(483869 * 960593) % mpmath.mpf('3664.4712358267656129842090070318224467')
mpmath.mpf(483869 * 960593) % mpmath.mpf('131.33622740283280441707250194179637862')
mpmath.mpf(483869 * 960593) % mpmath.mpf('1.0053839431447784670147990614806278478')
mpf('1882.9141606721130020005663299795609907737')
mpf('119.78823370493702554439662201709027588181')
mpf('0.83197988790278036547606997763446592005868')
mpmath.mpf('366822977.43619759353568981232814448622705') % mpmath.mpf('3664.4712358267656129842090070318224467')
mpmath.mpf('366822977.43619759353568981232814448622705') % mpmath.mpf('131.33622740283280441707250194179637862')
mpmath.mpf('366822977.43619759353568981232814448622705') % mpmath.mpf('1.0053839431447784670147990614806278478')
mpf('2077.7874667021447445223062449956675246027')
mpf('106.28272115380197981196969554996206393005')
mpf('0.48329806789530251448980774403801316730298')
mpmath.mpf(483869 * 960593) % mpmath.mpf('6351.6940406341684336412622408104290497269')
mpmath.mpf(483869 * 960593) % mpmath.mpf('150.52703545783290009735537935328502360215')
mpmath.mpf(483869 * 960593) % mpmath.mpf('1.00469754007335532204758456673750667527')
mpf('1086.4706112030268950366856976785860426108')
mpf('45.84782094330620569323452521994185950639')
mpf('0.47196719768912413644219970125075757778414')
mpmath.mpf('366822977.43619759353568981232814448622705') % mpmath.mpf('6351.6940406341684336412622408104290497269')
mpmath.mpf('366822977.43619759353568981232814448622705') % mpmath.mpf('150.52703545783290009735537935328502360215')
mpmath.mpf('366822977.43619759353568981232814448622705') % mpmath.mpf('1.00469754007335532204758456673750667527')
mpf('6294.8955337323244732766591013981764397767')
mpf('32.080153611298842151853019733370897060668')
mpf('0.59517026829644281661690970838350797970394')

mpmath.power(mpmath.power(mpmath.power(mpmath.mpf('1.0053839431447784670147990614806278478'), mpmath.fdiv(1, 2)) + mpmath.power(mpmath.mpf('1.00469754007335532204758456673750667527'), mpmath.fdiv(1, 2)), mpmath.fdiv(2, 1)) / mpmath.power(2, mpmath.fdiv(2, 1)), mpmath.fdiv(1, 9))
mpmath.power(mpmath.power(mpmath.power(mpmath.mpf('1.0053839431447784670147990614806278478'), mpmath.fdiv(-71.25, 1)) + mpmath.power(mpmath.mpf('1.00469754007335532204758456673750667527'), mpmath.fdiv(-71.25, 1)), mpmath.fdiv(-1, 71.25)) / mpmath.power(2, mpmath.fdiv(-1, 71.25)), mpmath.fdiv(1, 9))
- mpmath.mpf('0.0000000001858853971342301934101175250330820559514') # mpmath.fdiv(1, mpmath.power(mpmath.pi(), 18 + mpmath.pi() / 2))

(mpmath.mpf('10.71478696257240312996083846399745953549') + mpmath.mpf('11.695946861251344880243204565904346685209')) / 2
mpmath.mpf('11.205366911911874005102021514950903110319')
10.71478696257240312996**2.00000004129935 * 11.69594686125134488**2.00000004129935
15705.000000000748
2.00000004129935 = 2 + 1/24213456.143983 ~ math.exp(17)

# mpmath.mpf('366822977.43619759353568981232814448622705') / mpmath.mpf('6351.6940406341684336412622408104290497269')
# mpf('57751.991057738842821676496661942352152488')
# mpmath.mpf('366822977.43619759353568981232814448622705') / (mpmath.mpf('3664.4712358267656129842090070318224467') * mpmath.mpf('6351.6940406341684336412622408104290497269'))
# mpmath.mpf('366822977.43619759353568981232814448622705') / (mpmath.mpf('131.33622740283280441707250194179637862') * mpmath.mpf('150.52703545783290009735537935328502360215'))
# mpmath.mpf('1266.3922924047436492761633943893897077001') / (mpmath.mpf('131.33622740283280441707250194179637862') * mpmath.mpf('150.52703545783290009735537935328502360215'))

ipow = mpmath.mpf('0.49293168342982718008736662908934021842783') 
     = 0.5 - 1/mpmath.mpf('141.47640248879657359237413970051789904816')
     141.476402 ~ (45 + 1/30) * mpmath.pi()
     141.476402 ~ 2**(7 + 13/90)
     141.476402 ~ (2 * mpmath.pi())**(2 + mpmath.log(2))
     141.476402 ~ (2 * mpmath.pi())**(2 + mpmath.log(2 + 1/2**(8.5 + 2/45)))
     141.476402 ~ (2 * mpmath.pi())**(2 + mpmath.log(2 + 1/(2 * math.pi)**(3 + 2/9)))
     141.476402 ~ (2 * mpmath.pi())**(2 + mpmath.log(2 + 1/math.exp(5 + 83/90)))
p1 = mpmath.mpf('3.0767360880951319930624447790517324030841')
p2 = mpmath.mpf('3.3584747805210351405749966156303018943169')
tgt = mpmath.pi()
ipow, di = mpmath.mpf(0.25), 0.125
func = lambda ipow: mpmath.power(3.5*mpmath.power(p1, mpmath.fdiv(1, ipow)) + mpmath.power(p2, mpmath.fdiv(1, ipow)), ipow) / mpmath.power(3.5 + 1, ipow)

p1 = mpmath.mpf('10.71478696257240312996083846399745953549')
p2 = mpmath.mpf('11.695946861251344880243204565904346685209')
tgt = mpmath.mpf('11.201239953465740743073160178645609454426')
# ipow = mpmath.mpf('0.62500493350593892905506026554524943552456')
for ap in range(0, len(arypairs)):
    p1 = arypairs[ap][5]
    p2 = arypairs[ap][6]
    tgt = arypairs[ap][7]
    func = lambda ipow: mpmath.power(mpmath.power(p1, ipow) + mpmath.power(p2, ipow), mpmath.fdiv(1, ipow)) / mpmath.power(2, mpmath.fdiv(1, ipow))
    ipow, di, tol = mpmath.mpf(0.5), mpmath.mpf(0.0625), mpmath.power(2, -mpmath.mp.prec + 1)
    while func(ipow) < tgt and di > tol:
        ipow = mpmath.fadd(ipow, di)
        if func(ipow) > tgt:
            ipow = mpmath.fsub(ipow, di)
            di = mpmath.fdiv(di, 2)
    if ipow > 0.5 and len(arypairs[ap]) == 9:
        arypairs[ap] = arypairs[ap][:-1] + (ipow,)

for ap in range(0, len(arypairs)):
    p1 = arypairs[ap][5]
    p2 = arypairs[ap][6]
    tgt = arypairs[ap][7]
    func = lambda ipow: mpmath.power(mpmath.power(p1, ipow) + mpmath.power(p2, ipow), mpmath.fdiv(1, ipow)) / mpmath.power(2, mpmath.fdiv(1, ipow))


min([ap[8] for ap in arypairs])
max([ap[8] for ap in arypairs])
mpf('0.62500000980051806900056287376505078070623')
mpf('0.62504389031813349507802173199333773597302')

# find_n(i, iprec_hi, iprec_lo, iwt, ire, n)
find_n(mpmath.sqrt(483869 * 960593), 192, 128, 1, 1, 4)
n = mpmath.mpf('11.201239953465740743073160178645609454426')
mpmath.mpf('1356706.765051891174016738701471244741'), mpmath.mpf('6819.8013442315238387451088250091722383')
mpmath.mpf('924241.74303162308927171681198776468375'), mpmath.mpf('5828.90219231829190940578021122540293')
mpmath.mpf('1994120.800170509954986643404719540072'), mpmath.mpf('7961.8531760264489564875513089787225608')
mpmath.mpf('198.9364054129598784057157698043852636233')
mpmath.mpf('158.56188910660556900094022783123187327036')
mpmath.mpf('250.45937875052891653275716377938133956347')
(mpmath.mpf('158.56188910660556900094022783123187327036') + mpmath.mpf('250.45937875052891653275716377938133956347')) / 2
mpmath.mpf('204.51063392856724276684869580530660641729')
924241.7430316231 + 5828.902192318292
930070.6452239414 # 960593 - 30522.35477605858

n = mpmath.mpf('35.98534179245500036724159143462380350958')
eval_n(483869 * 960593, 1, 1, n, 1)
eval_n(mpmath.sqrt(483869 * 960593), 1, 1, n, 1)
eval_n(483869, 1, 1, n, 1)
eval_n(960593, 1, 1, n, 1)
mpmath.mpf('929083582604.31964953684192503349099248'), mpmath.mpf('518766029.68035046315807496650900752068')
mpmath.mpf('762894.25021305492657630815840924615199'), mpmath.mpf('90626.284155327895254928139921590941842')
mpmath.mpf('537340.33051063492748236758635758170767'), mpmath.mpf('70541.570284267279442034116165588976499')
mpmath.mpf('1083476.8842755638745468442639843025624'), mpmath.mpf('116228.03448434822268299699718688305534')

mpmath.mpf('1083476.8842755638745468442639843025624') / mpmath.mpf('537340.33051063492748236758635758170767')
mpf('2.0163699293628955077483118824262231782711') # 2 + 1/61.08761851267514 or 2/122.17523702535028
960593 / 483869
1.985233606616667 # 2 - 0.014766393383333076 = 2 - 1/67.721343596921 or 2/135.442687193842




class p:
    def __init__(self, p1p2, bpower=True):
        self.p = p1p2
        self.n = 0
        self.npow = 0
        self.s = ""
        self.sary = []
        self.mpc_pow = 1
        self.logp = mpmath.log(p1p2)
        self.logn = 0
        self.lognpow = 0
        self.logs = ""
        self.logsary = []
        self.parent = None
        self.p1 = None
        self.p2 = None
        self.power = None
        if bpower:
            self.power = {fpow:p(mpmath.power(p1p2, fpow), bpower=False) for fpow in [mpmath.fdiv(1, 5), 1/4, mpmath.fdiv(1, 3), 1/2, 2, 3, 4, 5]}
    
    def __str__(self):
        return f"{self.p}"
    
    def __repr__(self):
        return f"{self.p} = {self.p1} * {self.p2}"
    
    @property
    def p1p2(self):
        return self.p
    
    @property
    def int(self):
        return self.p
    
    @property
    def square(self):
        return self.power[2]
    
    @property
    def sqrt(self):
        return self.power[1/2]
    
    def eval_n(self, i=None, mpc_pow=None, n=None, bot_n=None, top_n=None, top_pow=None, wt=1, bprint=True):
        if i is None:
            i = self.p
        if n is None and top_pow is None and bot_n is None:
            n = self.n
        if mpc_pow is None:
            mpc_pow = self.mpc_pow
        mpmath.mp.prec = mpmath.mp.prec * 2
        mpc_pow_log_i = mpmath.fmul(mpc_pow, mpmath.log(i))
        if bot_n is None:
            bot_n = n
        if top_n is None:
            top_n = n
        if top_pow is None:
            top_pow = mpmath.fadd(top_n, mpmath.fdiv(mpc_pow_log_i, 2))
        f1 = mpmath.fdiv(mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, bot_n)), top_pow), 2)
        f2 = mpmath.fdiv(mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, bot_n)), top_n), 2)
        mpmath.mp.prec = int(mpmath.mp.prec / 2)
        if bprint:
            if type(f1) is mpmath.mpf:
                print("mpmath.mpf('" + str(f1) + "') + mpmath.mpf('" + str(f2) + "')")
            else:
                print("mpmath.mpc(real='" + str(f1.real) + "', imag='" + str(f1.imag) + "') + mpmath.mpc(real='" + str(f2.real) + "', imag='" + str(f2.imag) + "')")
        else:
            if type(f1) is mpmath.mpf:
                return "mpmath.mpf('" + str(f1) + "') + mpmath.mpf('" + str(f2) + "')"
            else:
                return "mpmath.mpc(real='" + str(f1.real) + "', imag='" + str(f1.imag) + "') + mpmath.mpc(real='" + str(f2.real) + "', imag='" + str(f2.imag) + "')"


round(math.sqrt(100003 * 999983), 1) # 316229.8
aryprimes.index(316223)              # 27292

it = primesieve.Iterator()
it.skipto(int(2 * 10**11 + random.random() * 5 * 10**10))
it.next_prime()
it.skipto(int(3.75 * 10**11 + random.random() * 2 * 10**10))
it.next_prime()

math.sqrt(10**23)

mpmath.mp.prec = 128
arypairs223593151651 = []
p1p2 = mpmath.mpf(223593151651 * 393489329089) # 87981519232047022675939
# ~91 seconds for 144
t1, dt = time.time(), 0
while len(arypairs223593151651) < 144:
    p1 = int(round(10**11 + 10**4 + (316227766016 - 10**11 - 10**4) * random.random(), 0))
    if p1 % 2 == 0:
        p1 += 1
    it.skipto(p1)
    p1 = it.next_prime()
    round_p1p2_p1 = round(p1p2/p1, 2)
    # while (round_p1p2_p1 % 1 > 0.12 and round_p1p2_p1 % 1 < 0.88) or (not sympy.isprime(round(round_p1p2_p1, 0))):
    while (round_p1p2_p1 % 1 > 0.04 and round_p1p2_p1 % 1 < 0.96) or (not mpmath.libmp.isprime(round(round_p1p2_p1, 0))):
        i1 = 1
        i2 = 2 if p1 < 316227766016 else -2
        it.skipto(p1 + i1 * i2)
        while it.next_prime() == p1:
            i1 += 1
            it.skipto(p1 + i1 * i2)
        p1 = it.next_prime()
        round_p1p2_p1 = round(p1p2/p1, 2)            
    p2 = int(round(round_p1p2_p1, 0))
    imod = -int(p1p2 % (p1 * p2)) if p1p2 > (p1 * p2) else int((p1 * p2) % p1p2)
    if abs(imod) < 3.2 * 10**9 and p1 >= 10**11 and p1 <= 10**12 and p2 >= 10**11 and p2 <= 10**12 and (p1 * p2, imod, min(p1, p2), max(p1, p2)) not in arypairs223593151651:
        dt = time.time() - t1
        parent = p(p1 * p2)
        p.p1 = p(min(p1, p2))
        p.p2 = p(max(p1, p2))
        arypairs223593151651.append((parent, imod))


iremoved = 0
for ap in sorted(arypairs223593151651, key=lambda ap: abs(ap[1]), reverse=True):
    if abs(ap[1]) > 4 * 10**9:
        iremoved += 1
        print(f"{iremoved} ... {ap[1]}")
        arypairs223593151651.remove(ap)
 
p1p2 = mpmath.mpf(483869 * 960593)
while len(arypairs) < 18:
    ap = int(round(9592 + 200 + (78497 - 9592 - 400) * random.random(), 0))
    while round(p1p2/aryprimes[ap], 2) not in setprimes:
        ap += 1 if ap < 27292 else -1
    p1 = aryprimes[ap]
    p2 = int(round(p1p2/aryprimes[ap], 0))
    imod = int(p1p2 % (p1 * p2)) if p1p2 > (p1 * p2) else int((p1 * p2) % p1p2)
    if ap >= 9592 and ap <= 78497 and (p1 * p2, imod, min(p1, p2), max(p1, p2)) not in arypairs:
        arypairs.append((p1 * p2, imod, min(p1, p2), max(p1, p2)))

aryints = []
p1p2 = mpmath.mpf(483869 * 960593)
t1, dt = time.time(), 0
while len(aryints) < 18:
    i1 = int(10**5 + (10**6 - 10**5) * random.random())
    idir = 1 if i1 < 316228 else -1
    init1 = i1
    while round(p1p2/i1, 2) % 1 > 0.02 and round(p1p2/i1, 2) % 1 < 0.98:
        i1 += idir
        if (i1 <= 10**5) or (i1 == 316228 and idir == -1):
            idir = 1
            i1 = init1
        elif (i1 >= 10**6) or (i1 == 316228 and idir == 1):
            idir = -1
            i1 = init1
    i2 = int(round(p1p2/i1, 0)) 
    if i1 >= 10**5 and i1 <= 10**6 and i2 >= 10**5 and i2 <= 10**6:
        imod = int(p1p2 % (i1 * i2)) if p1p2 > (i1 * i2) else int((i1 * i2) % p1p2)
        n0 = find_n(i1 * i2, 96, 64, 1, 1, 4)
        n2 = find_n(min(i1, i2), 96, 64, 1, 1, 4)
        n3 = find_n(max(i1, i2), 96, 64, 1, 1, 4)
        n4 = find_n(mpmath.sqrt(i1 * i2), 192, 128, 1, 1, 4)
        if  (i1 * i2, imod, min(i1, i2), max(i1, i2), n0, n2, n3, n4) not in aryints:
            aryints.append((i1 * i2, imod, min(i1, i2), max(i1, i2), n0, n2, n3, n4))
            dt = time.time() - t1


i = -1
iremoved = 0
while i < len(arypairs) - 1:
    i += 1
    if arypairs[i] == p1p2 or arypairs[i] in arypairs[(i + 1):]:
        arypairs.remove(arypairs[i])
        iremoved += 1
        i -= 1

min([tpl[0] for tpl in arypairs]) # 464801169577
max([tpl[0] for tpl in arypairs]) # 464801177383
min([1/tpl[2] + 1/tpl[3] - 1/(tpl[2] * tpl[3]) for tpl in arypairs])  # 2.933910396187001e-06
max([1/tpl[2] + 1/tpl[3] - 1/(tpl[2] * tpl[3]) for tpl in arypairs])  # 4.586969909506561e-06
min([tpl[0] for tpl in aryints]) # 464801158263
max([tpl[0] for tpl in aryints]) # 464801193206
min([1/tpl[2] + 1/tpl[3] - 1/(tpl[2] * tpl[3]) for tpl in aryints])   # 2.9338092989721675e-06
max([1/tpl[2] + 1/tpl[3] - 1/(tpl[2] * tpl[3]) for tpl in aryints])   # 5.397712286247787e-06

arypairs = sorted(arypairs, key = lambda tpl: tpl[0])
_ = matplotlib.pyplot.scatter([tpl[0] for tpl in arypairs], [1/tpl[2] + 1/tpl[3] - 1/(tpl[2] * tpl[3]) for tpl in arypairs])
_ = matplotlib.pyplot.scatter([p1p2], [1/483869 + 1/960593 - 1/p1p2]) # 3.1076965373905452e-06
_ = matplotlib.pyplot.plot([p1p2, p1p2], [2.933910396187001e-06, 4.586969909506561e-06]) 
_ = matplotlib.pyplot.plot([464801169577, 464801177383], [3.1076965373905452e-06, 3.1076965373905452e-06]) 
matplotlib.pyplot.grid()
matplotlib.pyplot.show()

aryints = sorted(aryints, key = lambda tpl: tpl[0])
_ = matplotlib.pyplot.scatter([tpl[0] for tpl in aryints], [1/tpl[2] + 1/tpl[3] - 1/(tpl[2] * tpl[3]) for tpl in aryints])
_ = matplotlib.pyplot.scatter([p1p2], [1/483869 + 1/960593 - 1/p1p2]) # 3.1076965373905452e-06
_ = matplotlib.pyplot.plot([p1p2, p1p2], [2.9338092989721675e-06, 5.397712286247787e-06]) 
_ = matplotlib.pyplot.plot([464801158263, 464801193206], [3.1076965373905452e-06, 3.1076965373905452e-06]) 
matplotlib.pyplot.grid()
matplotlib.pyplot.show()


hshfitdens1 = {}
hshfitdens2 = {}
hshfitmod1 = {}
hshfitmod2 = {}
ary = aryints[:]
ary = arypairs[:]
for i in range(2, 8 + 1):
    try:
        hshfitdens1[i] = numpy.polynomial.chebyshev.chebfit([a[2] for a in sorted(ary, key=lambda tpl: tpl[2])], [1/a[2] + 1/a[3] - 1/(a[2] * a[3]) for a in sorted(ary, key=lambda tpl: tpl[2])], i)
    except:
        pass
    try:
        hshfitdens2[i] = numpy.polynomial.chebyshev.chebfit([-a[1] if a[0] < p1p2 else a[1] for a in ary], [1/a[2] + 1/a[3] - 1/(a[2] * a[3]) for a in ary], i)
    except:
        pass
    try:
        hshfitmod1[i] = numpy.polynomial.chebyshev.chebfit([a[0] for a in ary], [-a[1] if a[0] < p1p2 else a[1] for a in ary], i)
    except:
        pass
    try:
        hshfitmod2[i] = numpy.polynomial.chebyshev.chebfit([x for x in range(0, len(ary))], [-a[1] if a[0] < p1p2 else a[1] for a in ary], i)
    except:
        pass

min([ap[2] for ap in arypairs]) # 246511
max([ap[2] for ap in arypairs]) # 671417
[tpl[1] for tpl in arypairs]    # [4740, 4046, 2484, 2220, 2168, 1856, 1394, 1358, 1098, 108, 112, 280, 376, 414, 856, 1414, 1702, 3066]
[tpl[1] for tpl in arypairs].index(108) # 9
arypairs = sorted(arypairs, key = lambda tpl: tpl[2])
arypairs = sorted(arypairs, key = lambda tpl: tpl[0])
_ = matplotlib.pyplot.scatter([tpl[2] for tpl in arypairs], [1/tpl[2] + 1/tpl[3] - 1/(tpl[2] * tpl[3]) for tpl in arypairs])
_ = matplotlib.pyplot.scatter([483869], [1/483869 + 1/960593 - 1/p1p2]) # 3.1076965373905452e-06
_ = matplotlib.pyplot.plot([483869, 483869], [2.9338092989721675e-06, 5.397712286247787e-06]) 
_ = matplotlib.pyplot.plot([246511, 671417], [3.1076965373905452e-06, 3.1076965373905452e-06]) 
_ = matplotlib.pyplot.plot([ap[2] for ap in sorted(arypairs, key=lambda tpl: tpl[2])], [numpy.polynomial.chebyshev.chebval(ap[2], hshfitdens[2]) for ap in sorted(arypairs, key=lambda tpl: tpl[2])]) 

# aryints
numpy.polynomial.chebyshev.chebval(p1p2, hshfitmod1[3]) # mpf('0.00002795889513886734567549297025835')
numpy.polynomial.chebyshev.chebval(p1p2, hshfitmod1[6]) # mpf('0.00009675840480937586418619389405649')
# arypairs
numpy.polynomial.chebyshev.chebval(p1p2, hshfitmod1[6]) # mpf('-0.000001643719861931305925573099102621')
numpy.polynomial.chebyshev.chebval(p1p2, hshfitmod1[5]) # mpf('0.000024456953784684001829141664075')
numpy.polynomial.chebyshev.chebval(p1p2, hshfitmod1[4]) # mpf('0.00003630271387033284780088138177234')
numpy.polynomial.chebyshev.chebval(p1p2, hshfitmod1[3]) # mpf('0.00007003304941704049935147224914544')

_ = matplotlib.pyplot.plot([a[0] for a in ary], [numpy.polynomial.chebyshev.chebval(a[0], hshfitmod1[6]) for a in ary])
_ = matplotlib.pyplot.plot([a[0] for a in ary], [numpy.polynomial.chebyshev.chebval(a[0], hshfitmod1[3]) for a in ary])
for i in range(2, 8 + 1):
    _ = matplotlib.pyplot.plot([-a[1] if a[0] < p1p2 else a[1] for a in ary], [numpy.polynomial.chebyshev.chebval(-a[1] if a[0] < p1p2 else a[1], hshfitdens2[i]) for a in ary])
_ = matplotlib.pyplot.scatter([0], [3.1076965373905452e-06]) 

_ = matplotlib.pyplot.scatter([a[0] for a in ary], [a[1] for a in ary])
_ = matplotlib.pyplot.scatter([p1p2], [0]) 

_ = matplotlib.pyplot.bar([x for x in range(0, len(arypairs))], [tpl[1] for tpl in arypairs])
_ = matplotlib.pyplot.scatter([9.5], [0]) 
# _ = matplotlib.pyplot.scatter([tpl[2] for tpl in arypairs], [tpl[1] for tpl in arypairs])
# _ = matplotlib.pyplot.scatter([483869], [0]) 
matplotlib.pyplot.grid()
matplotlib.pyplot.show()



sum([1/tpl[2] + 1/tpl[3] - 1/(tpl[2] * tpl[3]) for tpl in aryints])/len(aryints)

n = mpmath.mpf('35.98534179245500036724159143462380350958')  # p1p2
n = mpmath.mpf('11.201239953465740743073160178645609454426') # sqrt(p1p2)

sum([math.log(1/(tpl[8] - 0.625)) for tpl in arypairs])/len(arypairs) # 13.167722225724667
mpmath.power(mpmath.fsum([mpmath.power(tpl[5], 0.625) + mpmath.power(tpl[6], 0.625) for tpl in arypairs]), mpmath.fdiv(1, 0.625))/mpmath.power(len(arypairs), mpmath.fdiv(1, 0.625)) # 

min([1/(tpl[8] - 0.625) for tpl in arypairs]) #     22784.068161876592
max([1/(tpl[8] - 0.625) for tpl in arypairs]) # 102035422.3072187
_ = matplotlib.pyplot.scatter([tpl[0] for tpl in arypairs], [math.log(1/(tpl[8] - 0.625)) for tpl in arypairs])
_ = matplotlib.pyplot.scatter([p1p2], [math.log(1/(mpmath.mpf('0.62500493350593892905506026554524943552456') - 0.625))]) # 1/202695.61086554115
_ = matplotlib.pyplot.plot([p1p2, p1p2], [math.log(22784.068161876592), math.log(102035422.3072187)]) 
_ = matplotlib.pyplot.plot([464801169577, 464801177383], [math.log(202695.61086554115), math.log(202695.61086554115)])   # 12.219460678853613
matplotlib.pyplot.grid()
matplotlib.pyplot.show()

_ = matplotlib.pyplot.bar([x for x in range(0, len(arypairs))], sorted([math.log(1/(tpl[8] - 0.625)) for tpl in arypairs]))
matplotlib.pyplot.grid()
matplotlib.pyplot.show()


for ap in arypairs223593151651:
    # 
    # int
    # 
    ap.n = find_n(ap.p1p2, 192, 128, 1, 1, 4)
    ap.p1.n = find_n(ap.p1.int, 192, 128, 1, 1, 4)
    ap.p2.n = find_n(ap.p2.int, 192, 128, 1, 1, 4)
    ap.power[1/2].n = find_n(ap.power[1/2].n, 192, 128, 1, 1, 4)
    # arypairs223593151651[ap] = arypairs223593151651[ap] + (n0, n2, n3, n4)
    
    p1 =  n2 # arypairs223593151651[ap][5]
    p2 =  n3 # arypairs223593151651[ap][6]
    tgt = n4 # arypairs223593151651[ap][7]
    func = lambda fpow: mpmath.power(mpmath.power(p1, fpow) + mpmath.power(p2, fpow), mpmath.fdiv(1, fpow)) / mpmath.power(2, mpmath.fdiv(1, fpow))
    npow, dn, tol = mpmath.mpf(0.4), mpmath.mpf(1/32), mpmath.power(2, -mpmath.mp.prec + 1)
    while func(npow) < tgt and dn > tol:
        ipow = mpmath.fadd(npow, dn)
        if func(npow) > tgt:
            npow = mpmath.fsub(npow, dn)
            dn = mpmath.fdiv(dn, 2)
    # if ipow > 0.5:
    #     arypairs223593151651[ap] = arypairs223593151651[ap] + (ipow,)
    if ipow <= 0.5:
        print(f"Error ap={ap}, ipow={float(ipow)}")
        break
    
    ap.npow = npow
    ap.s = ap.eval_n(bprint=False)
    ap.p1.s = ap.p1.eval_n(bprint=False)
    ap.p2.s = ap.p2.eval_n(bprint=False)
    ap.power[1/2].s = ap.power[1/2]eval_n(bprint=False)
    # arypairs223593151651[ap] = arypairs223593151651[ap] + (n0, n2, n3, n4, ipow, s0, s2, s3, s4)
    
    # 
    # log
    # 
    ap.logn = find_n(ap.logp, 192, 128, 1, 1, 0.4)
    ap.p1.logn = find_n(ap.p1.logp, 192, 128, 1, 1, 0.4)
    ap.p2.logn = find_n(ap.p2.logp, 192, 128, 1, 1, 0.4)
    ap.power[1/2].logn = find_n(ap.power[1/2].logp, 192, 128, 1, 1, 0.4)
    
    ap.logs = eval_n(mpmath.log(arypairs223593151651[ap][0]), 1, 1, n0, 1, bprint=False)
    ap.p1.logs = eval_n(mpmath.log(arypairs223593151651[ap][2]), 1, 1, n2, 1, bprint=False)
    ap.p2.logs = eval_n(mpmath.log(arypairs223593151651[ap][3]), 1, 1, n3, 1, bprint=False)
    ap.power[1/2].logs = eval_n(mpmath.log(mpmath.sqrt(arypairs223593151651[ap][0])), 1, 1, n4, 1, bprint=False)
    # arypairs223593151651[ap] = arypairs223593151651[ap] + (n0, n2, n3, n4, s0, s2, s3, s4)


# 
# ap = 0
# 
s0a_div_s0b = eval(arypairs223593151651[ap][9].replace(" + ", " / "))
s0a_mod_s0b = eval(arypairs223593151651[ap][9].replace(" + ", " % "))
s1a_div_s1b = eval(arypairs223593151651[ap][10].replace(" + ", " / "))
s1a_mod_s1b = eval(arypairs223593151651[ap][10].replace(" + ", " % "))
s2a_div_s2b = eval(arypairs223593151651[ap][11].replace(" + ", " / "))
s2a_mod_s2b = eval(arypairs223593151651[ap][11].replace(" + ", " % "))
s0a_div_s1a = eval(arypairs223593151651[ap][9].split(" + ")[0]) / eval(arypairs223593151651[ap][10].split(" + ")[0])
s0a_mod_s1a = eval(arypairs223593151651[ap][9].split(" + ")[0]) % eval(arypairs223593151651[ap][10].split(" + ")[0])
s0a_mod_s1b = eval(arypairs223593151651[ap][9].split(" + ")[0]) % eval(arypairs223593151651[ap][10].split(" + ")[1])
s2a_mod_s1b = eval(arypairs223593151651[ap][11].split(" + ")[0]) % eval(arypairs223593151651[ap][10].split(" + ")[1])
s0a_div_s2a = eval(arypairs223593151651[ap][9].split(" + ")[0]) / eval(arypairs223593151651[ap][11].split(" + ")[0])
s0a_mod_s2a = eval(arypairs223593151651[ap][9].split(" + ")[0]) % eval(arypairs223593151651[ap][11].split(" + ")[0])
s0a_mod_s2b = eval(arypairs223593151651[ap][9].split(" + ")[0]) % eval(arypairs223593151651[ap][11].split(" + ")[1])
s1a_mod_s2b = eval(arypairs223593151651[ap][10].split(" + ")[0]) % eval(arypairs223593151651[ap][11].split(" + ")[1])
if eval(arypairs223593151651[ap][11].split(" + ")[0]) > eval(arypairs223593151651[ap][10].split(" + ")[0]):
    s2a_mod_s1a = eval(arypairs223593151651[ap][11].split(" + ")[0]) % eval(arypairs223593151651[ap][10].split(" + ")[0])
    s1a_mod_s2a = 0
else:
    s1a_mod_s2a = eval(arypairs223593151651[ap][10].split(" + ")[0]) % eval(arypairs223593151651[ap][11].split(" + ")[0])
    s2a_mod_s1a = 0
s0a_mod_s2b
s2a_mod_s2b
s0a_mod_s1b
s1a_mod_s1b
1/abs(mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s2b))
1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s1a_mod_s1b))
mpf('1376.6774364547657021209376143669092512238')
mpf('74.606075319836244106218665046562921045124')
zz02lower, zz02upper = get_zz(1/abs(mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s2b)))
zz01lower, zz01upper = get_zz(1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s1a_mod_s1b)))
zz02upper - 1/abs(mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s2b))
1/(zz02upper - 1/abs(mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s2b)) - 0.5)
1/(zz02upper - 1/abs(mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s2b))**2 - 0.5**2)**0.5
zz01upper - 1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s1a_mod_s1b))
1/(zz01upper - 1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s1a_mod_s1b)) - mpmath.log(3))
mpf('0.50019718733892416717865036488860412359787') # 0.5 + 1/mpmath.mpf('5071.3195150149699357170613829925172136332')
mpf('1.0986153792476890634809688894710123783353')  # mpmath.log(3) + 1/mpmath.mpf('323563.9058364484488651958513623386803607')
mpmath.power(mpmath.power(1/abs(mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s2b)), 2) + mpmath.power(0.5, 2), mpmath.fdiv(1, 2))
mpmath.power(mpmath.power(zz02upper, 2) - mpmath.power(0.5, 2), mpmath.fdiv(1, 2))
mpmath.power(mpmath.power(zz02upper, 2) - 2.172495786 * mpmath.power(0.5, 2), mpmath.fdiv(1, 2))
1/((zz02upper - 1/abs(mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s2b)))**-4 - 0.5**-4)**(-1/4)
1/((zz01upper - 1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s1a_mod_s1b)))**-4 - mpmath.log(3)**-4)**(-1/4)
mpc(real='0.28177355808758291803711601360085637327533', imag='0.28177355808758291803711601360085637327533')
mpc(real='0.037278090074953397249931275286581784317426', imag='0.037278090074953397249931275286581784317426')
mpmath.log(zz02upper - 1/abs(mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s2b)) - 0.5, 2)
mpmath.log(zz01upper - 1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s1a_mod_s1b)) - mpmath.log(3), 2)
mpf('-12.308145457943772117226327644211516186611')
mpf('-18.303691155829342851060586907385553234318')

mpmath.log(mpath.power(10, 23), 2)
76.404346182409
76.404346182409 * 7.30984583320625
558.503991580330 <-- maximum number of bits for this algorithm
mpmath.log(87979084353252321705719, 2)
mpmath.log(1376.677436454654, 2)
76.219578673927
10.426974851875
mpmath.log(87979084353252321705719, 10)
mpmath.log(1376.677436454654, 10)
22.944379437723
3.1388321944485
22.944379437723 / 3.1388321944485
7.30984583320625


# -----------------------------------------------
# 
# ap = 2
# 
# -----------------------------------------------
s0a_mod_s1b
s0a_mod_s2a
mpf('33606537.450057075895771324078014745425213')
mpf('333360669622.46007669574161900662095884973')
s0a_mod_s2b
s2a_mod_s1b
mpf('31546991.686415841293559355986352251819164')
mpf('137385386.31217514006041070365816606167457') # 1 - 0.6864158412935594 = 0.31358415870644063
1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s0a_mod_s2a))
1/abs(1 - mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s1b))
mpf('99.804185726110024291767466534344060068779')
mpf('709.71381593679131202965517186404646589452')
zz02lower, zz02upper = get_zz(1/abs(1 - mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s1b)))
zz01lower, zz01upper = get_zz(1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s0a_mod_s2a)))
zz02upper - 1/abs(1 - mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s1b))
1/(zz02upper - 1/abs(1 - mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s1b)) - mpmath.sqrt(2))
mpf('1.4164582428941195606701788617876755908683')
mpf('445.49769583405228786544826919005427178825')
1/((zz02upper - 1/abs(1 - mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s1b)))**36.24 + mpmath.sqrt(2)**36.24)**(1/36.24)
mpf('0.69315298532370719426825617881557667480071')

zz01upper - 1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s0a_mod_s2a))
1/abs(zz01upper - 1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s0a_mod_s2a)) - 1.5)
1/abs(zz01upper - 1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s0a_mod_s2a)) - mpmath.log(4, 2.5))
1/abs(zz01upper - 1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s0a_mod_s2a)) - mpmath.log(mpmath.fdiv(20, 3), 3.5))
mpf('1.5136652796213669394896326159539577068614')
mpf('73.178158640559883777600920189431192081902')
mpf('1381.8168857412016100355608818761398407899')
mpf('1463.2075011161004446845819910686662678613')
2.5**1.513665279621366939
3.5**1.513665279621366939
4.002653302640382
6.66096127023295
1/((zz01upper - 1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s0a_mod_s2a)))**6.79609 - 1.5**6.79609)**(1/6.79609)
mpf('1.0000000371952298323805472887025962448365')
1/((zz01upper - 1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s0a_mod_s2a)))**2.489866 + mpmath.log(mpmath.fdiv(20, 3), 3.5)**2.489866)**(1/2.489866)
mpf('0.5000000122329064586925895725545418842144')
1/((zz01upper - 1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s0a_mod_s2a)))**-1.6712 + mpmath.log(mpmath.fdiv(20, 3), 3.5)**-1.6712)**(-1/1.6712)
mpf('1.0000004537486775107914484293786582810209')
1/((zz01upper - 1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s0a_mod_s2a)))**2.4858 + mpmath.log(4, 2.5)**2.4858)**(1/2.4858)
mpf('0.50000473567901857260242039845186897108821')
1/((zz01upper - 1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s0a_mod_s2a)))**-14.50657 + mpmath.log(4, 2.5)**-14.50657)**(-1/14.50657)
mpf('0.69314718032230360461902726017500519697742')

1/((zz02upper - 1/abs(mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s2b)))**-4 - 0.5**-4)**(-1/4)
1/((zz01upper - 1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s0a_mod_s2a)))**-4 - 1.5**-4)**(-1/4)
mpc(real='0.28177355808758291803711601360085637327533', imag='0.28177355808758291803711601360085637327533')
mpc(real='0.037278090074953397249931275286581784317426', imag='0.037278090074953397249931275286581784317426')
mpmath.log(zz02upper - 1/abs(mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s2b)) - 0.5, 2)
mpmath.log(zz01upper - 1/abs(mpmath.frac(s0a_mod_s1b) - mpmath.frac(s1a_mod_s1b)) - mpmath.log(3), 2)



# -----------------------------------------------
# 
# ap = 3
# arypairs223593151651[3]
# 
# -----------------------------------------------

s0a_mod_s0b, 1 - mpmath.frac(s0a_mod_s0b) # 2
s1a_mod_s1b, 1 - mpmath.frac(s1a_mod_s1b)
s2a_mod_s2b, 1 - mpmath.frac(s2a_mod_s2b)
s0a_mod_s1a, 1 - mpmath.frac(s0a_mod_s1a) # 1
s0a_mod_s1b, 1 - mpmath.frac(s0a_mod_s1b)
s2a_mod_s1b, 1 - mpmath.frac(s2a_mod_s1b) # 3
s0a_mod_s2a, 1 - mpmath.frac(s0a_mod_s2a) # 1, 3
s0a_mod_s2b, 1 - mpmath.frac(s0a_mod_s2b) # 2
s1a_mod_s2b, 1 - mpmath.frac(s1a_mod_s2b)
s2a_mod_s1a, 1 - mpmath.frac(s2a_mod_s1a)
s1a_mod_s2a, 1 - mpmath.frac(s1a_mod_s2a)

s0a_mod_s1a
s0a_mod_s2a
mpf('177645217514.71836680723414038468279846934')
mpf('18297953928.722571342708889072355574516237')
s0a_mod_s0b
1 - mpmath.frac(s0a_mod_s2b)
mpf('2043878091463911178.4856541407050158819453')
mpf('0.47606166564033938469974715566740078524928')

1/abs(mpmath.frac(s0a_mod_s1a) - mpmath.frac(s0a_mod_s2a))
1/abs(mpmath.frac(s0a_mod_s0b) - (1 - mpmath.frac(s0a_mod_s2b)))
mpf('237.83840236471586017513711037795228464505')
mpf('104.2483814925324112435004721471718392143')
zz01lower, zz01upper = get_zz(1/abs(mpmath.frac(s0a_mod_s1a) - mpmath.frac(s0a_mod_s2a)))
zz02lower, zz02upper = get_zz(1/abs(mpmath.frac(s0a_mod_s0b) - (1 - mpmath.frac(s0a_mod_s2b))))
zz01upper - 1/abs(mpmath.frac(s0a_mod_s1a) - mpmath.frac(s0a_mod_s2a))
mpf('1.7170752086117685706879915522701602897168')
1.5**1.7170752086117687  # 2.0061432245857893
2**1.7170752086117687    # 3.287692134198036
3**1.71707520861176857   # 6.595581299545383
3.5**1.71707520861176857 # 8.59420582977443
1/(zz01upper - 1/abs(mpmath.frac(s0a_mod_s1a) - mpmath.frac(s0a_mod_s2a)) - mpmath.log(2, 1.5))
1/(zz01upper - 1/abs(mpmath.frac(s0a_mod_s1a) - mpmath.frac(s0a_mod_s2a)) - mpmath.log(6.6, 3))
1/(zz01upper - 1/abs(mpmath.frac(s0a_mod_s1a) - mpmath.frac(s0a_mod_s2a)) - mpmath.log(8.6, 3.5))
mpf('132.2066286006034909068640488547920178735')
mpf('1640.3948829339292414706938369947878643918')
mpf('1858.7875987670163465023149241126800921695')

1/((zz02upper - 1/abs(1 - mpmath.frac(s0a_mod_s2b) - mpmath.frac(s2a_mod_s1b)))**36.24 + mpmath.sqrt(2)**36.24)**(1/36.24)

zz02upper - 1/abs(mpmath.frac(s0a_mod_s0b) - (1 - mpmath.frac(s0a_mod_s2b)))
2.5**1.1982415597936833 # 2.9979767239330783
1/abs(zz02upper - 1/abs(mpmath.frac(s0a_mod_s0b) - (1 - mpmath.frac(s0a_mod_s2b))) - 1.2)
1/abs(zz02upper - 1/abs(mpmath.frac(s0a_mod_s0b) - (1 - mpmath.frac(s0a_mod_s2b))) - mpmath.log(3, 2.5))
mpf('568.68581394339020044984941700695550762059')
mpf('1358.1661849143425579582219585801016029241')

((zz02upper - 1/abs(mpmath.frac(s0a_mod_s0b) - (1 - mpmath.frac(s0a_mod_s2b))))**(-5.2714405006/2) - 1.2**(-5.2714405006/2))**(-2/5.2714405006) / mpmath.pi()**2
((zz02upper - 1/abs(mpmath.frac(s0a_mod_s0b) - (1 - mpmath.frac(s0a_mod_s2b))))**(-7/5.256946404860577) - 1.2**(-7/5.256946404860577))**(-5.256946404860577/7) / mpmath.pi()**4
((zz02upper - 1/abs(mpmath.frac(s0a_mod_s0b) - (1 - mpmath.frac(s0a_mod_s2b))))**(-6/5.256946404860577) - 1.2**(-6/5.256946404860577))**(-5.256946404860577/6) / mpmath.pi()**4
((zz02upper - 1/abs(mpmath.frac(s0a_mod_s0b) - (1 - mpmath.frac(s0a_mod_s2b))))**(-5.256946404860577/3) - mpmath.log(3, 2.5)**(-5.256946404860577/3))**(-3/5.256946404860577) / mpmath.pi()**2
mpmath.fabs(((zz02upper - 1/abs(mpmath.frac(s0a_mod_s0b) - (1 - mpmath.frac(s0a_mod_s2b))))**(5.256946404860577/(1/512)) - 1.2**(5.256946404860577/(1/512)))**((1/512)/5.256946404860577))
mpf('1.0000000000000823605683275787248099162936')
mpf('1.3334599085022014758629621418902478831633')
mpf('3.3323865013768587556019449075116465430195')
mpf('5.9999475524574033453632634706059634635889')
mpf('1.1999913056100111538948176578671001411957')



# -----------------------------------------------
# 
# ap = 4
# arypairs223593151651[4]
# 
# -----------------------------------------------



# 589829 * 788027 = 464801177383
mpmath.mpf('24.847200610038750179034906419231434263') - mpmath.mpf('11.940526641211781905075456513917799277') - mpmath.mpf('12.214145788380522103913802246369739042')
mpf('0.69252818044644617004564765894389594406095')
math.exp(0.6925281804464462)
1.9987623828550956
1/(2 - math.exp(0.6925281804464462))
808.0043203322042

# 388777 * 1195547 = 464801176019
mpmath.mpf('24.847200607235562182865101682810184212') - mpmath.mpf('11.547029665299579220591697146763294751') - mpmath.mpf('12.608021330388917920079794387602537352')
mpf('0.6921496115470650421936101484443521089862')
math.log(2) - 1/1002.4369112195026
math.exp(0.692149611547065)
1.998005856787349
1/(2 - math.exp(0.692149611547065))
501.46849717511355

math.log(808.0043203322042, 2.71885868431353)  # math.e + 1/1733.5353229503194
6.693147180559954
math.log(501.46849717511355, 1.99538669843197) # 2 - 1/216.76449832153688
9.00000000000001
math.log(834.1592301000212)
1733.5353229503194 / 216.76449832153688
7.997321223602242
1733.5353229503194 / 426.3215835348873
4.066262159603887  # 4 + 1/(72.49681962*math.pi)**0.5
426.3215835348873 / 216.76449832153688
1.9667500298065628 # 2 - 1/((8.002441914682315 + math.pi / 2) * math.pi)
1733.5353229503194 / 844.3585745029841
2.0530795509132274 # 2 + 1/(5.996845879577101 * math.pi)

# 671417 * 692269 = 464801175173
# aryprimes[54416] * aryprimes[55971]
# 54416 * 55971
# (55971 - 54416)/518.333333333333333 = 3
# 518.333333333333333 = 525 - 20/3 = 1555/3 = (5*311)/3
# (692269 - 671417) / 525 = 39.71809523809524 ~ 39.4 + 1/math.pi (39.71830988618379) ~ 37 + math.e (39.71828182845905)
# mpmath.cot(mpmath.fdiv(49 + mpmath.pi(), 55)) = mpf('0.718095091355189573702')
# 0.71828182845905 - 0.71809523809524 = 0.00018659036380996863 - 1/5359.333566756113
# 0.71830988618379 - 0.71809523809524 = 0.00021464808854998463 = 1/4658.788283442515
# 0.71809523809524 - 0.71809509135519 = 1.4674004999992718e-07 = 1/6814772.108912981
# 6814772.108912981**2 - 5359.333566756113**2 = 46441090173962 = 6814770.00154532**2 = 464801175173 * 99.91603432731539
# 6814772.108912981**2 - 6814770**2 - 5359.333566756113**2 = 21062
mpmath.zetazero(525)
mpc(real='0.5', imag='844.166196607350768799')
mpmath.zetazero(526)
mpc(real='0.5', imag='844.805993975763726889')

# 631471 * 736061 = 464801175731
mpmath.mpf('24.847200606643686710481800320578309797') - mpmath.mpf('12.004949569626929848505212538010593836') - mpmath.mpf('12.149703442115456067405063061186161126') 
mpf('0.69254759490130079457152472138155483497582')
math.exp(0.6925475949013008)
1.9988011881138328
1/(2 - math.exp(0.6925475949013008))
834.1592301000212
math.log(834.1592301000212, 2.7206274755916824) - 2.7206274755916824 # math.e + 1/426.3215835348873
math.log(834.1592301000212, 2.7215783515359390) - math.e # math.e + 1/303.3499164647768
math.log(834.1592301000212) - 2.7264243075165178 # math.e + 1/122.81271992738633

# 671417 * 692269 = 464801175173
mpmath.mpf('24.847200605496927981696086534844106975') - mpmath.mpf('12.062879602623293488675280671757617452') - mpmath.mpf('12.091766163192247294831982011250965534')
mpf('0.69255483968138719818882385183552398899462')
math.exp(0.6925548396813872)
1.9988156690413328
1/(2 - math.exp(0.6925548396813872))
844.3585745029841
math.log(844.3585745029841, 2) - math.e
7.0034301609562775
844.805993975763726889 - 844.166196607350768799
0.6397973684129283
844.805993975763726889 - 844.3585745029841
0.447419472779643
844.3585745029841 - 844.166196607350768799
0.19237789563328533
(844.805993975763726889 - 844.166196607350768799) / (844.3585745029841 - 844.166196607350768799)
3.325732232940749
(844.805993975763726889 - 844.3585745029841) / (844.3585745029841 - 844.166196607350768799)
2.325732232940749
29244463/89780685
0.3257322329407489
43784659/134419178
0.325732232940749
189678832/582315205
0.325732232940749
2**3.325732232940749
10.026403070535698
2**2.325732232940749
5.013201535267849
8**3.325732232940749
1007.9418532308856
8**2.325732232940749
125.9927316538607
(math.pi)**3.325732232940749
45.01812017968594
(math.pi)**2.325732232940749
14.32971271060404
f = 1.4330733732793055
f**3.325732232940749
3.309077541359398
f**2.325732232940749
2.3090775413593985
f = 1.601767630511027
f**3.325732232940749
4.791187808608818
f**2.325732232940749
2.9911878086088177
f = 1.9987814074212578
f**3.325732232940749
10.006100396791966
f**2.325732232940749
5.006100396791968
1/(3 - 2.9911878086088177)
113.47915128132914
1/(3 - 2.9911878086088177) / 137
0.8283149728564171
1/(3 - 2.9911878086088177) / 137.035999084
0.8280973761629523
math.pi**0.8283149728564171
2.5810515781580454
(2*math.pi)**0.8283149728564171
4.582941736000708
math.pi**0.8280973761629523
2.5804087455355416
(2*math.pi)**0.8280973761629523
4.5811093108312475
f = 3.140264283149123 # math.pi - 1/752.8020568535997
f**0.8280973761629523
2.5795051896275685
(2*f)**0.8280973761629523
4.579505189627568

f, df = math.pi, 1/32
while (2*f)**0.8280973761629523 - f**0.8280973761629523 > 2 and math.log(df, 2) > -53:
    f -= df
    if (2*f)**0.8280973761629523 - f**0.8280973761629523 < 2:
        f += df
        df /= 2

f, df, delta = 1.45, 1/32, 1
f, df, delta = 1.61, 1/32, 1.8
f, df, delta = 2, 1/32, 5
while f**3.325732232940749 - f**2.325732232940749 > delta and math.log(df, 2) > -53:
    f -= df
    if f**3.325732232940749 - f**2.325732232940749 < delta:
        f += df
        df /= 2




# 
# -----------------------------------------------------
# arypairs223593151651[0]
# 200208979799 * 439448416951 = 87981519232045288172849
# -----------------------------------------------------
# 

def is_mod_zero(ary1, n1):
    for a1 in ary1:
        if n1 > a1 and n1 % a1 == 0:
            return True
    return False

def gen_rand(p1p2, minr=10**11, maxr=10**12):
    r1 = 0
    while r1 < minr or r1 > maxr:
        r1 = int(10**11 + 5 * 10**10 + (mpmath.sqrt(p1p2) - 10**11 - 5 * 10**10) * random.random())
    if r1 % 2 == 0:
        r1 += 1
    while is_mod_zero(aryprimes, r1) or is_mod_zero(aryprimes, int(round(p1p2/r1))):
        r1 += 2
    r2 = int(round(p1p2/r1))
    n1 = find_n(r1, 192, 128, 1, 1, 0.4)
    n2 = find_n(mpmath.log(r2), 192, 128, 1, 1, 0.4)
    s1 = eval_n(mpmath.log(r1), 1, 1, n1, 1, bprint=False)
    s2 = eval_n(mpmath.log(r2), 1, 1, n2, 1, bprint=False)
    logn1 = find_n(mpmath.log(r1), 192, 128, 1, 1, 0.4)
    logn2 = find_n(mpmath.log(r2), 192, 128, 1, 1, 0.4)
    logs1 = eval_n(mpmath.log(r1), 1, 1, n1, 1, bprint=False)
    logs2 = eval_n(mpmath.log(r2), 1, 1, n2, 1, bprint=False)
    return r1, r2, s1, s2

def get_zz(f):
    iprec = mpmath.mp.prec
    mpmath.mp.prec = 64
    izz, dzz = int(f), 512
    this_zz = mpmath.zetazero(izz).imag
    while this_zz < f:
        izz += dzz
        prev_zz = this_zz
        this_zz = mpmath.zetazero(izz).imag
        if this_zz > f:
            this_zz = prev_zz
            izz -= dzz
            dzz /= 2
    while this_zz > f and dzz >= 1:
        izz -= dzz
        prev_zz = this_zz
        this_zz = mpmath.zetazero(izz).imag
        if this_zz < f:
            this_zz = prev_zz
            izz += dzz
            dzz /= 2
    if this_zz > f:
        prev_zz = mpmath.zetazero(izz - 1).imag
    else:
        prev_zz = this_zz
        this_zz = mpmath.zetazero(izz + 1).imag
    mpmath.mp.prec = iprec
    return prev_zz, this_zz
    

gen_rand(87981519232045288172849)
gen_rand(87981519232045288172849, maxr=200208979799)
# s0 = "mpmath.mpf('49.774849205071597558296694636927533178') + mpmath.mpf('3.0565645314998896609419747197569770703')"
# r1, r2, s1, s2 = 197834678477, 444722431423, "mpmath.mpf('24.031459044402622256238631683597130139') + mpmath.mpf('1.9792385172805508010400818995553177678')", "mpmath.mpf('24.805019005024770513227620673643928894') + mpmath.mpf('2.0156971698639255290432829031184114525')"
# r1, r2, s1, s2 = 261497885791, 336452124521, "mpmath.mpf('24.297857194258863106969727918888302394') + mpmath.mpf('1.9918348412305881217972056154892790454')", "mpmath.mpf('24.538543259298488207423238051202284961') + mpmath.mpf('2.0031784417845307213861942512906555133')"
eval(s0.split(" + ")[0]) - eval(s1.split(" + ")[0]) - eval(s2.split(" + ")[0])
math.exp(eval(s0.split(" + ")[0]) - eval(s1.split(" + ")[0]) - eval(s2.split(" + ")[0]))
1/(math.exp(eval(s0.split(" + ")[0]) - eval(s1.split(" + ")[0]) - eval(s2.split(" + ")[0])) - (2 + 5/9))
mpmath.fabs(eval(s1.split(" + ")[0]) - eval(s2.split(" + ")[0]))
mpf('0.93837115564420478883044227968647414501961')
3854.37206082697
zz1 = 3853.860293845638
zz2 = 3854.9025863329916
zz2 - zz1
zz2 - 3854.37206082697
3854.37206082697 - zz1
(zz2 - zz1) / (3854.37206082697 - zz1)
(zz2 - 3854.37206082697) / (3854.37206082697 - zz1)
2.036654425497803
1.0366544254978032
mpf('0.773559960622148256988988990046798754998')
mpf('0.93844875151424624390372866683694582311563')
2184.4839677946184
zz1 = 2184.1031907606807
zz2 = 2185.965528320683
(zz2 - zz1) / (2184.4839677946184 - zz1)
(zz2 - 2184.4839677946184) / (2184.4839677946184 - zz1)
4.890887301536277
3.890887301536277
mpf('0.24068606503962510045351013231398256701116')

mpmath.fdiv(87981519232045288172849, mpmath.power(3673.8825239341104, 2))
mpf('6518398787818531.9983263782215461722517727')
mpmath.fdiv(87981519232045288172849, mpmath.power(3673.8825239341104, 6))
mpf('35.779961242065572880309072341034094440702')
mpmath.fdiv(87981519232045288172849, mpmath.power(3673.8825239341104, 2 * mpmath.pi()))
mpf('3.4998446901486741162047361433637162750284')
3.5 - 1/6438.7415959985 # 13969693/18837336

mpmath.fdiv(87981519232045288172849, mpmath.power(1292.1013309320085, 7))
mpf('14.632395801180831947192265359812561463801')

mpmath.log(mpmath.power(2, 512), 10) / 4.712957580290451
mpmath.log(mpmath.power(2, 512), 10) / 6.435788296405678
mpmath.log(mpmath.power(2, 512), 10) / 7.374543349529324
32.7028951893218175345
23.9484816282780649324
20.8999188796951701208

# math.log(87981519232045288172849)
# 52.831413736571484
# math.log(73852.23941094594)
# math.log(3673.8825239341104)
# math.log(1292.1013309320085)
# 11.209821611276965
# 8.209004290286753
# 7.164025110781052
# 52.831413736571484 / 11.209821611276965
# 52.831413736571484 / 8.209004290286753
# 52.831413736571484 / 7.164025110781052
# 4.712957580290451
# 6.435788296405678
# 7.374543349529324
# 87981519232045288172849 / 3673.8825239341104
# math.log(87981519232045288172849, 2)
# 76.21961860090474
# math.log(73852.23941094594, 2)
# math.log(3673.8825239341104, 2)
# math.log(1292.1013309320085, 2)
# 16.172354047839207
# 11.843089780232924
# 10.335503500127832
# 76.21961860090474 / 11.843089780232924
# 76.21961860090474 / 10.335503500127832
# 6.435788296405677
# 7.374543349529323
# 
# -----------------------------------------------------
# arypairs223593151651[0]
# 200208979799 * 439448416951 = 87981519232045288172849
# -----------------------------------------------------
# 
mpmath.mpf('24.793623497749377415228192159814922999') - mpmath.mpf('24.042849564640525378686525380098746564')
mpf('0.7507739331088520365416667797161764350439')
1/(0.750773933108852036541 - 0.75)
1292.1013309320085
1293.4939815574176 - 1291.9458709680832
1.5481105893343283
1293.4939815574176 - 1292.1013309320085
1.3926506254090327
1292.1013309320085 - 1291.9458709680832
0.1554599639252956
(1293.4939815574176 - 1291.9458709680832) / (1292.1013309320085 - 1291.9458709680832)
9.958259028531964
(1293.4939815574176 - 1292.1013309320085) / (1292.1013309320085 - 1291.9458709680832)
8.958259028531964
1/(math.exp(0.750773933108852036541) - 2 - 1/9)
132.83818198902273
mpmath.mpf('2.0151626818596361928955311842472521147') - mpmath.mpf('1.97977799232194823242842063252358857')
mpf('0.035384689537687960467110551723663544704033')
1/0.03538468953768796
28.2608103410066
1/(1/28.25 - 0.03538468953768796)
73852.23941094594
73852.7843891053048893 - 73851.9418145056703793
0.8425745996355545
73852.7843891053048893 - 73852.23941094594
0.5449781593633816
73852.23941094594 - 73851.9418145056703793
0.2975964402721729
(73852.7843891053048893 - 73851.9418145056703793) / (73852.7843891053048893 - 73852.23941094594)
1.5460703977932095
(73852.7843891053048893 - 73851.9418145056703793) / (73852.23941094594 - 73851.9418145056703793)
2.831265719660358
(73852.7843891053048893 - 73852.23941094594) / (73852.23941094594 - 73851.9418145056703793)
1.8312657196603583
mpmath.zetazero(98405)
mpc(real='0.5', imag='73852.7843891053048893')
mpmath.zetazero(98404)
mpc(real='0.5', imag='73851.9418145056703793')

mpmath.mpf('2.0151626818596361928955311842472521147') + mpmath.mpf('1.97977799232194823242842063252358857')
mpf('3.9949406741815844253239518167708406847006')
1/(4 - 3.9949406741815845)
197.65479352211062
mpmath.mpf('49.774849205071597558296694636927533178') - mpmath.mpf('24.042849564640525378686525380098746564') - mpmath.mpf('24.793623497749377415228192159814922999') 
mpf('0.93837614268169476438197709701386361508001')
math.exp(0.9383761426816948)
2.5558277471657895
1/(math.exp(0.9383761426816948) - 2 - 5/9)
3673.8825239341104
1/(math.exp(0.9383761426816948) - 2.5)
17.912239894444212
mpmath.zetazero(3141)
mpc(real='0.5', imag='3673.1591761441186901568854103466789587645')
mpmath.zetazero(3142)
mpc(real='0.5', imag='3674.0876089561437902661502278761092608031')
3674.087608956144 - 3673.1591761441186
0.9284328120252212
3674.087608956144 - 3673.8825239341104
0.20508502203347234
3673.8825239341104 - 3673.1591761441186
0.7233477899917489
(3674.087608956144 - 3673.1591761441186) / (3674.087608956144 - 3673.8825239341104)
4.527062984997948
(3673.8825239341104 - 3673.1591761441186) / (3674.087608956144 - 3673.8825239341104)
3.527062984997948
mpmath.zetazero(1)
mpc(real='0.5', imag='14.134725141734693790457251983562470270795')
mpmath.zetazero(2)
mpc(real='0.5', imag='21.022039638771554992628479593896902777348')
21.022039638771556 - 14.134725141734695
6.887314497036861
21.022039638771556 - 17.912239894444212
3.1097997443273435
17.912239894444212 - 14.134725141734695 
3.777514752709518
(21.022039638771556 - 14.134725141734695) / (21.022039638771556 - 17.912239894444212)
2.214713185181833
(21.022039638771556 - 14.134725141734695) / (17.912239894444212 - 14.134725141734695)
1.8232396027300122

x, dx, tgt = 2.7184, 0.0625, 4
func = lambda x: math.log(834.1592301000212, x) - x
func = lambda x: math.log(834.1592301000212, x) - math.e
func = lambda x: math.log(834.1592301000212) - x
while func(x) > tgt and dx > 2**-53:
    x += dx
    if func(x) < tgt:
        x -= dx
        dx /= 2

mpmath.mpf('2.0176749655381094173699262853454717639') - mpmath.mpf('1.3470613021526666987854463149164249866') - mpmath.mpf('1.3631418438318888886301276293729427208')
mpf('-0.69252818044644617004564765894389594349671')


dfpairs = pandas.DataFrame(arypairs)

_ = matplotlib.pyplot.scatter([math.sqrt(ap[0]) for ap in arypairs], [ap[7] for ap in arypairs])
_ = matplotlib.pyplot.scatter([math.sqrt(p1p2)], [11.201239953465741])
matplotlib.pyplot.grid()
matplotlib.pyplot.show()



(1/3) x^3 - x = integral (x^s - 1) / (e^x + 1) dx
x^2 - 1 = (x^s - 1) / (e^x + 1) 


(1 - mpc_pow * log(i) / n)^(n) = (1 - mpc_pow * log(i) / n)^(n - 0.5 * mpc_pow * log(i))
(1 - mpc_pow * log(i) / n)^(-0.5 * mpc_pow * log(i)) = 1
mpc_pow * log(i) / n = 0

0.5 * (1 - mpc_pow * log(i) / n)^(n) + 0.5 * (1 - mpc_pow * log(i) / n)^(n - 0.5 * mpc_pow * log(i)) = integral Riemann zeta

    


# -------------------------------------------
# 
# find_n
# 
# -------------------------------------------
i = mpmath.mpf(960593)
find_n(i, 256, 128, 1, 1, 2)
x, y, z = split_exp(i, 1, n)
print("mpmath.mpf('" + str(x) + "') * mpmath.mpf('" + str(y) + "') * mpmath.mpf('" + str(z) + "')")

i, n, dn = mpmath.mpf(960593), mpmath.mpf('11.695946861251344880243204565904346685209'), mpmath.mpf(16)
while split_exp(i, 1, n)[0] * split_exp(i, 1, n)[1] < i and dn > mpmath.power(2, -126):
    n = mpmath.fsub(n, dn)
    if split_exp(i, 1, n)[0] * split_exp(i, 1, n)[1] > i:
        n = mpmath.fadd(n, dn)
        dn = mpmath.fdiv(dn, 2)


avg_exp(i, 1, 1, mpmath.mpf(2), 1) > i

mpc_pow = mpmath.zetazero(9)
find_n(mpmath.power(2, mpmath.zetazero(9)), 192, 128, 1, 1, 0.6)
find_n(mpmath.power(3, mpmath.zetazero(9)), 192, 128, 1, 1, 0.6)
find_n(mpmath.power(4, mpmath.zetazero(9)), 192, 128, 1, 1, 0.6)
i = mpmath.power(3, mpmath.zetazero(9))
# avg_exp(i, mpc_pow, re_pow, n, wt=1)
avg_exp(2, mpc_pow, 1, 0.021875, wt=1)
eval_n(mpmath.power(2, mpmath.zetazero(9)), 1, 1, 0.055707778010163757352)

izz = 9
izz = 1
izz = 2
izz = 10
izz = 11
izz = 186614 # 131071.99904846560498087243241644849107979
# error at zetazero(186619), 12
mpmath.mp.prec = 128
for izz in range(186614, 186614 + 12 + 1):
    mpc_pow = mpmath.zetazero(izz)
    print("# zetazero(" + str(izz) + ")")
    # for j in range(13, 18 + 1):
    for j in [33, 169]:
        mpmath.mp.prec = 128
        n = 0
        tgt = None
        if False:
            mpc_pow = 1
            tgt = target(mpmath.power(j, -mpmath.zetazero(izz)), None)
        if True:
            # tgt = target(mpmath.mpc(-1, 0), (2, j))
            tgt = target(mpmath.fsum([(-1)**(k - 1) * mpmath.power(k, -mpc_pow) for k in range(2, j + 1)]), (2, j))
        for n0 in [0.2916, 0.037238, 0.84299]:
            n = find_n(tgt, 192, 128, 1, 1, n0, mpc_pow)
            if mpmath.fabs(n) < 32:
                break
        if mpmath.fabs(n) > 32:
            continue
        mpmath.mp.prec = 128
        if False:
            print("# i, n = mpmath.power(" + str(j) + ", -mpmath.zetazero(" + str(izz) + ")), mpmath.mpc(real='" + str(n.real) + "', imag='" + str(n.imag) + "')")
            s = eval_n(tgt, 1, 1, n, bprint=False).split(" + ")
            print(f"hshlarge[{j}] = {s[0]}")
            print(f"hshsmall[{j}] = {s[1]}")
        if True:
            # f = mpmath.fsum([mpmath.power(k, -mpc_pow) for k in range(2, j + 1)])
            f = mpmath.mpc(-1, 0)
            print("# i, n = mpmath." + mpmath.mpmathify(f) + ", mpmath." + mpmath.mpmathify(n))
            s = eval_n(tgt, mpc_pow, 1, n, bprint=False).split(" + ")
            print(f"hshlarge[{tgt.tpl}] = {s[0]}")
            print(f"hshsmall[{tgt.tpl}] = {s[1]}")

i / mpmath.mpc(real='3.1438113495943617824960308539332436194616', imag='-3.0922388696218855081531418110712611761615') # mpmath.mpf('1.0007062328726906443590713604139857914243') * mpmath.pi() # 1 + 1/mpmath.mpf('1415.963542153094180755243923436109892148')
i / mpmath.mpc(real='2.9805659749505440453534866619500023080182', imag='-0.24515032453924554721870868697076785422523')
i / mpmath.mpc(real='3.1351295145288322759140283091566150648289', imag='-0.3261061452926757054657240720468435367868')
i / mpmath.mpc(real='5.7239164067293151173823387206313433404863', imag='-1.9219920069950359760546836699175762167609')
i / mpmath.mpc(real='5.8129752885699442603773661290431053406827', imag='1.1257624517711842046097277414900704374274')

# i, n = mpmath.power(2, mpmath.zetazero(9)), mpmath.mpc(real='-0.28055534062118857455540951982247980930281', imag='0.15537151536636155274331918518997323262672')
# i, n = mpmath.power(3, mpmath.zetazero(9)), mpmath.mpc(real='-0.48254414210036863423634610068360155775766', imag='0.32027540784431889306351473105854512074203')
# i, n = mpmath.power(4, mpmath.zetazero(9)), mpmath.mpc(real='-0.49358884890489280277271199573406507302144', imag='-0.39871238633939151100622819910910146721576')
# i, n = mpmath.power(5, mpmath.zetazero(9)), mpmath.mpc(real='-0.21404288998371803514656212574649848196367', imag='0.30221265642065018925197342318705355763782')
# i, n = mpmath.power(6, mpmath.zetazero(9)), mpmath.mpc(real='-0.2237347740349303959502019502687089093526', imag='-0.34797643504691184693997418043220289959418')
# i, n = mpmath.power(7, mpmath.zetazero(9)), mpmath.mpc(real='0.044129233192429064714556631030476469620961', imag='-0.15130714501894611769679810330787101304214346086962084611')
# i, n = mpmath.power(8, mpmath.zetazero(9)), mpmath.mpc(real='0.072445927200838791882092329993284192517338', imag='-0.135501737961858823948332379394892843395863298907624816206')

# zetazero(1)
# i, n = mpmath.power(2, -mpmath.zetazero(1)), mpmath.mpc(real='-0.731955406315665780838974400841072568', imag='-0.069376690973930660079341139285134266963')
# i, n = mpmath.power(3, -mpmath.zetazero(1)), mpmath.mpc(real='-0.85259341336510921048574147494353594443', imag='0.17122474810741406565689940875171445857')
# i, n = mpmath.power(5, -mpmath.zetazero(1)), mpmath.mpc(real='-0.53258091501049154591269644036592082142', imag='-0.31641416334671921228867808529940999168')
# i, n = mpmath.power(7, -mpmath.zetazero(1)), mpmath.mpc(real='-0.51595135091826557304722473190944640805', imag='0.40573389012902285437883584208148732756')
# i, n = mpmath.power(8, -mpmath.zetazero(1)), mpmath.mpc(real='-0.32736753913539839777059429049546777273', imag='-0.40367608606341748702450224113885380206')

# zetazero(2)
# i, n = mpmath.power(2, -mpmath.zetazero(2)), mpmath.mpc(real='-0.36946223870573237218547644606843081999', imag='0.091457020568920882105378989468075840591')
# i, n = mpmath.power(3, -mpmath.zetazero(2)), mpmath.mpc(real='-0.37803995929897872379455631783300233541', imag='-0.17766109560074930113547799700908960596')
# i, n = mpmath.power(4, -mpmath.zetazero(2)), mpmath.mpc(real='-0.48123905386244455700176673424038434619', imag='-0.25458428569881679002395270559926067721')

# zetazero(10)
# i, n = mpmath.power(2, -mpmath.zetazero(10)), mpmath.mpc(real='-0.90848427235293324557623924339544429566', imag='0.043678824110497237090184223172342713096')
# i, n = mpmath.power(3, -mpmath.zetazero(10)), mpmath.mpc(real='-0.30647075289701796498192832814252873601', imag='-0.16869477424810777725799532714399941629')
# i, n = mpmath.power(5, -mpmath.zetazero(10)), mpmath.mpc(real='-0.16666988660592011137483051678256903563', imag='-0.23583757821437606466719435051496145918')
# i, n = mpmath.power(6, -mpmath.zetazero(10)), mpmath.mpc(real='-0.032945934172964991528047412054151747117', imag='0.19770123944707424891722554233993397651')
# i, n = mpmath.power(7, -mpmath.zetazero(10)), mpmath.mpc(real='-0.6486200602630824665915621827740626674', imag='0.4200744361467577119940894177446837931')
# i, n = mpmath.power(9, -mpmath.zetazero(10)), mpmath.mpc(real='-0.6075875905307222895978707698705464802', imag='0.49021522958889636739091562326046407951')
# i, n = mpmath.power(10, -mpmath.zetazero(10)), mpmath.mpc(real='-0.073142961489571344625802849000020631185', imag='0.35763273121294365364500875965172255043')
# i, n = mpmath.power(12, -mpmath.zetazero(10)), mpmath.mpc(real='-0.27347432667513377279753269867357749764', imag='-0.4997291939772897048900547471160676936')

# zetazero(11)
# i, n = mpmath.power(3, -mpmath.zetazero(11)), mpmath.mpc(real='-0.22282724574455788417141219708220885727', imag='0.15241774678738269395075540798151784976')
# i, n = mpmath.power(4, -mpmath.zetazero(11)), mpmath.mpc(real='-0.33793464871270160410485669954437073812', imag='-0.23600191004098421904230306315956641633')
# i, n = mpmath.power(5, -mpmath.zetazero(11)), mpmath.mpc(real='-0.71365740645328710980407447767016463093', imag='-0.32552541205168158064160607377812808994')
# i, n = mpmath.power(7, -mpmath.zetazero(11)), mpmath.mpc(real='-0.61223248267664344086110133656737431667', imag='0.41692880308576020417153506728674122058')

# zetazero(12) (missing 6, 13, 16)
# i, n = mpmath.power(2, -mpmath.zetazero(12)), mpmath.mpc(real='-0.16760167435854156962194396169181723133', imag='0.07201842984763933152023659231568680738')
# i, n = mpmath.power(3, -mpmath.zetazero(12)), mpmath.mpc(real='-0.021089927710665707850232326440401140483', imag='-0.054896595766061566522437725579962467192')
# i, n = mpmath.power(4, -mpmath.zetazero(12)), mpmath.mpc(real='-0.79446150815177229145176078929924216909', imag='0.25966153199192698489374640328291726684')
# i, n = mpmath.power(5, -mpmath.zetazero(12)), mpmath.mpc(real='-0.81374659489899978045468224188695558506', imag='0.32527011230889638516643224620802791343')
# i, n = mpmath.power(7, -mpmath.zetazero(12)), mpmath.mpc(real='-0.9038162908555442306361278209732378309', imag='0.42854887653264245952141102591773329465')
# i, n = mpmath.power(8, -mpmath.zetazero(12)), mpmath.mpc(real='-0.31762012176486583124197055069608540243', imag='-0.4009550881941259683622645483238672115')
# i, n = mpmath.power(9, -mpmath.zetazero(12)), mpmath.mpc(real='-0.13877492996055807270537182702891584662', imag='-0.36460798446059479101765328833269431758')
# i, n = mpmath.power(10, -mpmath.zetazero(12)), mpmath.mpc(real='-0.28614467121629959620582291197994889519', imag='-0.4520689279276538963008603379817357802')
# i, n = mpmath.power(11, -mpmath.zetazero(12)), mpmath.mpc(real='-0.80465427417945478473955489317836467319', imag='-0.57118880159772815274131102061289821666')
# i, n = mpmath.power(12, -mpmath.zetazero(12)), mpmath.mpc(real='-0.30137788084796964687348075383918935494', imag='0.50900976793965875125364639958824955927')
# i, n = mpmath.power(14, -mpmath.zetazero(12)), mpmath.mpc(real='-0.18173027993174365011798405826916005868', imag='-0.5098122350461313453938199595708121846')
# i, n = mpmath.power(15, -mpmath.zetazero(12)), mpmath.mpc(real='-0.29745746405630397848597108467471885816', imag='0.57449723848842306099684698870656507673')

# zetazero(13) (missing 6, 14)
# i, n = mpmath.power(2, -mpmath.zetazero(13)), mpmath.mpc(real='-0.77374737784420836281277474988522504888', imag='-0.063989040967877227874936439239189853054')
# i, n = mpmath.power(3, -mpmath.zetazero(13)), mpmath.mpc(real='-0.53131249508104813053042268896606078353', imag='0.18592178459313777728454829406405962618')
# i, n = mpmath.power(4, -mpmath.zetazero(13)), mpmath.mpc(real='0.015563399665017836062332643071136880619', imag='0.031703973520009301403523859783953512829')
# i, n = mpmath.power(5, -mpmath.zetazero(13)), mpmath.mpc(real='-0.066401763011518554268538114018920507057', imag='0.18241450061438509713840524914677741531')
# i, n = mpmath.power(7, -mpmath.zetazero(13)), mpmath.mpc(real='-0.5238807771520800383020199962413808404', imag='0.4068260056508084680432475218353835137')
# i, n = mpmath.power(8, -mpmath.zetazero(13)), mpmath.mpc(real='-0.44669095534453369755005111129276319789', imag='-0.43131607370128901004328692033518841192')
# i, n = mpmath.power(9, -mpmath.zetazero(13)), mpmath.mpc(real='-0.1007950324161098273834625303535108404', imag='-0.3447812512546037003197020363427550576')
# i, n = mpmath.power(10, -mpmath.zetazero(13)), mpmath.mpc(real='-0.10133401754655105572924954723876278871', imag='-0.37379127909635551456020092956057966383')
# i, n = mpmath.power(11, -mpmath.zetazero(13)), mpmath.mpc(real='-0.40068606835555359474192253785436723585', imag='-0.51176773004685361986109278671479424334')
# i, n = mpmath.power(12, -mpmath.zetazero(13)), mpmath.mpc(real='-0.85580896243667215542849386694411209587', imag='0.60304444107643800784244451116027121308')
# i, n = mpmath.power(13, -mpmath.zetazero(13)), mpmath.mpc(real='-0.0021239110839909631347496552027627054739', imag='0.38899970867172641731832467379007000761')
# i, n = mpmath.power(15, -mpmath.zetazero(13)), mpmath.mpc(real='-0.64628758808530073912680187747176328296', imag='-0.65504485315735310237286805385523750535')
# i, n = mpmath.power(16, -mpmath.zetazero(13)), mpmath.mpc(real='0.13208276983071339055267420731402312141', imag='0.34872872742804537999309273404416166467')

# zetazero(14) (missing 8, 12)
# i, n = mpmath.power(2, -mpmath.zetazero(14)), mpmath.mpc(real='-0.29616562529805343585047773851222906465', imag='-0.088317054305169643203915075549675666633')
# i, n = mpmath.power(3, -mpmath.zetazero(14)), mpmath.mpc(real='-0.49092640413742047918114782116879206335', imag='-0.18495968725623504342523873395075973592')
# i, n = mpmath.power(4, -mpmath.zetazero(14)), mpmath.mpc(real='-0.67855174012200900989297309694885731358', imag='0.26222110291910195714577831105665090237')
# i, n = mpmath.power(5, -mpmath.zetazero(14)), mpmath.mpc(real='-0.66454383914418929574151869556826408523', imag='-0.32437556959906813059235462166942462152')
# i, n = mpmath.power(6, -mpmath.zetazero(14)), mpmath.mpc(real='-0.42246912406594390964144822599290951239', imag='0.34961282306234699742833739439733145835')
# i, n = mpmath.power(7, -mpmath.zetazero(14)), mpmath.mpc(real='0.040325686405123163564063730855992789243', imag='-0.16161419781746513876681503576588085184')
# i, n = mpmath.power(9, -mpmath.zetazero(14)), mpmath.mpc(real='-0.17184097821329031599337853119901069071', imag='0.38002496793400503580994201855787125766')
# i, n = mpmath.power(10, -mpmath.zetazero(14)), mpmath.mpc(real='-0.22007264789307733148865727672621361411', imag='0.42857578607105763981818665947983475527')
# i, n = mpmath.power(11, -mpmath.zetazero(14)), mpmath.mpc(real='0.0018056364547285381172394777598088560259', imag='0.33458907840186796588832220484556532761')
# i, n = mpmath.power(13, -mpmath.zetazero(14)), mpmath.mpc(real='0.13890712039860226020424626200352493188', imag='-0.25886305397885263469168041470326396827')
# i, n = mpmath.power(14, -mpmath.zetazero(14)), mpmath.mpc(real='-0.76308420023117678313719357436931018333', imag='-0.64687841006852131433703045332779532497')
# i, n = mpmath.power(15, -mpmath.zetazero(14)), mpmath.mpc(real='0.04247099857159275994774697373701576142', imag='0.40289055340115883445110579234516109606')
# i, n = mpmath.power(16, -mpmath.zetazero(14)), mpmath.mpc(real='0.20532331514279566734013487150214504448', imag='-0.26561476257150694989051019058243828634')

# mpmath.zetazero(15) (missing 15)
# i, n = mpmath.power(2, -mpmath.zetazero(15)), mpmath.mpc(real='-0.098221975879232898478897756935041145596', imag='0.054128616594183079146247252619183714611')
# i, n = mpmath.power(3, -mpmath.zetazero(15)), mpmath.mpc(real='-0.55662245348935308999426591556311727574', imag='0.18614171683675197509110599929918843326')
# i, n = mpmath.power(4, -mpmath.zetazero(15)), mpmath.mpc(real='-0.49481169819418931405412197620347794062', imag='0.25569337569294978071823254702253200511')
# i, n = mpmath.power(5, -mpmath.zetazero(15)), mpmath.mpc(real='-0.35248643447109005821539162443266138067', imag='-0.29081113524017786452893174082487282292')
# i, n = mpmath.power(6, -mpmath.zetazero(15)), mpmath.mpc(real='-0.71367116659522424843557372325272486655', imag='-0.37861544362730710525750061534488045507')
# i, n = mpmath.power(7, -mpmath.zetazero(15)), mpmath.mpc(real='0.033132513982914362818602726486423785941', imag='0.17105818767324079874463205013991463198')
# i, n = mpmath.power(8, -mpmath.zetazero(15)), mpmath.mpc(real='-0.7814020106512034151557092748328826842', imag='-0.46849508200845370510493983320581592094')
# i, n = mpmath.power(9, -mpmath.zetazero(15)), mpmath.mpc(real='-0.060361772212457281115450584958498974685', imag='-0.3206462922200376041483476895372521963')
# i, n = mpmath.power(10, -mpmath.zetazero(15)), mpmath.mpc(real='0.13237106063406372573332472714586720521', imag='-0.14946135915252666122987023134031964783')
# i, n = mpmath.power(11, -mpmath.zetazero(15)), mpmath.mpc(real='0.13455864450501628086537211353617019757', imag='-0.1926383967771679930306241464275328046')
# i, n = mpmath.power(12, -mpmath.zetazero(15)), mpmath.mpc(real='-0.072850053607730427999217068244914577259', imag='-0.40985608398632046871470917075255764881')
# i, n = mpmath.power(13, -mpmath.zetazero(15)), mpmath.mpc(real='-0.64492643783638486292877580714626086615', imag='-0.60871129000975423502221625319368674682')
# i, n = mpmath.power(14, -mpmath.zetazero(15)), mpmath.mpc(real='-0.37432197574447658569028492961596739094', imag='0.57681021360188550967538632090629441004')
# i, n = mpmath.power(16, -mpmath.zetazero(15)), mpmath.mpc(real='-0.090928776307305847143467372158052660277', imag='-0.50759903358191609347637480116054358584')

# zetazero(16) (missing 6, 15)
# i, n = mpmath.power(2, -mpmath.zetazero(16)), mpmath.mpc(real='-0.60022029828100461910121981996507345144', imag='0.083064984759810289077066906748677326597')
# i, n = mpmath.power(3, -mpmath.zetazero(16)), mpmath.mpc(real='-0.24384583500003511395029479193633581593', imag='-0.15721186136912196321023404458835029555')
# i, n = mpmath.power(4, -mpmath.zetazero(16)), mpmath.mpc(real='-0.083030647024171751965538111984802138826', imag='-0.14943552394909185000323960610816829151')
# i, n = mpmath.power(5, -mpmath.zetazero(16)), mpmath.mpc(real='-0.034297422467127174189516870330103775678', imag='0.15781905913243043956318637766997678852')
# i, n = mpmath.power(7, -mpmath.zetazero(16)), mpmath.mpc(real='-0.078431436528632187886353301683118067554', imag='-0.26704868871039231807372335969462000844')
# i, n = mpmath.power(8, -mpmath.zetazero(16)), mpmath.mpc(real='-0.0090021378558119104377211327106995922765', imag='0.25119072036351145854151842384052012106')
# i, n = mpmath.power(9, -mpmath.zetazero(16)), mpmath.mpc(real='-0.80722822497794520017869596927230610181', imag='0.50676686532278986323410774872408497906')
# i, n = mpmath.power(10, -mpmath.zetazero(16)), mpmath.mpc(real='-0.64720888959036134425633408134326074985', imag='-0.52685238556752011609340804989405335662')
# i, n = mpmath.power(11, -mpmath.zetazero(16)), mpmath.mpc(real='-0.57703613249843082305786153994408670958', imag='-0.54663617223719080110121869516869222199')
# i, n = mpmath.power(12, -mpmath.zetazero(16)), mpmath.mpc(real='-0.85603060572771948094014970916935192579', imag='-0.60305740540684441574614717119559891439')
# i, n = mpmath.power(13, -mpmath.zetazero(16)), mpmath.mpc(real='-0.50743933299818863297635326563565262816', imag='0.58565885565875775539736004186581485732')
# i, n = mpmath.power(14, -mpmath.zetazero(16)), mpmath.mpc(real='0.13720155645780619355183556248170304706', imag='0.29101557366791301983415720791472107653')
# i, n = mpmath.power(16, -mpmath.zetazero(16)), mpmath.mpc(real='-0.5563325822112506931485247751936357615', imag='-0.66077825556228418932367619890554572559')

# zetazero(17) (missing 8, 15)
# i, n = mpmath.power(2, -mpmath.zetazero(17)), mpmath.mpc(real='-0.39201391188595628538985691207015233365', imag='-0.091750690789231109456096875678927571461')
# i, n = mpmath.power(3, -mpmath.zetazero(17)), mpmath.mpc(real='-0.048986307470242800717207577625439881921', imag='0.079856342709431508235332225108213447444')
# i, n = mpmath.power(4, -mpmath.zetazero(17)), mpmath.mpc(real='-0.42838092495633749602856788725322067083', imag='0.24927837250498053317790345409999672589')
# i, n = mpmath.power(5, -mpmath.zetazero(17)), mpmath.mpc(real='-0.039292860987181080933450892264714591947', imag='-0.16203068347479600169628686149186668981')
# i, n = mpmath.power(6, -mpmath.zetazero(17)), mpmath.mpc(real='0.0088755922284589141699554788318705941413', imag='-0.15738086308139421934640312792045213832')
# i, n = mpmath.power(7, -mpmath.zetazero(17)), mpmath.mpc(real='-0.82415648318294059746062083341672217714', imag='-0.42820028916068107424760378029497545388')
# i, n = mpmath.power(9, -mpmath.zetazero(17)), mpmath.mpc(real='-0.31350208801292513062366855398947072164', imag='0.4314966856095309385009820325722335744')
# i, n = mpmath.power(10, -mpmath.zetazero(17)), mpmath.mpc(real='-0.92357034333468181797040246365822274335', imag='0.54509755383336061305901950008030844113')
# i, n = mpmath.power(11, -mpmath.zetazero(17)), mpmath.mpc(real='-0.80668217910975616772725945366196950294', imag='-0.57132389401913613232919598924065574259')
# i, n = mpmath.power(12, -mpmath.zetazero(17)), mpmath.mpc(real='-0.95975646452419586380553414933196338638', imag='-0.60755333658313551425768538560371771014')
# i, n = mpmath.power(13, -mpmath.zetazero(17)), mpmath.mpc(real='-0.5334157333412959912650576498941646787', imag='0.59067019294367606280939881128023057918')
# i, n = mpmath.power(14, -mpmath.zetazero(17)), mpmath.mpc(real='0.051279223270074496479942247047993655472', imag='0.37280251583600118372740724952842510664')
# i, n = mpmath.power(16, -mpmath.zetazero(17)), mpmath.mpc(real='-0.23233712554770128487065907433528303881', imag='-0.57111638503056788577191268289145171978')

# zetazero(18) (missing 2, 15)
# i, n = mpmath.power(3, -mpmath.zetazero(18)), mpmath.mpc(real='-0.60200311827694743438345785022268041101', imag='-0.18585328250070903656711407444302334197')
# i, n = mpmath.power(4, -mpmath.zetazero(18)), mpmath.mpc(real='0.014897833233165344661162197735056464719', imag='-0.036991571691052175225570869825328274904')
# i, n = mpmath.power(5, -mpmath.zetazero(18)), mpmath.mpc(real='-0.81864528932622123864436046292726962385', imag='0.32517487437424460791479757474017935429')
# i, n = mpmath.power(6, -mpmath.zetazero(18)), mpmath.mpc(real='-0.77638970169455521005062385734676123782', imag='-0.38020785590658604036452184689243184675')
# i, n = mpmath.power(7, -mpmath.zetazero(18)), mpmath.mpc(real='-0.32761744943817628950973764545425175526', imag='0.36873329584356475766912187379535876576')
# i, n = mpmath.power(8, -mpmath.zetazero(18)), mpmath.mpc(real='0.076335298162063898361863795851173016074', imag='-0.15304597647897198177374596671257219905')
# i, n = mpmath.power(9, -mpmath.zetazero(18)), mpmath.mpc(real='0.0041626693061578081183718756984720406465', imag='0.27326255888717187566808110467238520947')
# i, n = mpmath.power(10, -mpmath.zetazero(18)), mpmath.mpc(real='-0.62022918347129556670157815963074910175', imag='0.52359346407431052798582399799383482911')
# i, n = mpmath.power(11, -mpmath.zetazero(18)), mpmath.mpc(real='-0.96512264477696730342698850478700126336', imag='-0.57802435145769093118435782788700177538')
# i, n = mpmath.power(12, -mpmath.zetazero(18)), mpmath.mpc(real='-0.97300126818288976010503004509930467401', imag='-0.60791135075900368122133444744273310257')
# i, n = mpmath.power(13, -mpmath.zetazero(18)), mpmath.mpc(real='-0.64530873006506905066953453947410495037', imag='0.60876413331845540802097529843852128356')
# i, n = mpmath.power(14, -mpmath.zetazero(18)), mpmath.mpc(real='-0.11348557389776842530824573425865018154', imag='0.47794270851115783363863899178984135811')
# i, n = mpmath.power(16, -mpmath.zetazero(18)), mpmath.mpc(real='0.10509972301839531489062901783716973879', imag='-0.37394406403464230268511641585899429018')

# zetazero(19) (missing 8, 11, 12, 13)
# i, n = mpmath.power(2, -mpmath.zetazero(19)), mpmath.mpc(real='-0.45653774006341488804299835143342473509', imag='0.091100158796457248206858184294072072574')
# i, n = mpmath.power(3, -mpmath.zetazero(19)), mpmath.mpc(real='-0.17032297807151087979842850822722469845', imag='0.13784179551606356406191113463242520708')
# i, n = mpmath.power(4, -mpmath.zetazero(19)), mpmath.mpc(real='-0.29492113538935702476058167076427059525', imag='-0.22744538409905433382426424651674334239')
# i, n = mpmath.power(5, -mpmath.zetazero(19)), mpmath.mpc(real='-0.57390513326650683127562638402188029655', imag='0.31973808943714098291029241652290915533')
# i, n = mpmath.power(6, -mpmath.zetazero(19)), mpmath.mpc(real='-0.63908694166701025266748755121547759392', imag='-0.37484727345603649511402724392622994738')
# i, n = mpmath.power(7, -mpmath.zetazero(19)), mpmath.mpc(real='-0.76392069391985579024585421041158616984', imag='0.42662815277953896251905567649608144617')
# i, n = mpmath.power(9, -mpmath.zetazero(19)), mpmath.mpc(real='-0.87221016068422552046111259620473200083', imag='0.50918776671271015968961225740809207737')
# i, n = mpmath.power(10, -mpmath.zetazero(19)), mpmath.mpc(real='-0.11605784812855921841159919769984024484', imag='-0.38167172996291202564368395503200175487')
# i, n = mpmath.power(14, -mpmath.zetazero(19)), mpmath.mpc(real='0.071997100390494257058614595852950725015', imag='-0.35545801480077897229431271440732196073')
# i, n = mpmath.power(15, -mpmath.zetazero(19)), mpmath.mpc(real='-0.45229630187068820093280293943097584861', imag='-0.61813957522153971006008412794898333559')
# i, n = mpmath.power(16, -mpmath.zetazero(19)), mpmath.mpc(real='-0.58265338088064585483665027309114485579', imag='0.6656316022416200317741295790356459172')

# zetazero(20) (missing 4, 6, 7, 9, 16)
# i, n = mpmath.power(2, -mpmath.zetazero(20)), mpmath.mpc(real='-0.90341510756870433013391246929347872303', imag='-0.044518149680207186258477563105141991381')
# i, n = mpmath.power(3, -mpmath.zetazero(20)), mpmath.mpc(real='-0.91693495274605677544753748098729653605', imag='0.1645302660201467114503085497489964195')
# i, n = mpmath.power(5, -mpmath.zetazero(20)), mpmath.mpc(real='-0.14167116535324740121172668483771120853', imag='-0.22480862096298969298600167621100824564')
# i, n = mpmath.power(8, -mpmath.zetazero(20)), mpmath.mpc(real='-0.85208323396435587465287526724733820067', imag='-0.47081251104485548994242983757002551822')
# i, n = mpmath.power(10, -mpmath.zetazero(20)), mpmath.mpc(real='-0.15625093295749544887395978061447822081', imag='0.40147637797192576019857862469578219216')
# i, n = mpmath.power(11, -mpmath.zetazero(20)), mpmath.mpc(real='-0.73735852842000394041368414799104704211', imag='0.56592934849069467935451507742166057141')
# i, n = mpmath.power(12, -mpmath.zetazero(20)), mpmath.mpc(real='-0.93804597397774459141118203366158485385', imag='-0.60686383069271730708952322828001723671')
# i, n = mpmath.power(13, -mpmath.zetazero(20)), mpmath.mpc(real='-0.94580351272852453854427903474594435327', imag='0.63451705569008025061035461133372104136')
# i, n = mpmath.power(14, -mpmath.zetazero(20)), mpmath.mpc(real='-0.57432513276762128848843575770238097837', imag='0.62130003504195996913282804776628777222')
# i, n = mpmath.power(15, -mpmath.zetazero(20)), mpmath.mpc(real='-0.04431672683960554685920978774428692224', imag='0.4612121901572970136526089171265615865')

# zetazero(21) (missing 10, 16)
# i, n = mpmath.power(2, -mpmath.zetazero(21)), mpmath.mpc(real='-0.20657023288386132005060378187283982674', imag='-0.078784739197479786256820923115393355484')
# i, n = mpmath.power(3, -mpmath.zetazero(21)), mpmath.mpc(real='-0.019277860939120001170929330713160523835', imag='-0.052842012556814342383378786284343265829')
# i, n = mpmath.power(4, -mpmath.zetazero(21)), mpmath.mpc(real='-0.95082564602523980023477307754540296261', imag='-0.2498105179159257798178836933536600228')
# i, n = mpmath.power(5, -mpmath.zetazero(21)), mpmath.mpc(real='-0.35494607284301436800426726645176814852', imag='0.29130688068838907862288248700229977024')
# i, n = mpmath.power(6, -mpmath.zetazero(21)), mpmath.mpc(real='-0.51472760047343652701147898299299500715', imag='-0.36330753832315155374852080460537991075')
# i, n = mpmath.power(7, -mpmath.zetazero(21)), mpmath.mpc(real='-0.70070571083363423531427255826578700694', imag='-0.42364765379521670947754776084359745269')
# i, n = mpmath.power(8, -mpmath.zetazero(21)), mpmath.mpc(real='-0.14080967039550364912583483038705281454', imag='0.33481764536322973865078096536685129938')
# i, n = mpmath.power(9, -mpmath.zetazero(21)), mpmath.mpc(real='-0.12536637688942417251838983034504239634', imag='-0.35788679295623683125485890705523166416')
# i, n = mpmath.power(11, -mpmath.zetazero(21)), mpmath.mpc(real='-0.16640286343130831093071332551869519154', imag='0.43269482101049570348177806342168927544')
# i, n = mpmath.power(12, -mpmath.zetazero(21)), mpmath.mpc(real='-0.48685075393900728680900683436521115055', imag='0.55702063285880531145886253835930357332')
# i, n = mpmath.power(13, -mpmath.zetazero(21)), mpmath.mpc(real='-0.52180147067839274763102592605170715046', imag='0.58846993400672647004921528277624591567')
# i, n = mpmath.power(14, -mpmath.zetazero(21)), mpmath.mpc(real='-0.28625307802839138860860826753985355636', imag='0.54975670958119433324981447599199733358')
# i, n = mpmath.power(15, -mpmath.zetazero(21)), mpmath.mpc(real='0.10455123335120994799031842439419222831', imag='0.35075526559727440667653618235857169392')

# mpmath.zetazero(22) (missing 2, 9)
# i, n = mpmath.power(3, -mpmath.zetazero(22)), mpmath.mpc(real='-0.94764504625141776523705517942955166191', imag='0.16097651066682934608491866743176679199')
# i, n = mpmath.power(4, -mpmath.zetazero(22)), mpmath.mpc(real='-0.2848346084292489314840973122229026644', imag='0.22519298924290648657332052971511434325')
# i, n = mpmath.power(5, -mpmath.zetazero(22)), mpmath.mpc(real='-0.13760474701546317816812587696135454818', imag='0.22289700401799857523067292768721441798')
# i, n = mpmath.power(6, -mpmath.zetazero(22)), mpmath.mpc(real='-0.45257125097269964472027349641796948262', imag='-0.35462923644344055565837217214407720244')
# i, n = mpmath.power(7, -mpmath.zetazero(22)), mpmath.mpc(real='-0.33756135330903798088318742110447950543', imag='-0.37130503713927264326548482779598626194')
# i, n = mpmath.power(8, -mpmath.zetazero(22)), mpmath.mpc(real='-0.73756767335198596184498489323145695324', imag='0.46623006981647119851183227411421287606')
# i, n = mpmath.power(10, -mpmath.zetazero(22)), mpmath.mpc(real='-0.52303403569934181335275665933703688317', imag='0.50919804523558682263677042674479839699')
# i, n = mpmath.power(11, -mpmath.zetazero(22)), mpmath.mpc(real='-0.426309136803603465889055835122009214', imag='-0.51789703286169517937829588169202373445')
# i, n = mpmath.power(12, -mpmath.zetazero(22)), mpmath.mpc(real='0.028185485737583421526355158003694163607', imag='-0.3409571757768490143466244499175540244')
# i, n = mpmath.power(13, -mpmath.zetazero(22)), mpmath.mpc(real='0.16430363806644211379963601200531143173', imag='-0.22453863380003943937405148132921960555')
# i, n = mpmath.power(14, -mpmath.zetazero(22)), mpmath.mpc(real='0.1344012393467197015295365120363198131', imag='-0.29416605867516578640235752890543212816')
# i, n = mpmath.power(15, -mpmath.zetazero(22)), mpmath.mpc(real='-0.092940131886697840649190601625099334849', imag='-0.4884793570807790932413307332348772047')
# i, n = mpmath.power(16, -mpmath.zetazero(22)), mpmath.mpc(real='-0.61340299008858998718672188100712442448', imag='-0.67093023017761670462797797652825887322')

# mpmath.zetazero(23) (missing 8, 10)
# i, n = mpmath.power(2, -mpmath.zetazero(23)), mpmath.mpc(real='-0.44611904499636715143903170825985643875', imag='0.09134477202818635581174552771221786416')
# i, n = mpmath.power(3, -mpmath.zetazero(23)), mpmath.mpc(real='-0.079532922998853317730813166395063826712', imag='-0.099518973131337423149447020253651641387')
# i, n = mpmath.power(4, -mpmath.zetazero(23)), mpmath.mpc(real='-0.3147742680797264026935210953550523084', imag='-0.23159800653480517627669971533948824557')
# i, n = mpmath.power(5, -mpmath.zetazero(23)), mpmath.mpc(real='-0.27848422065056363652534739206089154929', imag='-0.27347516074008427887688604325792417984')
# i, n = mpmath.power(6, -mpmath.zetazero(23)), mpmath.mpc(real='0.014135895222601422842881558038255595401', imag='0.15113228274017045397293817609067290905')
# i, n = mpmath.power(7, -mpmath.zetazero(23)), mpmath.mpc(real='-0.11859505036766662631706096838657412491', imag='0.29011852155537045596922279563089675004')
# i, n = mpmath.power(9, -mpmath.zetazero(23)), mpmath.mpc(real='-0.47195055219872963214683799243134642034', imag='-0.46932971645896586859540765969140311677')
# i, n = mpmath.power(11, -mpmath.zetazero(23)), mpmath.mpc(real='-0.3569881054093803680608458564606246918', imag='0.50034771264438714013799273659560413372')
# i, n = mpmath.power(12, -mpmath.zetazero(23)), mpmath.mpc(real='-0.92955593424190273748992749786060422703', imag='-0.60655896101450711585987801946410207448')
# i, n = mpmath.power(13, -mpmath.zetazero(23)), mpmath.mpc(real='-0.60366941458011915734284456704522544511', imag='-0.60265965750491128746934694341084743029')
# i, n = mpmath.power(14, -mpmath.zetazero(23)), mpmath.mpc(real='-0.60227159416110179902477157768024876449', imag='-0.62597463162676255838743994086614176146')
# i, n = mpmath.power(15, -mpmath.zetazero(23)), mpmath.mpc(real='-0.88562114535444627188419071791655164917', imag='-0.68046749981763359400379185111888725531')
# i, n = mpmath.power(16, -mpmath.zetazero(23)), mpmath.mpc(real='-0.52409099947180375306371749605340709176', imag='0.65441542717780638585109088682052503731')

# mpmath.zetazero(24) (missing 6, 7, 8, 10)
# i, n = mpmath.power(2, -mpmath.zetazero(24)), mpmath.mpc(real='-0.46739098978479854622075486473150717787', imag='-0.090791741983605827714047884758502650629')
# i, n = mpmath.power(3, -mpmath.zetazero(24)), mpmath.mpc(real='-0.27973342497106496537558218668190012576', imag='0.16426252819649402905538649295638611791')
# i, n = mpmath.power(4, -mpmath.zetazero(24)), mpmath.mpc(real='-0.27490797324210532436740963523910569451', imag='0.2228774525810093738210962912579064807')
# i, n = mpmath.power(5, -mpmath.zetazero(24)), mpmath.mpc(real='-0.58145174363577525797606949127013067868', imag='0.32025890650348853080606957074562168192')
# i, n = mpmath.power(9, -mpmath.zetazero(24)), mpmath.mpc(real='-0.68882858671337633325320315483821199498', imag='-0.49875774658114337661148854607695255436')
# i, n = mpmath.power(11, -mpmath.zetazero(24)), mpmath.mpc(real='-0.44875008243867419722575436427394210282', imag='0.52294293668422136051212658625132003787')
# i, n = mpmath.power(12, -mpmath.zetazero(24)), mpmath.mpc(real='-0.66834552677749961033274039314645291718', imag='-0.58630499465376419986083239763460974358')
# i, n = mpmath.power(13, -mpmath.zetazero(24)), mpmath.mpc(real='-0.25196317641052603502913454046909125721', imag='-0.51557822014456083148063361282508335328')
# i, n = mpmath.power(14, -mpmath.zetazero(24)), mpmath.mpc(real='-0.14463662064657137725379155631665046559', imag='-0.49314094213505931793577274760180579693')
# i, n = mpmath.power(15, -mpmath.zetazero(24)), mpmath.mpc(real='-0.26796866237978772102388479203950275111', imag='-0.56438132696973737334530183241141431707')
# i, n = mpmath.power(16, -mpmath.zetazero(24)), mpmath.mpc(real='-0.64435324669712971060256395681926721484', imag='-0.67587607615414490808946069388249575784')


# mpmath.zetazero(186614) (missing 11, 12)
# i, n = mpmath.power(2, -mpmath.zetazero(186614)), mpmath.mpc(real='-0.68120250446301070682300135505049840572', imag='-0.075272244413291999436017575826948576322')
# i, n = mpmath.power(3, -mpmath.zetazero(186614)), mpmath.mpc(real='-0.012086819099931725555135765463485295841', imag='-0.043717637205582245250858367530432528105')
# i, n = mpmath.power(4, -mpmath.zetazero(186614)), mpmath.mpc(real='-0.014406583644129961164292270808573004377', imag='0.093292707864808623169733439046920104812')
# i, n = mpmath.power(5, -mpmath.zetazero(186614)), mpmath.mpc(real='0.035250484221675319751213152085103961933', imag='0.029311763811552480363069105192997641448')
# i, n = mpmath.power(6, -mpmath.zetazero(186614)), mpmath.mpc(real='-0.81179244626419824330813975344753987054', imag='0.38052455982817731763830558234708947195')
# i, n = mpmath.power(7, -mpmath.zetazero(186614)), mpmath.mpc(real='0.043601088447836081466434757371553551785', imag='0.1570389757579879670941792551838159335')
# i, n = mpmath.power(8, -mpmath.zetazero(186614)), mpmath.mpc(real='-0.19250672873885491567462498444555924351', imag='-0.35802410535574950884668985191741714006')
# i, n = mpmath.power(9, -mpmath.zetazero(186614)), mpmath.mpc(real='-0.067198826714270596022276729616619457793', imag='-0.32497891104484918278874517641741611949')
# i, n = mpmath.power(10, -mpmath.zetazero(186614)), mpmath.mpc(real='-0.34648141493315127898493699583025060674', imag='-0.47020738081406153542900919495981601824')
# i, n = mpmath.power(13, -mpmath.zetazero(186614)), mpmath.mpc(real='0.026450181916433666590975480251506069511', imag='-0.36799013700033157406043374966704713298')
# i, n = mpmath.power(14, -mpmath.zetazero(186614)), mpmath.mpc(real='-0.10728155489672645950972137991518263603', imag='-0.47477407339592200445233123342888206144')
# i, n = mpmath.power(16, -mpmath.zetazero(186614)), mpmath.mpc(real='-0.18929203187138508751500559794427728796', imag='0.55383193538501603142714329850872185404')

# mpmath.zetazero(186615) (missing 3, 8, 9, 10, 14)
# i, n = mpmath.power(2, -mpmath.zetazero(186615)), mpmath.mpc(real='-0.39106888998978788662975742081904052573', imag='-0.091744134199319360231301040179496402137')
# i, n = mpmath.power(4, -mpmath.zetazero(186615)), mpmath.mpc(real='-0.43052826433232874107703646335195300249', imag='0.24952621103701016356457600483496410908')
# i, n = mpmath.power(5, -mpmath.zetazero(186615)), mpmath.mpc(real='-0.34829142131690545550638190815139880706', imag='0.28995458582568711488326533427611663731')
# i, n = mpmath.power(6, -mpmath.zetazero(186615)), mpmath.mpc(real='-0.24961897676165997592856796271669203494', imag='-0.30771849249484881375282908652740458675')
# i, n = mpmath.power(7, -mpmath.zetazero(186615)), mpmath.mpc(real='-0.71505303887369822368702195025904266717', imag='0.42445012273101202043306618989048420557')
# i, n = mpmath.power(11, -mpmath.zetazero(186615)), mpmath.mpc(real='-0.082465787506964999937199699169990956774', imag='0.39008821194780200245511656040828890597')
# i, n = mpmath.power(12, -mpmath.zetazero(186615)), mpmath.mpc(real='-0.51319757768341470411505140229277884907', imag='0.56221814828745913826571589070810309035')
# i, n = mpmath.power(13, -mpmath.zetazero(186615)), mpmath.mpc(real='0.17754074521051672848039500214964461297', imag='0.20413293888687064972428652344463918776')
# i, n = mpmath.power(15, -mpmath.zetazero(186615)), mpmath.mpc(real='-0.40597572365492222150110067781899576854', imag='0.60659924615384682598953685408923355268')
# i, n = mpmath.power(16, -mpmath.zetazero(186615)), mpmath.mpc(real='-0.2274549038051440605256622497450544695', imag='-0.5692355028470179377915672698627702512')

# mpmath.zetazero(186616) (missing 16)
# i, n = mpmath.power(2, -mpmath.zetazero(186616)), mpmath.mpc(real='-0.2702964259872017325484554449487358268', imag='-0.086293374378687874644082028077420619052')
# i, n = mpmath.power(3, -mpmath.zetazero(186616)), mpmath.mpc(real='-0.012575130720650159885719474509351416671', imag='0.044398454059819232290269256097231819435')
# i, n = mpmath.power(4, -mpmath.zetazero(186616)), mpmath.mpc(real='-0.75890287633615283079778333993014222281', imag='0.26091689500357388646603103522636881842')
# i, n = mpmath.power(5, -mpmath.zetazero(186616)), mpmath.mpc(real='-0.72616516691069494914292944804895851512', imag='0.32567799283780414355239906239240067541')
# i, n = mpmath.power(6, -mpmath.zetazero(186616)), mpmath.mpc(real='0.018491532899616115814285918426214155744', imag='-0.14566025798742767382276487325751735606')
# i, n = mpmath.power(7, -mpmath.zetazero(186616)), mpmath.mpc(real='-0.69601458625022950760816769616781674413', imag='-0.4233686605646348559841283113887414975')
# i, n = mpmath.power(8, -mpmath.zetazero(186616)), mpmath.mpc(real='0.051918651221542999269696396122392176017', imag='0.18893431240170384221751084233632795936')
# i, n = mpmath.power(9, -mpmath.zetazero(186616)), mpmath.mpc(real='-0.071467390755367153178702874723564606949', imag='0.32762874231931663140987280991564816756')
# i, n = mpmath.power(10, -mpmath.zetazero(186616)), mpmath.mpc(real='0.10514243906006719441750163089292663588', imag='0.1968525256702325938317564363967779129')
# i, n = mpmath.power(11, -mpmath.zetazero(186616)), mpmath.mpc(real='-0.65367200707340632558432733410211251903', imag='0.55713498156449120328210684877221901931')
# i, n = mpmath.power(12, -mpmath.zetazero(186616)), mpmath.mpc(real='-0.72279959131518693827081251559521568262', imag='-0.59242563920822937778042142761322024042')
# i, n = mpmath.power(13, -mpmath.zetazero(186616)), mpmath.mpc(real='-0.31641251776397929742392587478503056679', imag='0.53738102516647383545653015792341886426')
# i, n = mpmath.power(14, -mpmath.zetazero(186616)), mpmath.mpc(real='-0.19063517627359214198574450186695652597', imag='0.5136018363714897323219088320926177984')
# i, n = mpmath.power(15, -mpmath.zetazero(186616)), mpmath.mpc(real='-0.75257209802951347055925098744334644479', imag='-0.66871737495806301520584744569684895161')

# mpmath.zetazero(186617) (missing 6)
# i, n = mpmath.power(2, -mpmath.zetazero(186617)), mpmath.mpc(real='-0.14552761593767105128057229114827814823', imag='-0.067261055197199482776822245207537030705')
# i, n = mpmath.power(3, -mpmath.zetazero(186617)), mpmath.mpc(real='-0.13466703469341272791829894686919695638', imag='0.12527544560311207445389099717721668654')
# i, n = mpmath.power(4, -mpmath.zetazero(186617)), mpmath.mpc(real='-0.7027218796874184824539423346653930947', imag='-0.26206317678880535608022198793153991602')
# i, n = mpmath.power(5, -mpmath.zetazero(186617)), mpmath.mpc(real='-0.66222708534003685614964648969532465518', imag='-0.32429887535858773372276213059873589222')
# i, n = mpmath.power(7, -mpmath.zetazero(186617)), mpmath.mpc(real='-0.13485250696916715885860943804925651178', imag='-0.29846127462974938843685935181285445517')
# i, n = mpmath.power(8, -mpmath.zetazero(186617)), mpmath.mpc(real='-0.4408926960709705730001593756157094185', imag='0.43019095744697140551483526617204767221')
# i, n = mpmath.power(9, -mpmath.zetazero(186617)), mpmath.mpc(real='-0.72278067572935577687544561044296940947', imag='0.50156270235197018821502259054229061277')
# i, n = mpmath.power(10, -mpmath.zetazero(186617)), mpmath.mpc(real='-0.4675275912049146841413675480265070718', imag='0.49890595142572416216929474747462026384')
# i, n = mpmath.power(11, -mpmath.zetazero(186617)), mpmath.mpc(real='-0.43239086285314892745956881239604680831', imag='-0.51929359064892851470491861648128650185')
# i, n = mpmath.power(12, -mpmath.zetazero(186617)), mpmath.mpc(real='0.027593851938394841099640591814920429198', imag='-0.34143381637781200875574654192337613279')
# i, n = mpmath.power(13, -mpmath.zetazero(186617)), mpmath.mpc(real='-0.70504039852059416267766067475111954917', imag='-0.61632646534101297468027079005668953475')
# i, n = mpmath.power(14, -mpmath.zetazero(186617)), mpmath.mpc(real='-0.82200858889380284260766318685058040779', imag='-0.65225154282760384382674916351752823715')
# i, n = mpmath.power(15, -mpmath.zetazero(186617)), mpmath.mpc(real='0.092666503559396832393889833327815709015', imag='-0.36159516362133795813136299453997231247')
# i, n = mpmath.power(16, -mpmath.zetazero(186617)), mpmath.mpc(real='0.23439903158051251559972261531157007827', imag='0.2240976631963399935938699225168477866')

# mpmath.zetazero(186618) (missing 6, 12)
# i, n = mpmath.power(2, -mpmath.zetazero(186618)), mpmath.mpc(real='-0.098794373811578635445556347285247451439', imag='-0.05431670591556270812342472177943574448')
# i, n = mpmath.power(3, -mpmath.zetazero(186618)), mpmath.mpc(real='-0.23425960988406658594024461996125120457', imag='0.15509079604736673441017534256048380187')
# i, n = mpmath.power(4, -mpmath.zetazero(186618)), mpmath.mpc(real='-0.49744917063292033134609525819708147458', imag='-0.25589754503888522957018076017439399881')
# i, n = mpmath.power(5, -mpmath.zetazero(186618)), mpmath.mpc(real='-0.42540954666164701552744694352626125006', imag='-0.30362644868523707934667205043646192045')
# i, n = mpmath.power(7, -mpmath.zetazero(186618)), mpmath.mpc(real='0.036671918922885902884205309774159211591', imag='-0.16650754108895308612375817994055189194')
# i, n = mpmath.power(8, -mpmath.zetazero(186618)), mpmath.mpc(real='-0.77647399243929201497161093713797777739', imag='0.46827315805427738809226689814183444039')
# i, n = mpmath.power(9, -mpmath.zetazero(186618)), mpmath.mpc(real='-0.84087931347360908295115690757892361351', imag='-0.50818373626585024445944244803717494984')
# i, n = mpmath.power(10, -mpmath.zetazero(186618)), mpmath.mpc(real='-0.85808883413714301108435462138095785238', imag='0.54300983070870265594727709547660037221')
# i, n = mpmath.power(11, -mpmath.zetazero(186618)), mpmath.mpc(real='-0.09644098165213418482486174023059495768', imag='-0.39791982599783808269970336098708559405')
# i, n = mpmath.power(13, -mpmath.zetazero(186618)), mpmath.mpc(real='-0.28446524680111065419196513190778405431', imag='-0.5269828432230476726823177872643498928')
# i, n = mpmath.power(14, -mpmath.zetazero(186618)), mpmath.mpc(real='-0.36701983824179510997282099848586126771', imag='-0.5747650023072203181260900616845812374')
# i, n = mpmath.power(16, -mpmath.zetazero(186618)), mpmath.mpc(real='-0.085711723158432994159609772331851731467', imag='0.50484546703828619937772283740011263033')

# mpmath.zetazero(186619) (missing 4, 5, 9, 10)
# i, n = mpmath.power(2, -mpmath.zetazero(186619)), mpmath.mpc(real='-0.0080513993673429332679388822853210668601', imag='-0.0062141066280574572249180890334814402924')
# i, n = mpmath.power(3, -mpmath.zetazero(186619)), mpmath.mpc(real='-0.81677439802447854882501851067710571335', imag='0.17448512070191765126883425497602320207')
# i, n = mpmath.power(6, -mpmath.zetazero(186619)), mpmath.mpc(real='-0.60184176076771420919525853111243483366', imag='0.37212726551544323987547397296974403827')
# i, n = mpmath.power(7, -mpmath.zetazero(186619)), mpmath.mpc(real='0.0071799509859248700746051375547330447038', imag='0.20011299154048079020011761171126560859')
# i, n = mpmath.power(8, -mpmath.zetazero(186619)), mpmath.mpc(real='0.025933628447691094430443001225418190594', imag='-0.21873324874696602431365252647316859482')
# i, n = mpmath.power(11, -mpmath.zetazero(186619)), mpmath.mpc(real='0.098044748962085802077262107412412839071', imag='0.24334611054968034728441653105637166153')
# i, n = mpmath.power(12, -mpmath.zetazero(186619)), mpmath.mpc(real='-0.047495673647313997291949491867113661031', imag='-0.02686474534034551486074951936840081842')
# i, n = mpmath.power(13, -mpmath.zetazero(186619)), mpmath.mpc(real='0.19893143579351355282744199315430644087', imag='0.16591852910303187333224899396560769713')
# i, n = mpmath.power(14, -mpmath.zetazero(186619)), mpmath.mpc(real='-0.0062056708239116955928419177110275466585', imag='0.024514012947065005632110072930700506852')
# i, n = mpmath.power(15, -mpmath.zetazero(186619)), mpmath.mpc(real='-0.080288475469031497765736407432506313489', imag='-0.032594617754421436334363431795930253586')
# i, n = mpmath.power(16, -mpmath.zetazero(186619)), mpmath.mpc(real='-0.015284314419989971795875562723524280465', imag='-0.46407755080096926953142154973661615464')

# mpmath.zetazero(186620) (missing 2, 4, 5, 8, 9, 10, 16)
# i, n = mpmath.power(3, -mpmath.zetazero(186620)), mpmath.mpc(real='-0.74003454428712925378352901767819018567', imag='-0.18025107387799811773585046446710818985')
# i, n = mpmath.power(6, -mpmath.zetazero(186620)), mpmath.mpc(real='-0.7382855916492714447547685316663171343', imag='-0.37940332227855075526169038559928830441')
# i, n = mpmath.power(7, -mpmath.zetazero(186620)), mpmath.mpc(real='-0.443857975376404547419237982852632656', imag='0.39423445514526715993587243795936425561')
# i, n = mpmath.power(11, -mpmath.zetazero(186620)), mpmath.mpc(real='-0.52554297767798320099430595674356843232', imag='0.53811525332120478187631659495467727753')
# i, n = mpmath.power(12, -mpmath.zetazero(186620)), mpmath.mpc(real='-0.71856217370925555933552537506632975378', imag='-0.59198859711128702428402518810104725723')
# i, n = mpmath.power(13, -mpmath.zetazero(186620)), mpmath.mpc(real='-0.43336700701452384395032186082006797184', imag='0.5694794347928883033639664642192741948')
# i, n = mpmath.power(14, -mpmath.zetazero(186620)), mpmath.mpc(real='-0.40638084634927601729363610509101816468', imag='0.58540072596374722129961564231999156418')
# i, n = mpmath.power(15, -mpmath.zetazero(186620)), mpmath.mpc(real='-0.39799874763033146588421282651411570614', imag='-0.60448979110267917755994349731114128413')

# mpmath.zetazero(186621) (missing 2, 4, 15)
# i, n = mpmath.power(3, -mpmath.zetazero(186621)), mpmath.mpc(real='-0.31724801521573388279403362679196743691', imag='-0.17030233369573704731297470987860495803')
# i, n = mpmath.power(5, -mpmath.zetazero(186621)), mpmath.mpc(real='-0.25637806943039922523776867856879541544', imag='0.26727413040385328978069351842375473193')
# i, n = mpmath.power(6, -mpmath.zetazero(186621)), mpmath.mpc(real='-0.06792999181320906520358366642659308294', imag='-0.22356493372247015096059573498890737385')
# i, n = mpmath.power(7, -mpmath.zetazero(186621)), mpmath.mpc(real='-0.58807571732262725611944537742038245435', imag='-0.41452612803684373947889941718265732656')
# i, n = mpmath.power(8, -mpmath.zetazero(186621)), mpmath.mpc(real='-0.16663046579392692922514200802410145466', imag='0.34689598769927677212333984341688835418')
# i, n = mpmath.power(9, -mpmath.zetazero(186621)), mpmath.mpc(real='-0.57636289108938222787638295040363194234', imag='0.48618941439646810988681565978751886549')
# i, n = mpmath.power(10, -mpmath.zetazero(186621)), mpmath.mpc(real='-0.49298893419673236909085675443558840339', imag='0.50382889554081485759848042690154389497')
# i, n = mpmath.power(11, -mpmath.zetazero(186621)), mpmath.mpc(real='-0.26830287903378874331038314095586616175', imag='-0.47292096365976178737469547138668519762')
# i, n = mpmath.power(12, -mpmath.zetazero(186621)), mpmath.mpc(real='0.19337138539176383305234703804207313829', imag='-0.12390967503291456974764138662045606214')
# i, n = mpmath.power(13, -mpmath.zetazero(186621)), mpmath.mpc(real='-0.25781332093233260858998927815234542596', imag='-0.51769556167661322975588465714863976632')
# i, n = mpmath.power(14, -mpmath.zetazero(186621)), mpmath.mpc(real='-0.23957483036553430285477294928303470293', imag='-0.53308998419027947179516637754723120499')
# i, n = mpmath.power(16, -mpmath.zetazero(186621)), mpmath.mpc(real='-0.3895597385847013635042699887251174676', imag='0.62235366242982028412954608524178446138')

# mpmath.zetazero(186622) (missing 6, 12)
# i, n = mpmath.power(2, -mpmath.zetazero(186622)), mpmath.mpc(real='-0.043780231524239630401688772207800992718', imag='0.031322248064365548736132924140686990149')
# i, n = mpmath.power(3, -mpmath.zetazero(186622)), mpmath.mpc(real='-0.15819502667251917872754601628535373817', imag='-0.13384761449077622859965756791321001399')
# i, n = mpmath.power(4, -mpmath.zetazero(186622)), mpmath.mpc(real='-0.22003480195388748139438108506064914833', imag='0.20810484992580933725444735546766034208')
# i, n = mpmath.power(5, -mpmath.zetazero(186622)), mpmath.mpc(real='-0.56826095684663705105043541134245744852', imag='0.31933157939513677635797312953089123009')
# i, n = mpmath.power(7, -mpmath.zetazero(186622)), mpmath.mpc(real='-0.1960560189957476217687614428904197439', imag='-0.32580599029403889238148307419396701805')
# i, n = mpmath.power(8, -mpmath.zetazero(186622)), mpmath.mpc(real='-0.59136764986914398513414439470514381994', imag='0.45347001388240258708606999424920541664')
# i, n = mpmath.power(9, -mpmath.zetazero(186622)), mpmath.mpc(real='-0.82218571449768831995070699841034079051', imag='-0.50744085298683427507876678537832467526')
# i, n = mpmath.power(10, -mpmath.zetazero(186622)), mpmath.mpc(real='-0.88186078509501976892858777169653389', imag='-0.54391271075479911992720110703207996698')
# i, n = mpmath.power(11, -mpmath.zetazero(186622)), mpmath.mpc(real='0.12374847324547425146132555738801056414', imag='-0.2092477040462573658480496954209476794')
# i, n = mpmath.power(13, -mpmath.zetazero(186622)), mpmath.mpc(real='0.1753689176360110658379072749255749282', imag='-0.20762477154644911471845957779495189953')
# i, n = mpmath.power(14, -mpmath.zetazero(186622)), mpmath.mpc(real='0.20727171282056786469728622309724942348', imag='-0.19412454549145987122878206945124949182')
# i, n = mpmath.power(15, -mpmath.zetazero(186622)), mpmath.mpc(real='0.18506917611811486140131761162967085229', imag='0.2621026943646586026739822385219677791')
# i, n = mpmath.power(16, -mpmath.zetazero(186622)), mpmath.mpc(real='-0.82911371717002483140452144916136500719', imag='-0.69814704927016260426227575351917787162')

# mpmath.zetazero(186623) (missing 6, 7, 11)
# i, n = mpmath.power(2, -mpmath.zetazero(186623)), mpmath.mpc(real='-0.13522015625618902661459604271315761141', imag='0.064771010211948254805116918219063334892')
# i, n = mpmath.power(3, -mpmath.zetazero(186623)), mpmath.mpc(real='-0.010004319217923320991534716672363838139', imag='-0.040681283330839127096683288355669269272')
# i, n = mpmath.power(4, -mpmath.zetazero(186623)), mpmath.mpc(real='-0.65889896787851034397204408102653943322', imag='0.26219247651437174543688418325017570207')
# i, n = mpmath.power(5, -mpmath.zetazero(186623)), mpmath.mpc(real='-0.73239542843797999625422910436033946767', imag='-0.32573351397586828443744800794998529398')
# i, n = mpmath.power(8, -mpmath.zetazero(186623)), mpmath.mpc(real='-0.50522864840057187283316317918608300307', imag='-0.44159058499052387230050952964345369099')
# i, n = mpmath.power(9, -mpmath.zetazero(186623)), mpmath.mpc(real='-0.048289082806315489805561357370238351604', imag='-0.31271598741211603274846029785111638502')
# i, n = mpmath.power(10, -mpmath.zetazero(186623)), mpmath.mpc(real='-0.043555348234426922037404427404072439218', imag='-0.33894662506195136121794164892619314014')
# i, n = mpmath.power(12, -mpmath.zetazero(186623)), mpmath.mpc(real='-0.23545738524335320005017277090924914338', imag='0.48602744496190027103040989414681076694')
# i, n = mpmath.power(13, -mpmath.zetazero(186623)), mpmath.mpc(real='0.20791357848216020158506796088916510258', imag='0.14718937662571302278269843020287456108')
# i, n = mpmath.power(14, -mpmath.zetazero(186623)), mpmath.mpc(real='0.19949565011567041539251296636601322492', imag='0.20714709561502643381321779615236957277')
# i, n = mpmath.power(15, -mpmath.zetazero(186623)), mpmath.mpc(real='-0.76537842126783824887910187276622231143', imag='0.67009509394453322586630189299364315779')
# i, n = mpmath.power(16, -mpmath.zetazero(186623)), mpmath.mpc(real='0.17999959695574167363880868634619123874', imag='-0.2972743485400353613920962699880110604')

# mpmath.zetazero(186624) (missing 3, 8, 9, 10)
# i, n = mpmath.power(2, -mpmath.zetazero(186624)), mpmath.mpc(real='-0.32228259324489274970910079036487789039', imag='0.089848787811583040397619380011539130323')
# i, n = mpmath.power(4, -mpmath.zetazero(186624)), mpmath.mpc(real='-0.60343376803055939675560706164022332877', imag='-0.26130646585400171621808292195722939018')
# i, n = mpmath.power(5, -mpmath.zetazero(186624)), mpmath.mpc(real='-0.10660442221749564706634771815635691837', imag='-0.20707068653508990313707194316351614368')
# i, n = mpmath.power(6, -mpmath.zetazero(186624)), mpmath.mpc(real='-0.3802492178024328632558704491357666646', imag='0.34157902908064467115438213457374777581')
# i, n = mpmath.power(7, -mpmath.zetazero(186624)), mpmath.mpc(real='-0.015956413222599357423883241514418333814', imag='0.22153800046133379249117089707445436574')
# i, n = mpmath.power(11, -mpmath.zetazero(186624)), mpmath.mpc(real='-0.6522277020913493189670799454233206407', imag='0.5569596573112331241808515715294016882')
# i, n = mpmath.power(12, -mpmath.zetazero(186624)), mpmath.mpc(real='-0.44840940217152553670860172020348304903', imag='-0.54878346968463092725934857532297307324')
# i, n = mpmath.power(13, -mpmath.zetazero(186624)), mpmath.mpc(real='-0.8465997447634772098995808099583870931', imag='0.62921204460202357219882021460944649698')
# i, n = mpmath.power(14, -mpmath.zetazero(186624)), mpmath.mpc(real='-0.95608367973105152537357326226524809689', imag='0.66052855565336705843631293282304251456')
# i, n = mpmath.power(15, -mpmath.zetazero(186624)), mpmath.mpc(real='0.11704635554584306668415965650982053105', imag='-0.33884389702094285985074647578148211283')
# i, n = mpmath.power(16, -mpmath.zetazero(186624)), mpmath.mpc(real='0.10037547638317835894100205376572529344', imag='0.37812744612354382752639849859480004832')

# zetazero(186625) (missing 5, 8, 12, 15)
# i, n = mpmath.power(2, -mpmath.zetazero(186625)), mpmath.mpc(real='-0.51383394353113494293537665603470065158', imag='0.088886160748065526194036755664902943049')
# i, n = mpmath.power(3, -mpmath.zetazero(186625)), mpmath.mpc(real='-0.034907745440197193039629214332533164431', imag='0.068498087088971148603242452646866863609')
# i, n = mpmath.power(4, -mpmath.zetazero(186625)), mpmath.mpc(real='-0.19677936490847116863632485077333663621', imag='-0.20068531732316683527453616619984499145')
# i, n = mpmath.power(6, -mpmath.zetazero(186625)), mpmath.mpc(real='-0.90419408475301997407541870868668229301', imag='-0.37954027826281990245388098682644695938')
# i, n = mpmath.power(7, -mpmath.zetazero(186625)), mpmath.mpc(real='-0.57771467561562284376868240771388741409', imag='0.41341544097534818915873239380501995194')
# i, n = mpmath.power(9, -mpmath.zetazero(186625)), mpmath.mpc(real='-0.23099242141507815164631968749545612926', imag='0.40406824052041707169324215181452814801')
# i, n = mpmath.power(10, -mpmath.zetazero(186625)), mpmath.mpc(real='-0.28708605054576074694195353019585377142', imag='0.45237465965697228105863593288667409106')
# i, n = mpmath.power(11, -mpmath.zetazero(186625)), mpmath.mpc(real='-0.34086188343195801930749984001678692145', imag='-0.49580478190129375231077578974002057301')
# i, n = mpmath.power(13, -mpmath.zetazero(186625)), mpmath.mpc(real='-0.11392220918585925962451534350306991328', imag='-0.45589084469523189980565696415467265306')
# i, n = mpmath.power(14, -mpmath.zetazero(186625)), mpmath.mpc(real='-0.0080277508869924621260694905449843164534', imag='-0.41644668215303002973447214974521517059')
# i, n = mpmath.power(16, -mpmath.zetazero(186625)), mpmath.mpc(real='-0.91543758990161378125831056475894658615', imag='0.7047886039368244611508923622266407495')

# zetazero(186626) (missing 4, 5, 12, 13, 14) 
# i, n = mpmath.power(2, -mpmath.zetazero(186626)), mpmath.mpc(real='-0.6637310113705043462324742428154447979', imag='0.077127796849359565013982969599634853229')
# i, n = mpmath.power(3, -mpmath.zetazero(186626)), mpmath.mpc(real='-0.14453341689725547696298147986833577893', imag='0.12901167474062346860055301616189276542')
# i, n = mpmath.power(6, -mpmath.zetazero(186626)), mpmath.mpc(real='-0.45176409759859496953366816896631108164', imag='-0.35450199926167995764542747492988108434')
# i, n = mpmath.power(7, -mpmath.zetazero(186626)), mpmath.mpc(real='-0.85243562720054588921060461537020088977', imag='-0.42854092791807218447142968796820561829')
# i, n = mpmath.power(8, -mpmath.zetazero(186626)), mpmath.mpc(real='-0.14914952580314376979353648719151214106', imag='0.33883270402696125904242496197219588818')
# i, n = mpmath.power(9, -mpmath.zetazero(186626)), mpmath.mpc(real='-0.76488021200861940029644152309339012444', imag='0.50446198189327320323600419127434597679')
# i, n = mpmath.power(10, -mpmath.zetazero(186626)), mpmath.mpc(real='-0.87841701120539608539779778571169888947', imag='0.54379233222469805333053417864821166601')
# i, n = mpmath.power(11, -mpmath.zetazero(186626)), mpmath.mpc(real='0.10876262140686489847542667078469372649', imag='-0.22990383090385754171575540091592722829')
# i, n = mpmath.power(15, -mpmath.zetazero(186626)), mpmath.mpc(real='-0.13462510055981249958965869644447688091', imag='0.50941200596618026018492901102300168525')
# i, n = mpmath.power(16, -mpmath.zetazero(186626)), mpmath.mpc(real='-0.26180059670683533801773752336412363665', imag='-0.58206040239787988251309653446015015185')


eval_n(i, 1, 1, n)


# 2 ilarge = mpmath.mpc(real='-0.69508716558790606183645575548227448692', imag='1.1579587249165966683919694927993958875')
# 2 ismall = -mpmath.mpc(real='0.29351994060161923534420901956840038766', imag='0.19804413784469283637682515314906828309')
# 3 ilarge = mpmath.mpc(real='-1.5368405002548258842025251826236136949', imag='0.80256332466814190013276737588619876267')
# 3 ismall += mpmath.mpc(real='0.17710146907374078500465524037466681376', imag='0.27033451160646075470383929601409159974')
# 4 ilarge = mpmath.mpc(real='-1.8360474538029500844786901190734965482', imag='-0.78605113837791997444700573801829776723')
# 4 ismall -= mpmath.mpc(real='0.15855992616932530891784992202324803174', imag='-0.303001474967105223098941262280496327')
# 5 ilarge = mpmath.mpc(real='-0.97410042786607316336589575139382732127', imag='1.8440524817009818959836301612099545889')
# 5 ismall += mpmath.mpc(real='0.32978712819773841630135431757618923802', imag='0.29717622440925112811683387207332066938')
# 6 ilarge = mpmath.mpc(real='-1.2247520805420300460726080308794256667', imag='-1.9476945018559586193390416618061170568')
# 6 ismall -= mpmath.mpc(real='0.31592617256020696638265675549034196449', imag='-0.32695612384043936545599621212649363552')
# 7 ilarge = mpmath.mpc(real='1.2101440746036974567781792425982874185429', imag='-1.7782580588834811921210981847605353187188')
# 7 ismall += mpmath.mpc(real='0.5674497568287929202702921819964679858918', imag='-0.18137460323795808361948726976717537295131')
# 8 ilarge = mpmath.mpc(real='1.5505569486004045967289966510332713004679', imag='-1.6728407537401852122186413582488555468312')
# 8 ismall -= mpmath.mpc(real='0.59982552421405613252283206544078912900992', imag='-0.16450930017234156714978863404557025278711')

# zetazero(1)
# 2 ilarge = mpmath.mpc(real='-0.76950855872651304378208822715278989704', imag='0.13235461418409462683371316148471955723')
# 2 ismall = mpmath.mpc(real='0.11093784718895970701120835799968561197', imag='0.12510337832132500694550509030192570591')
# 3 ilarge = mpmath.mpc(real='-0.65246517996094137331591836720441336784', imag='0.0016832809551047599561600559486954524917')
# 3 ismall = mpmath.mpc(real='0.084378837974204525196446429809621033276', imag='-0.10469416087301246153495198988290474925')
# 5 ilarge = mpmath.mpc(real='-0.46194750573380188572857012145570493847', imag='0.25267187190190008487910570794363512592')
# 5 ismall = mpmath.mpc(real='0.13711825108913158600374727660058204985', imag='0.054713806565701815386734666648553156975')
# 7 ilarge = mpmath.mpc(real='-0.39876284592945774977055634465026725185', imag='-0.22597967383926188730009955741916972368')
*# 7 ismall = mpmath.mpc(real='0.12726786475693445856266706431740548895', imag='-0.036979672933721409096034136023237267841')
# 8 ilarge = mpmath.mpc(real='-0.30979705679423950208998877701407994874', imag='0.31661099730661020101184740804460486829')
# 8 ismall = mpmath.mpc(real='0.15512413293601675946379837268019910186', imag='0.0013139728123605263820414042698262710068')

# zetazero(2)
# hshlarge[2] = mpmath.mpc(real='-0.51558280984642070408414044567277588901', imag='-0.5533551864724913294070911727670753746')
# hshsmall[2] = mpmath.mpc(real='0.21811339398959646981360421619985168621', imag='-0.088136782791193036175172304547755538713')
# hshlarge[3] = mpmath.mpc(real='-0.45768790645950471194611703529900031219', imag='0.45436950378379314652903699568551058891')
# hshsmall[3] = mpmath.mpc(real='0.19782435414855805229772367114762105805', imag='0.061192585118861935339905790076306318447')
# hshlarge[4] = mpmath.mpc(real='-0.47994559976493539182156041350433873853', imag='0.32154109561687676258075724223198292503')
# hshsmall[4] = mpmath.mpc(real='0.15692170650533585819497340604138632482', imag='0.060107387130547306078156298032548162221')

# zetazero(10)
hshlarge[ 2] = mpmath.mpc(real='-0.77814730429045184837977080976387159113', imag='0.088257527948157315588138800476570804322')
hshsmall[ 2] = mpmath.mpc(real='0.072185990099882906102170511848754185898', imag='-0.12848964032527221855045544491501911407')
hshlarge[ 3] = mpmath.mpc(real='-0.39035886857514960622234438650103901591', imag='0.50565543583764217341712056281108712261')
hshsmall[ 3] = mpmath.mpc(real='0.22209834615726000186352919208079216022', imag='0.046632288024650644089142625434645510533')
hshlarge[ 5] = mpmath.mpc(real='-0.239054657645840484296880147609830138', imag='0.46989670712528484453230247111905127216')
hshsmall[ 5] = mpmath.mpc(real='0.23783840371036686065078666464727132614', imag='-0.022684765506588301789783412144467660782')
hshlarge[ 6] = mpmath.mpc(real='-0.14628199306573874285246053875298929634', imag='-0.4744184151583908735894074915089018048')
hshsmall[ 6] = mpmath.mpc(real='0.28728711436919254343911834366695736647', imag='0.091294124055797189670793878908167146742')
hshlarge[ 7] = mpmath.mpc(real='-0.43099336944111216133983337324189953095', imag='-0.14149294553881715003303056964555560918')
hshsmall[ 7] = mpmath.mpc(real='0.10564340393710217124707558693871253519', imag='-0.050872703171347229502757030352423605322')
hshlarge[ 9] = mpmath.mpc(real='-0.38053371909978146392348151855377926331', imag='-0.14879012903194408426892280547211010451')
hshsmall[ 9] = mpmath.mpc(real='0.10382359257513039081056250774150901348', imag='-0.037066312852169003746074605281713964222')
hshlarge[10] = mpmath.mpc(real='-0.17450572553879958569031069486094068455', imag='-0.39537486607635578703366412452383264413')
hshsmall[10] = mpmath.mpc(real='0.19335663485706714504662627528018668929', imag='0.079709468514515865148140422865915436107')
hshlarge[12] = mpmath.mpc(real='-0.25228486215017379801300154785914274098', imag='0.28587296118148169628615740806962458854')
hshsmall[12] = mpmath.mpc(real='0.13732680187314493094645948460827625714', imag='-0.021074967022393831392165313874986148885')

# zetazero(11)
hshlarge[3] = mpmath.mpc(real='-0.29864801053384403023802145923848741889', imag='-0.55045217208521882317361672186690334055')
hshsmall[3] = mpmath.mpc(real='0.25574312076766668012499621634657797727', imag='-0.025301684842796469669915920278959766652')
hshlarge[4] = mpmath.mpc(real='-0.38766013309000127083365139390466918838', imag='0.42580477181020934625564752419075738816')
hshsmall[4] = mpmath.mpc(real='0.195270166116789414456886950677792608', imag='0.03569940001063828315919330402666811033')
hshlarge[5] = mpmath.mpc(real='-0.50994029135552225438469334213440726347', imag='0.11482197611789510427615972918830427125')
hshsmall[5] = mpmath.mpc(real='0.10333448044246765969191578317584082462', imag='0.071381446331149298533293983202565350213')
hshlarge[7] = mpmath.mpc(real='-0.42389499422993309384903938078260208616', imag='-0.16494363721440064764801056653870337416')
hshsmall[7] = mpmath.mpc(real='0.11132378687829146378816365835887255666', imag='-0.047556676178026871708290647114494181257')

# zetazero(12) (missing 6, 13, 16)
hshlarge[2] = mpmath.mpc(real='-0.21050667958900968175144750619353409196', imag='-0.66170972901577973059923728716819680924')
hshsmall[2] = mpmath.mpc(real='0.31222394644300596745278847923476562155', imag='-0.038042796970195477269539349867424285351')
hshlarge[3] = mpmath.mpc(real='-0.022741007161970685389507056240882225311', imag='0.46703696392112631793017246753584148904')
hshsmall[3] = mpmath.mpc(real='0.41691206059598857477611936242064458385', imag='-0.045180929274174814605582633990274311681')
hshlarge[4] = mpmath.mpc(real='-0.57216649825599958528651383973130941259', imag='-0.055115702100806174443446543688484957433')
hshsmall[4] = mpmath.mpc(real='0.092859303008493768167914336960817311408', imag='-0.087238126734140646737248563049593525557')
hshlarge[5] = mpmath.mpc(real='-0.51917505875084686308370865765599285993', imag='-0.037662889499452066687116751025553426996')
hshsmall[5] = mpmath.mpc(real='0.086929830336234709114036769693160019199', imag='-0.077071858998114117587505935432306043012')
hshlarge[7] = mpmath.mpc(real='-0.44553683525795107734578177978741290541', imag='0.022137746862516085756865250785863103072')
hshsmall[7] = mpmath.mpc(real='0.070130714271442425198181941186888644551', imag='-0.066039764845812540045806686376013071392')
hshlarge[8] = mpmath.mpc(real='-0.30543192400515347567437954719922685393', imag='0.32161951630445033904685479189818969509')
hshsmall[8] = mpmath.mpc(real='0.15706565481009323384831438626561801678', imag='-0.00070293810204752908506694243856911245713')
hshlarge[9] = mpmath.mpc(real='-0.21021331432776636711124405459634523687', imag='0.38531940888745679265336878422883044312')
hshsmall[9] = mpmath.mpc(real='0.18762161972499980607608776519677251842', imag='-0.052752533738883946477644660887283340218')
hshlarge[10] = mpmath.mpc(real='-0.27215022407164533489913314123186962548', imag='0.30501711052405942953400206429970540076')
hshsmall[10] = mpmath.mpc(real='0.14789749074709214126831841681816564896', imag='-0.014222925125902837937917176937638194396')
hshlarge[11] = mpmath.mpc(real='-0.36557368685382757554450607747277654385', imag='0.033981855794418928922916121199912432469')
hshsmall[11] = mpmath.mpc(real='0.074485440195549611064863098237222085226', imag='0.044610278458955540281097576159604381971')
hshlarge[12] = mpmath.mpc(real='-0.26214181160111645640355127127266289824', imag='-0.27362571892918493315127894412105908516')
hshsmall[12] = mpmath.mpc(real='0.13326561128102412575012353758188008331', imag='0.015315327492083110189186677828826104552')
hshlarge[14] = mpmath.mpc(real='-0.20774439259642742037518364733227580078', imag='0.30300267092753092288373543701509282463')
hshsmall[14] = mpmath.mpc(real='0.13883856002972570142218480432122637752', imag='-0.044776882775260783724515542332668509464')
hshlarge[15] = mpmath.mpc(real='-0.24159044973239351293479492987360228521', imag='-0.24759504068732614666141995405338385038')
hshsmall[15] = mpmath.mpc(real='0.11961343874377670505870178434926086346', imag='0.020024665952499291236925240050340452481')

# zetazero(13) (missing 6, 14)
hshlarge[2] = mpmath.mpc(real='-0.77759349858811862245788639282972899753', imag='0.079387087113936820503365983354406754366')
hshsmall[2] = mpmath.mpc(real='0.10114162603287042283459118190924905758', imag='0.12655675017307268706861709790378622887')
hshlarge[3] = mpmath.mpc(real='-0.56710276751815888230630867880036315734', imag='-0.31996193626644627382866579851968311455')
hshsmall[3] = mpmath.mpc(real='0.15424956433326578589749853148046828447', imag='-0.08362890351229140778009014997259013196')
hshlarge[4] = mpmath.mpc(real='-0.062080338135703513126302737221166302387', imag='-0.34791623355775009116395489685353151438')
hshsmall[4] = mpmath.mpc(real='0.47725460990270701798213482453416167246', imag='0.069294044809728236051972871365065874683')
hshlarge[5] = mpmath.mpc(real='-0.15758117242313553517396149516624266741', imag='-0.4915421435364662812698023863557435438')
hshsmall[5] = mpmath.mpc(real='0.29110546523866830572651557829322716912', imag='0.0647268869814646490821012244490761941')
hshlarge[7] = mpmath.mpc(real='-0.40118316624831291045515554699769114458', imag='-0.22103138321203656104545432287881982005')
hshsmall[7] = mpmath.mpc(real='0.12589984788598304713729152419369673408', imag='-0.037959422587256242811904692176598367555')
hshlarge[8] = mpmath.mpc(real='-0.35671219694984876877242697686313117315', imag='0.25183807116354982755662537794738007209')
hshsmall[8] = mpmath.mpc(real='0.1332473060803707973464144131869655461', imag='0.022139012821027796387091254500354064661')
hshlarge[9] = mpmath.mpc(real='-0.19053346133308026019186550181231969625', imag='0.40038346927751374709540138565042140082')
hshsmall[9] = mpmath.mpc(real='0.19809566275980017318676334963794334605', imag='-0.067135927320048100699617622106923364683')
hshlarge[10] = mpmath.mpc(real='-0.18828752654279259244041107313075625037', imag='0.38431838117708310550560932675840045077')
hshsmall[10] = mpmath.mpc(real='0.18586474038368665021304965079315339419', imag='-0.06809989641183848417854697746197978631')
hshlarge[11] = mpmath.mpc(real='-0.30293612462759929028953803286578660279', imag='0.23834956350748359977337878398937495848')
hshsmall[11] = mpmath.mpc(real='0.12421517980308644011697836889528515498', imag='0.0044835371812905872932462312121386000441')
hshlarge[12] = mpmath.mpc(real='-0.35137118761966814552603681503338971508', imag='-0.0081307093302672912730267832334270651251')
hshsmall[12] = mpmath.mpc(real='0.067515796502901324772433348506571974161', imag='-0.044399760563696813624313546620431118743')
hshlarge[13] = mpmath.mpc(real='-0.1365759253905970481941900521122602734', imag='-0.38458467322556546137360024223721285309')
hshsmall[13] = mpmath.mpc(real='0.17667323152315053214508361834007563293', imag='0.11014837284970554105075695489962838619')
hshlarge[15] = mpmath.mpc(real='-0.31023018365169914066239136325429966185', imag='0.098149351406814132051785898804303202733')
hshsmall[15] = mpmath.mpc(real='0.082845523836398346497952769799608727306', imag='0.024173512961817290521192923025176111781')
hshlarge[16] = mpmath.mpc(real='-0.075723846577045367950836762324307443684', imag='-0.41386384402963635575511271391027636045')
hshsmall[16] = mpmath.mpc(real='0.17046319845156873505928570304089312275', imag='0.18251031540645921237807130170091119393')

# zetazero(14) (missing 8, 12)
hshlarge[2] = mpmath.mpc(real='-0.41960107527863787928492961661752414383', imag='0.6125723445747973224767394607232389773')
hshsmall[2] = mpmath.mpc(real='0.24731618762562107779759654872687841213', imag='0.073224941426239122910181160372953660019')
hshlarge[3] = mpmath.mpc(real='-0.54282451957459292298208131605779282027', imag='0.35773708111851817669519493720188829951')
hshsmall[3] = mpmath.mpc(real='0.16486954150609346794576214622335154623', imag='0.078706922032600202016124406481720357489')
hshlarge[4] = mpmath.mpc(real='-0.5549031068948059791516548199820670091', imag='-0.15589794881706881390387763014508554353')
hshsmall[4] = mpmath.mpc(real='0.11426727192203310721701008424622417584', imag='-0.080407067925799605948594299113963790292')
hshlarge[5] = mpmath.mpc(real='-0.50100418780179139355640563610329753605', imag='0.1527467568716539657178073291484944565')
hshsmall[5] = mpmath.mpc(real='0.1119293234732639204138795694397754252', imag='0.067754376793771754754328172118060495636')
hshlarge[6] = mpmath.mpc(real='-0.38627866163346022756545605692149535499', imag='-0.30396192278660869888408372492274836558')
hshsmall[6] = mpmath.mpc(real='0.15208247971542530296179838893859703253', imag='-0.030431281453072819931759470961747437144')
hshlarge[7] = mpmath.mpc(real='-0.12461558862954021682616346573989374151', imag='0.4691919796621388482976428548560603095')
hshsmall[7] = mpmath.mpc(real='0.32648893027558619460705867154345838452', imag='-0.14965434996916879703524195125112210888')
hshlarge[9] = mpmath.mpc(real='-0.22704788492362259361365453808525814104', imag='-0.37162080978298011059707376085153665364')
hshsmall[9] = mpmath.mpc(real='0.17941448248380906837476155957548829256', imag='0.041708442504762002855166668153955419124')
hshlarge[10] = mpmath.mpc(real='-0.24412962228055903459249325914184259185', imag='-0.33488540785498095293379156814787423854')
hshsmall[10] = mpmath.mpc(real='0.15994226254211141610499850511207700836', imag='0.03006990880634463353894657791719558581')
hshlarge[11] = mpmath.mpc(real='-0.13796938091624126313605736533849885982', imag='-0.41102219723945816723342718289629612929')
hshsmall[11] = mpmath.mpc(real='0.20253882254246364310973035121895358169', imag='0.11650585114442599938128326492795715707')
hshlarge[13] = mpmath.mpc(real='-0.084448649037012365371200014991583257256', imag='0.457642007902084956702858069598454885')
hshsmall[13] = mpmath.mpc(real='0.22264210157245355644229972159031594365', imag='-0.2171723703188514144659835837457256555')
hshlarge[14] = mpmath.mpc(real='-0.32732462385538246135120643492700528734', imag='0.048865884975645985159196360918018588071')
hshsmall[14] = mpmath.mpc(real='0.073406858651111294467881577991791025374', imag='0.034526800208607718854775053253136704604')
hshlarge[15] = mpmath.mpc(real='-0.11432711134051512139205893892797183513', imag='-0.38115473302378779972567410727300862925')
hshsmall[15] = mpmath.mpc(real='0.16514349567850988548532699888806041351', imag='0.12800584057217175452456907788701703258')
hshlarge[16] = mpmath.mpc(real='-0.048826917313851022988989059272064655873', imag='0.46767796917436826948651370700258461529')
hshsmall[16] = mpmath.mpc(real='0.18714679543815980355420899633340567044', imag='-0.25942905245287277622840811665308629332')

# mpmath.zetazero(15) (missing 15)
hshlarge[2] = mpmath.mpc(real='-0.073118581407404100010585661310463979731', imag='-0.63161292355518680933729849147672741438')
hshsmall[2] = mpmath.mpc(real='0.36178262357715947165168374101413418364', imag='-0.013889261381640257722845700236093780988')
hshlarge[3] = mpmath.mpc(real='-0.58069044667818680056157054668634348327', imag='-0.29567888132736376463940756111218858781')
hshsmall[3] = mpmath.mpc(real='0.14785183104268088050450274437287628321', imag='-0.086399731196383896917149350912608969272')
hshlarge[4] = mpmath.mpc(real='-0.48702122262963805056386664699630818106', imag='-0.31073175659734284520768056337435808677')
hshsmall[4] = mpmath.mpc(real='0.15367508111320266553802659942112124654', imag='-0.06193478326920411305567579866925341163')
hshlarge[5] = mpmath.mpc(real='-0.37232390467657124526615113077402736938', imag='0.37632560758517177884861869719229131248')
hshsmall[5] = mpmath.mpc(real='0.17830212929156315002629887946466436653', imag='0.02660807266065908187233863931454619702')
hshlarge[6] = mpmath.mpc(real='-0.47102504842475541024760477208385621538', imag='0.10633947308665957994060336083445426538')
hshsmall[6] = mpmath.mpc(real='0.099447524826538739234496870885054533499', imag='0.062766442313374252359299765811812834537')
hshlarge[7] = mpmath.mpc(real='-0.12547454298157685245873806053315721251', imag='-0.46899837444182958245932726155795879217')
hshsmall[7] = mpmath.mpc(real='0.31698571135719421279626192470323993961', imag='0.14314470291955135879254208723425239666')
hshlarge[8] = mpmath.mpc(real='-0.42047262422349489050656865775723996984', imag='0.05268502952032373497426597713288958042')
hshsmall[8] = mpmath.mpc(real='0.083690513834966113062751967577545466022', imag='0.054915203389502333499099077881328293751')
hshlarge[9] = mpmath.mpc(real='-0.16960491177172251196411793703292837048', imag='0.41571828575296772363345004709153984557')
hshsmall[9] = mpmath.mpc(real='0.21097011280891163848572794661257529689', imag='-0.084961530335540098386128038686444610793')
hshlarge[10] = mpmath.mpc(real='-0.12196226952013293597264056083812850985', imag='0.494160618840379838078068507330142054')
hshsmall[10] = mpmath.mpc(real='0.32604973055186480978546560585244237874', imag='-0.25260667403793757442242768629851791686')
hshlarge[11] = mpmath.mpc(real='-0.10323589921043933291956931723085980952', imag='0.48316404214219686834958124954833138993')
hshsmall[11] = mpmath.mpc(real='0.27945986676517604984152559219082108274', imag='-0.23851285336855119655426932166971738048')
hshlarge[12] = mpmath.mpc(real='-0.16976866879494024215646145358042826645', imag='0.36832934090701252351028827699950806559')
hshsmall[12] = mpmath.mpc(real='0.17166583673011542446835110572064241829', imag='-0.079660440456757791764247767006580878656')
hshlarge[13] = mpmath.mpc(real='-0.33000950922247641765100137261086006383', imag='0.10627939362426156798127680879136129292')
hshsmall[13] = mpmath.mpc(real='0.087409703193855651400461327783079260443', imag='0.028139396126102210527222490454128947125')
hshlarge[14] = mpmath.mpc(real='-0.26974748273965065981990441950826439654', imag='-0.22328393745248332924054655239606640649')
hshsmall[14] = mpmath.mpc(real='0.11469061378629125344578251964575093651', imag='0.0056008218487412084136539632298896401654')
hshlarge[16] = mpmath.mpc(real='-0.16657827589491900882539811416707085677', imag='0.31910004213072863186436167694862220984')
hshsmall[16] = mpmath.mpc(real='0.13881757602270974205566098855042605435', imag='-0.070646135857140088795150370696254184407')

# zetazero(16) (missing 6, 15)
hshlarge[2] = mpmath.mpc(real='-0.71703718088073823678376705998081401395', imag='-0.29796579597241172850681229835710559877')
hshsmall[2] = mpmath.mpc(real='0.14472224083193738304222187843306989493', imag='-0.11731195372884241350571663780652647879')
hshlarge[3] = mpmath.mpc(real='-0.32299131926187146755723298087792282193', imag='0.54111669084464406531412003747548683169')
hshsmall[3] = mpmath.mpc(real='0.24658832369277215485894542242023541945', imag='0.0311558977015849459432842497324990543')
hshlarge[4] = mpmath.mpc(real='-0.15311097133059175902152511668889392226', imag='0.51908666410243722535306923291378765547')
hshsmall[4] = mpmath.mpc(real='0.30819975253671678975045298767984642141', imag='-0.043747343254688843481187455026382424971')
hshlarge[5] = mpmath.mpc(real='-0.13328330110405183748906923639841163416', imag='-0.48945293945670654632124086034069763435')
hshsmall[5] = mpmath.mpc(real='0.31733495674330515085704865935484842052', imag='0.081868607009481933903945003891896464088')
hshlarge[7] = mpmath.mpc(real='-0.17927865100389938760955067166323923059', imag='0.44537709440922625339243603182419935708')
hshsmall[7] = mpmath.mpc(real='0.2376994150246276455868370806147739808', imag='-0.071954870661928053294247782068040740996')
hshlarge[8] = mpmath.mpc(real='-0.14350557596192325281459084774366343975', imag='-0.44911164834538147314836703880287102294')
hshsmall[8] = mpmath.mpc(real='0.25214379294987360063992519953703157121', imag='0.11266293336837488619383251780815469465')
hshlarge[9] = mpmath.mpc(real='-0.39982857607216662538920189139896391384', imag='-0.03558181836096313930225257965628225562')
hshsmall[9] = mpmath.mpc(real='0.078170078202696910473979416842576739159', imag='-0.051864861733065919165113905539250394993')
hshlarge[10] = mpmath.mpc(real='-0.36983262764107499376905973786874238133', imag='0.11996832947193871903205690151982906953')
hshsmall[10] = mpmath.mpc(real='0.095236410985841894466243030250001452515', imag='0.03686571593476589370763724922056435146')
hshlarge[11] = mpmath.mpc(real='-0.34463281031351355488728899831279410059', imag='0.15038288320246443228976125721391737997')
hshsmall[11] = mpmath.mpc(real='0.10084982956639639004899199786431426555', imag='0.027040196488824916115644185855646086897')
hshlarge[12] = mpmath.mpc(real='-0.35136661406002948206370802831863467055', imag='0.0080252795528087569463281282635759183933')
hshsmall[12] = mpmath.mpc(real='0.067493703017373450874864325556399394374', imag='0.044410430697950971281492662008838113312')
hshlarge[13] = mpmath.mpc(real='-0.3091424672670290753596053464396080821', imag='-0.17082506157739515252784784699457731836')
hshsmall[13] = mpmath.mpc(real='0.10270500760047951497106989442606624901', imag='-0.01439548849602042295471143396886781538')
hshlarge[14] = mpmath.mpc(real='-0.079890333906794883070318517616580653832', imag='-0.4424260601342221456147211036089085929')
hshsmall[14] = mpmath.mpc(real='0.20152919861488287068014784305066119466', imag='0.20445009911904125467591303420444906518')
hshlarge[16] = mpmath.mpc(real='-0.29128921392258870923836427163329013516', imag='0.13309347202021662276951896977222564033')
hshsmall[16] = mpmath.mpc(real='0.089394274034591350320687188014941393812', imag='0.014346119839032407741765996024370420281')

# zetazero(17) (missing 8, 15)
hshlarge[2] = mpmath.mpc(real='-0.54188820237113267855280897908780565637', imag='0.53221478891074363263878857160955204661')
hshsmall[2] = mpmath.mpc(real='0.20985819831943236731942333421518181368', imag='0.092089685211801700018130012367451835765')
hshlarge[3] = mpmath.mpc(real='-0.066477756203070243050835154582756102204', imag='-0.52470368557360414590909208030520202759')
hshsmall[3] = mpmath.mpc(real='0.37535074256699875682613415270108296651', imag='0.03692216518977311888194512760526279411')
hshlarge[4] = mpmath.mpc(real='-0.4496381719582224842900747361898907233', imag='-0.36231999937500278648478385825281477988')
hshsmall[4] = mpmath.mpc(real='0.17012601913936673447790970295554810302', imag='-0.05225563476980393133279365407813447746')
hshlarge[5] = mpmath.mpc(real='-0.13688287085969780856828185866824419072', imag='0.49026117022134699000532831721596223923')
hshsmall[5] = mpmath.mpc(real='0.31271370405940571728894912763888833747', imag='-0.079063507173152496662952169557746504649')
hshlarge[6] = mpmath.mpc(real='-0.12521675128497783849668550598457718982', imag='0.47373199233740858637459649924078789794')
hshsmall[6] = mpmath.mpc(real='0.32718583794102513519795538841360125232', imag='-0.11894310482542812628891738767796706408')
hshlarge[7] = mpmath.mpc(real='-0.44737198548502049894509281258492064036', imag='0.028155306416222438921440221954963413252')
hshsmall[7] = mpmath.mpc(real='0.080472378114363645473758507220142197698', imag='0.062629168954849129905709165823731112797')
hshlarge[9] = mpmath.mpc(real='-0.29264864657466539996397888119768074728', imag='-0.30674093524394479064081085958595468896')
hshsmall[9] = mpmath.mpc(real='0.15012035665207520585680841250820739881', imag='0.0054158654557620722454810169765510437245')
hshlarge[10] = mpmath.mpc(real='-0.37852163489859447896294016360440481054', imag='0.02664809290466554710620936406888956467')
hshsmall[10] = mpmath.mpc(real='0.063427981849158966208937803515194979321', imag='-0.053406078777334633228191422574275298364')
hshlarge[11] = mpmath.mpc(real='-0.36559970863023838588617560739024159462', imag='0.032957781491371239094784687279907500672')
hshsmall[11] = mpmath.mpc(real='0.074266960705465991937765080523741186182', imag='0.044723109953642028583588567596658574298')
hshlarge[12] = mpmath.mpc(real='-0.34602681336737025377819432830953812575', imag='-0.040379500709970606025576504969828956717')
hshsmall[12] = mpmath.mpc(real='0.057470726863954806515440615906955170507', imag='0.048669149385683883305778151174004765078')
hshlarge[13] = mpmath.mpc(real='-0.31402122800468100961748972547152618104', imag='-0.15871889733764200747937247955026463015')
hshsmall[13] = mpmath.mpc(real='0.099725176230745622348362592036062702904', imag='-0.017350063916690742207844416867562331149')
hshlarge[14] = mpmath.mpc(real='-0.11228163483947133863492073322181199702', imag='-0.39599026631545058151578324116955737983')
hshsmall[14] = mpmath.mpc(real='0.17742615880628978274068513652373595377', imag='0.13679003015485591702412812150499398631')
hshlarge[16] = mpmath.mpc(real='-0.21643806491514958055924840054191714683', imag='0.26550075555036596916108945851664362841')
hshsmall[16] = mpmath.mpc(real='0.12269215206201232113058525541673368094', imag='-0.033742899538251475015594764595563913386')

# zetazero(18) (missing 2, 15)
hshlarge[3] = mpmath.mpc(real='-0.60196490895482976693057670971467243686', imag='0.25121943046767999908722027106158073918')
hshsmall[3] = mpmath.mpc(real='0.13683096265827741504567605010312223965', imag='0.090809435764293593948593151792436300076')
hshlarge[4] = mpmath.mpc(real='-0.063264473176875723558739438654664539755', imag='0.36563598386336696712579530250191667338')
hshsmall[4] = mpmath.mpc(real='0.46884237387677287670034980173880874997', imag='-0.073220925318386482504454805306405283639')
hshlarge[5] = mpmath.mpc(real='-0.51932779700855911190875285451477923407', imag='-0.033913708351004255952624650517002084937')
hshsmall[5] = mpmath.mpc(real='0.0861625671912002555492142996172807285', imag='-0.077297278863725053596172783581464857607')
hshlarge[6] = mpmath.mpc(real='-0.47713938115720100206800750029766829005', imag='0.062351433964428993687995300056242725715')
hshsmall[6] = mpmath.mpc(real='0.089836248439179590144800076792927510276', imag='0.066733615725584910684276244889799046603')
hshlarge[7] = mpmath.mpc(real='-0.32302377313077389961987990365846333091', imag='-0.33636884546965364458583980406920721963')
hshsmall[7] = mpmath.mpc(real='0.16362892868602202375901939171776962317', imag='-0.0063415664258360570679168598833804881876')
hshlarge[8] = mpmath.mpc(real='-0.12545905386000587269936144528345318555', imag='0.47253916809395944708379088219765813007')
hshsmall[8] = mpmath.mpc(real='0.33483453031927621604534712784279445332', imag='-0.18764987405598839176198124492410978759')
hshlarge[9] = mpmath.mpc(real='-0.13840337931161984221949909503960992993', imag='-0.4392867800514242423230788119937157439')
hshsmall[9] = mpmath.mpc(real='0.23776922197309460357326988301570116583', imag='0.12110830745579725554275107917090109368')
hshlarge[10] = mpmath.mpc(real='-0.36597789640088540020262468741628020594', imag='-0.13449466532022260752345569196905856053')
hshsmall[10] = mpmath.mpc(real='0.098666809313541685866847666984833874104', imag='-0.034457347749117719141178123378763890751')
hshlarge[11] = mpmath.mpc(real='-0.35946576482856107652501868211127811439', imag='-0.045054358084304133401519501118960876637')
hshsmall[11] = mpmath.mpc(real='0.058026726334903334597964088912828359768', imag='0.051657159089183440812125364397379169352')
hshlarge[12] = mpmath.mpc(real='-0.34489837913573893213441751462838095148', imag='-0.046406783429145787025613703021277059654')
hshsmall[12] = mpmath.mpc(real='0.056235938709228670238774402648297763497', imag='0.049113962836711414869553221703004396114')
hshlarge[13] = mpmath.mpc(real='-0.33005059134433197482176705474363463435', imag='-0.10609903365640186151036385615712750795')
hshsmall[13] = mpmath.mpc(real='0.087368756043872900092080718053491783024', imag='-0.028171602516507436249814243241151823339')
hshlarge[14] = mpmath.mpc(real='-0.18126068472144736458101322037575811721', imag='-0.3297050241696543896657711677427398584')
hshsmall[14] = mpmath.mpc(real='0.14846901469916572404750578415527743078', imag='0.064463101001914512557564871920388395718')
hshlarge[16] = mpmath.mpc(real='-0.086700043639748621917382557245158770121', imag='0.39940314382289066017782379213777355067')
hshsmall[16] = mpmath.mpc(real='0.1656869107120198932457055419082392763', imag='-0.16220897266746924516767431158502581402')

# zetazero(19) (missing 8, 11, 12, 13)
hshlarge[2] = mpmath.mpc(real='-0.60901075617197419271942424142657986842', imag='-0.46597902510820792293280477688762849478')
hshsmall[2] = mpmath.mpc(real='0.18774337047116931403940031611705702208', imag='-0.1019415589040369592100572287747938031')
hshlarge[3] = mpmath.mpc(real='-0.23416512294229084653565810517155505023', imag='-0.56636051191494370455737476962569685951')
hshsmall[3] = mpmath.mpc(real='0.2815133887380488248482086619967943354', imag='-0.0090449755975300487311991298222411183943')
hshlarge[4] = mpmath.mpc(real='-0.35379695974888949930658946486488953143', imag='0.45231588668771223081643074651811186137')
hshsmall[4] = mpmath.mpc(real='0.20872938025927090483594814383864765671', imag='0.026176952737313220100661820445088196862')
hshlarge[5] = mpmath.mpc(real='-0.47657763757918753175234242479200991855', imag='-0.22187726821769236480795355702161099254')
hshsmall[5] = mpmath.mpc(real='0.12886864237467546003404640101455781697', imag='-0.059367206668248463185364446331757506248')
hshlarge[6] = mpmath.mpc(real='-0.45829208192074808033790120325753120347', imag='0.15863089517090089407528514358126562385')
hshsmall[6] = mpmath.mpc(real='0.11156118125956770342331551487764334869', imag='0.056878615508682182021465716309963040834')
hshlarge[7] = mpmath.mpc(real='-0.44500801681062339513650779237500999504', imag='-0.066853207377739498096442397054728200912')
hshsmall[7] = mpmath.mpc(real='0.088721704236306114402385904651673297631', imag='-0.059310203836997166028971464483719202431')
hshlarge[9] = mpmath.mpc(real='-0.39941348337493265003204922015775744181', imag='0.00057913088358434005035513025875463837437')
hshsmall[9] = mpmath.mpc(real='0.070563866589330806497204993282415426615', imag='-0.055068034809740951108606505619659997447')
hshlarge[10] = mpmath.mpc(real='-0.19546129892227128535337645876125311808', imag='0.37846051701463890857991274874547875135')
hshsmall[10] = mpmath.mpc(real='0.18221523188928913233560841738474850054', imag='-0.062510296713785591732967296402638038392')
hshlarge[14] = mpmath.mpc(real='-0.10379824907634110131578447396629808846', imag='0.40562640788317192372344699627682768203')
hshsmall[14] = mpmath.mpc(real='0.18223925435745329459257361198053289159', imag='-0.15013554675686870429110722921394584759')
hshlarge[15] = mpmath.mpc(real='-0.28086319028979803206585138268017380913', imag='0.1827214693542954399202838513628790733')
hshsmall[15] = mpmath.mpc(real='0.10257015818334439501225309812735639551', imag='0.0040357563933413212838580333622425260616')
hshlarge[16] = mpmath.mpc(real='-0.29477689884007476060534446193561001517', imag='-0.12193165350433840320874756138022008819')
hshsmall[16] = mpmath.mpc(real='0.08686610407802837961775209011297747207', imag='-0.016895942532667968154198798917942102955')

# zetazero(20) (missing 4, 6, 7, 9, 16)
hshlarge[2] = mpmath.mpc(real='-0.7787906530633713097528027725093478889', imag='-0.082094789172236645018139945299881312894')
hshsmall[2] = mpmath.mpc(real='0.073207264424022614696860308153424332603', imag='0.12848532351076112433037372956717311652')
hshlarge[3] = mpmath.mpc(real='-0.6487207008668802364650290778337232759', imag='0.065182367172868848080283788141321242959')
hshsmall[3] = mpmath.mpc(real='0.072814089781717696542866880455557260266', imag='-0.10598565921820108282468129719123995627')
hshlarge[5] = mpmath.mpc(real='-0.21880942130367225591284076607072318272', imag='0.47801700378431153933237771620349108691')
hshsmall[5] = mpmath.mpc(real='0.24871486315270833937899573385190854471', imag='-0.031804426028132728503615499070403531074')
hshlarge[8] = mpmath.mpc(real='-0.42149032040682178625192670368840983022', imag='0.010578065308244671996263282827420829167')
hshsmall[8] = mpmath.mpc(real='0.074772518414073822433839025840550933594', imag='0.058608391323943221038177597180243653086')
hshlarge[10] = mpmath.mpc(real='-0.2147800347251893570993812320502272305', imag='-0.36210589561514387311505178895772083034')
hshsmall[10] = mpmath.mpc(real='0.17297921181590995019051691094451344631', imag='0.048653042375446815958532199798667053648')
hshlarge[11] = mpmath.mpc(real='-0.36314021143311497841897784925757773717', imag='-0.068198796415098659000602585621103525776')
hshsmall[11] = mpmath.mpc(real='0.08189352770978067639437369201844640022', imag='-0.040472238381288889149455710282181842618')
hshlarge[12] = mpmath.mpc(real='-0.3476623785205107243103642084669313251', imag='-0.030418119895847690667870854509662868905')
hshsmall[12] = mpmath.mpc(real='0.059516690536536542003152939122690343213', imag='0.047893697985728719344011639427630612089')
hshlarge[13] = mpmath.mpc(real='-0.33473161213462822212173355691159681243', imag='0.032450120134538626180363742849259497391')
hshsmall[13] = mpmath.mpc(real='0.057697366561409546603237503751314693642', imag='-0.045682795705053145675610726528986555575')
hshlarge[14] = mpmath.mpc(real='-0.31090920276125449275626688534128553263', imag='-0.13438280852504053785567805124169542535')
hshsmall[14] = mpmath.mpc(real='0.092442728130044259805826239123772602765', imag='-0.019568387932740212586287428263802637924')
hshlarge[15] = mpmath.mpc(real='-0.15050686317960922831851818602322563897', imag='-0.34623478827098329420975194028452835835')
hshsmall[15] = mpmath.mpc(real='0.15149106363581234263065788071890586215', imag='0.088037774314336854746176582723756846014')

# zetazero(21) (missing 10, 16)
hshlarge[2] = mpmath.mpc(real='-0.27963787733176181245089157066079953435', imag='0.65698071988750671116576121920729878112')
hshsmall[2] = mpmath.mpc(real='0.28996577370968661464845553629101871795', imag='0.050050633417569037475238303266715799403')
hshlarge[3] = mpmath.mpc(real='-0.019644546646138933486602512075706374451', imag='0.46100633084290670700388563637394463973')
hshsmall[3] = mpmath.mpc(real='0.42040341720667234859172440642558019265', imag='-0.045403562564856185366979252586894089659')
hshlarge[4] = mpmath.mpc(real='-0.56708347466849113381775133391462641521', imag='-0.077458972082350533074539122201744778729')
hshsmall[4] = mpmath.mpc(real='0.067296805555677438315073694508268026404', imag='0.092063265188108058973305322778073060108')
hshlarge[5] = mpmath.mpc(real='-0.37382756284681528349271948897220325897', imag='-0.37479979231299681444543340241054698721')
hshsmall[5] = mpmath.mpc(real='0.17766500396349168516580424499167395047', imag='-0.027096028133479839431252338144106198742')
hshlarge[6] = mpmath.mpc(real='-0.42339648406441209629309476566443593416', imag='0.24397520390073562276891945261580242865')
hshsmall[6] = mpmath.mpc(real='0.13369129245912959780933821916544416884', imag='0.043666185025846397439795647382050838085')
hshlarge[7] = mpmath.mpc(real='-0.43890105541541173824888726025541132035', imag='0.10777077184123162131526251618774883278')
hshsmall[7] = mpmath.mpc(real='0.097805409410013473796201378217018967066', imag='0.055050919383564628622834468918123465485')
hshlarge[8] = mpmath.mpc(real='-0.21480649672277811730432900381503370871', imag='-0.40270001683352937382680215534548664714')
hshsmall[8] = mpmath.mpc(real='0.19931905867448505584561344052772859472', imag='0.04948600343272971013015924199721550442')
hshlarge[9] = mpmath.mpc(real='-0.2032924066438066453165121132257391301', imag='0.39071720886303748812412231461765083273')
hshsmall[9] = mpmath.mpc(real='0.1911744179763820647506525251588868486', imag='-0.057604216829152264355811451824867750191')
hshlarge[11] = mpmath.mpc(real='-0.21491835111528034390366690734857147016', imag='-0.34367935664388560016538959218780340644')
hshsmall[11] = mpmath.mpc(real='0.16201873921206288710921113360718331816', imag='0.046844853983598679385782132467733847834')
hshlarge[12] = mpmath.mpc(real='-0.31495755671265645182046226647154289019', imag='-0.18771722740928958429660884888898177281')
hshsmall[12] = mpmath.mpc(real='0.10859403103429732841191301487200230351', imag='-0.014142695812063465013651175312011820797')
hshlarge[13] = mpmath.mpc(real='-0.31189397676223360909940101893634171276', imag='-0.16413932002064767692559661687385979238')
hshsmall[13] = mpmath.mpc(real='0.10105206725462054191543009883253749503', imag='-0.016051595727789612552250556153333122697')
hshlarge[14] = mpmath.mpc(real='-0.24395269443226447571751348324330691948', imag='-0.26061331627932823871355885944106661144')
hshsmall[14] = mpmath.mpc(real='0.12530985325127053336816795197890179568', imag='0.021129605632710612670596953363507525596')
hshlarge[15] = mpmath.mpc(real='-0.088831467208480469396916618949114833478', imag='-0.41044791660538525226417173486714705543')
hshsmall[15] = mpmath.mpc(real='0.17724659720106960895782305660018394909', imag='0.16785889901584095789630696960656021512')

# mpmath.zetazero(22) (missing 2, 9)
hshlarge[3] = mpmath.mpc(real='-0.64476958253558511857605240920308793293', imag='0.094894355303234512340984977913885900381')
hshsmall[3] = mpmath.mpc(real='0.067532752801809687296725199245106335592', imag='-0.10633881825409793393272076260619284543')
hshlarge[4] = mpmath.mpc(real='-0.34546039897577833322654212368265075613', imag='-0.45811094390701715509693052664611172194')
hshsmall[4] = mpmath.mpc(real='0.21206499659886810591128925253919805762', imag='-0.023766287994119893506048211339338974112')
hshlarge[5] = mpmath.mpc(real='-0.21549067544077154108241887609469785802', imag='-0.47919692843199491906739849530844897044')
hshsmall[5] = mpmath.mpc(real='0.25059544891645525828440421246963189256', imag='0.033363265639220899773078616479638632726')
hshlarge[6] = mpmath.mpc(real='-0.3994388563376308346856299060833440861', imag='0.28482203509660910102792564066345681398')
hshsmall[6] = mpmath.mpc(real='0.14586125760046608011386363378202203622', imag='0.035123379131130888522687621991613575742')
hshlarge[7] = mpmath.mpc(real='-0.32787216483261673031708740427834863743', imag='0.33098405752428238320985015285852508464')
hshsmall[7] = mpmath.mpc(real='0.16147567967268207187598182729764615652', imag='0.0083820465338019181695138374425943178182')
hshlarge[8] = mpmath.mpc(real='-0.41774976381006206081884484558405943482', imag='-0.079074390414757651324322934026848046303')
hshsmall[8] = mpmath.mpc(real='0.089457346337334140201660430345021972514', imag='-0.052166184979866885847967651043348246325')
hshlarge[10] = mpmath.mpc(real='-0.34744981033600684243987178181866851544', imag='-0.18637450170311109603728178231842948739')
hshsmall[10] = mpmath.mpc(real='0.11158259421716553973504065724304215547', imag='-0.0242594375382842103905239394328979045')
hshlarge[11] = mpmath.mpc(real='-0.31038133190772709382523685253907749521', imag='0.22590668827192341716294214839429477042')
hshsmall[11] = mpmath.mpc(real='0.12062360234099742328970633466016672697', imag='0.0084031386213820998157842474277871845783')
hshlarge[12] = mpmath.mpc(real='-0.12520226625473054346140107749548312619', imag='0.40941864455315306642577771812848093009')
hshsmall[12] = mpmath.mpc(real='0.19668817929648235058212506720866747798', imag='-0.12973472014933533383119418474249082291')
hshlarge[13] = mpmath.mpc(real='-0.080906039037429737067935386990964324474', imag='0.47948759089471227593487283678648776362')
hshsmall[13] = mpmath.mpc(real='0.23829253790347532294441846236660509342', imag='-0.25111822583502403888869641359160940516')
hshlarge[14] = mpmath.mpc(real='-0.080771679509313102796765852086588521014', imag='0.44053508505653320386769319951299758188')
hshsmall[14] = mpmath.mpc(real='0.20051232375327411237256791103708196286', imag='-0.20159837890904192704569559947445929947')
hshlarge[15] = mpmath.mpc(real='-0.17009898959674869316392521086688861457', imag='0.32763044685342323412480094424440485842')
hshsmall[15] = mpmath.mpc(real='0.14473289461104305713992117572243930887', imag='-0.070680592033766202165981324689508966752')
hshlarge[16] = mpmath.mpc(real='-0.29835697532128440521527836097615888546', imag='0.10887362668428936400982470907096682906')
hshsmall[16] = mpmath.mpc(real='0.0839456420718799786619191497971703581', imag='0.01968678780715835172895584011618006447')

# mpmath.zetazero(23) (missing 8, 10)
hshlarge[2] = mpmath.mpc(real='-0.59897766291069771624885100756358750695', imag='-0.47717806117045386616727120049068994336')
hshsmall[2] = mpmath.mpc(real='0.19117737314094986103025524110333910961', imag='-0.1004887317679230951800152247307839627')
hshlarge[3] = mpmath.mpc(real='-0.11112394886736664458501352675249429964', imag='0.55328106504648579707555734530311225488')
hshsmall[3] = mpmath.mpc(real='0.34362602325048497708777798802855724346', imag='-0.024815248989401322008331480139887419099')
hshlarge[4] = mpmath.mpc(real='-0.36976983024016727014757161019044026791', imag='0.44042559546083009647303117225251731478')
hshsmall[4] = mpmath.mpc(real='0.20237198291274790459368917836436002118', imag='0.030719775640432021374339951968650089403')
hshlarge[5] = mpmath.mpc(real='-0.32366170301592934529403547148312137302', imag='0.41926065161386351804082771370923033455')
hshsmall[5] = mpmath.mpc(real='0.19888357035005143895760900345889684197', imag='0.010192975228915134223794497990529907457')
hshlarge[6] = mpmath.mpc(real='-0.12348811689065051917981306252672053856', imag='-0.47268761351348986223940299626664111825')
hshsmall[6] = mpmath.mpc(real='0.33395085672440561760635715432319977625', imag='0.12287037293158860818345664937559234704')
hshlarge[7] = mpmath.mpc(real='-0.20396517728750201658729888009786967497', imag='-0.43192398513468928106133898425875311207')
hshsmall[7] = mpmath.mpc(real='0.22132975730238760690758376874714098205', imag='0.054358607725624543211483147024099188747')
hshlarge[9] = mpmath.mpc(real='-0.34880686557013907367663882367761831974', imag='0.22433418712394702019606513181454114204')
hshsmall[9] = mpmath.mpc(real='0.12358796142171192021412219566439184606', imag='0.021404609823732149961603178706459526768')
hshlarge[11] = mpmath.mpc(real='-0.28917868269097583464265867546572589155', imag='-0.25920903553532250256933262397293383536')
hshsmall[11] = mpmath.mpc(real='0.13052694217046504016225328748568679891', imag='0.0028134112768273609226084894247335426862')
hshlarge[12] = mpmath.mpc(real='-0.3482287819484417681535863710237636496', imag='-0.026496192414668686975003454256653467336')
hshsmall[12] = mpmath.mpc(real='0.060324212176999884278822541631334818389', imag='0.047574428537640493579577085829716764593')
hshlarge[13] = mpmath.mpc(real='-0.32502712391330226521331253526374703006', imag='0.12573546833606280520497889788338674422')
hshsmall[13] = mpmath.mpc(real='0.091878945384327169364441269245373890108', imag='0.024481054628949532974373350729118897568')
hshlarge[14] = mpmath.mpc(real='-0.31469861074458104564615690122872624608', imag='0.12170539810959026958816999829419953428')
hshsmall[14] = mpmath.mpc(real='0.089510349290318378991272494256741491969', imag='0.02223493095692974815535230123969701642')
hshlarge[15] = mpmath.mpc(real='-0.31677918090310037234670476362050595903', imag='-0.0050936340381519626914974328251627104767')
hshsmall[15] = mpmath.mpc(real='0.060816444852488160942507857060959341811', imag='0.039001515425099311337665206147665998391')
hshlarge[16] = mpmath.mpc(real='-0.28648247920559942441233437552213861271', imag='-0.14673010850252530527242511343679296337')
hshsmall[16] = mpmath.mpc(real='0.092526557785307430066044783716792846782', imag='-0.011007333298733526727442762599012014847')

# mpmath.zetazero(24) (missing 6, 7, 8, 10)
hshlarge[2] = mpmath.mpc(real='-0.61913726690744325837904419204355634685', imag='0.45413292105353843607858892315182365046')
hshsmall[2] = mpmath.mpc(real='0.184217436560213985040864775495914759', imag='0.10340159910708561531745978890044573566')
hshlarge[3] = mpmath.mpc(real='-0.36255232535387998777370446913137850691', imag='-0.52205489597654602699726009751176354107')
hshsmall[3] = mpmath.mpc(real='0.23210737198186404031140108862554516024', imag='-0.040366162904703474381114249385268504378')
hshlarge[4] = mpmath.mpc(real='-0.33711264509835159591513408119337182653', imag='-0.46364234642413895280901117287689009001')
hshsmall[4] = mpmath.mpc(real='0.21542316275687698228132851513688992173', imag='-0.021323291417826030037798426809401389354')
hshlarge[5] = mpmath.mpc(real='-0.47901118429694715703241753322166723718', imag='-0.21619303863070617887255158416759804615')
hshsmall[5] = mpmath.mpc(real='0.12740002410322063156171743031515564236', imag='-0.060157449024411924549219272903401616507')
hshlarge[9] = mpmath.mpc(real='-0.39224376724939791459081802853000045298', imag='0.10263023079746018474378368404817427221')
hshsmall[9] = mpmath.mpc(real='0.092942205636519410662158960496515846205', imag='0.044099746804948669018287170920655264888')
hshlarge[11] = mpmath.mpc(real='-0.31651863030976100834084857797039935351', imag='-0.21489423655967530972930631179129547979')
hshsmall[11] = mpmath.mpc(real='0.1175386999193370847187850309440799154', imag='-0.011636287235492212399488138655675163087')
hshlarge[12] = mpmath.mpc(real='-0.34415076573124969064858517274231160224', imag='0.099170423499773001438796058249487322431')
hshsmall[12] = mpmath.mpc(real='0.087269657025049595658669592384294583785', imag='0.032531624028755358541223863721570285852')
hshlarge[13] = mpmath.mpc(real='-0.23832484678357798324065497930196241834', imag='0.28444134028302860204130332015423842864')
hshsmall[13] = mpmath.mpc(real='0.13481342946712468604132667154243142987', imag='-0.027131287218217363287000390184609609014')
hshlarge[14] = mpmath.mpc(real='-0.19359447371609533839596329228513135336', imag='0.31758662440246138411195630396604274141')
hshsmall[14] = mpmath.mpc(real='0.14397349626325416939331499358936882913', imag='-0.054972211193292575355171107658461088658')
hshlarge[15] = mpmath.mpc(real='-0.2325743019483381507547423677753734894', imag='0.25952431434233998837390651762931330125')
hshsmall[15] = mpmath.mpc(real='0.12301486945554804486924084070412655387', imag='-0.025722266835213921649227836834309973578')
hshlarge[16] = mpmath.mpc(real='-0.30142575284921343869395072611396509916', imag='0.095727335341224310957235550536380307485')
hshsmall[16] = mpmath.mpc(real='0.081042413074285562324152297715198942454', imag='0.022303099503559229907812877115594765424')

# mpmath.zetazero(186614) (missing 11, 12)
hshlarge[2] = mpmath.mpc(real='-0.75427420639089737701630471780899709532', imag='0.19666907796377729313026081641439641959')
hshsmall[2] = mpmath.mpc(real='0.12340580476664005665042982789613903492', imag='0.12271323186576659043316988331382050142')
hshlarge[3] = mpmath.mpc(real='-0.0065485064944256285559941263343819452048', imag='0.43121602257646296945863021576079653519')
hshsmall[3] = mpmath.mpc(real='0.43599846438137285750123054605851013718', imag='-0.045332533678281961936060407701635042979')
hshlarge[4] = mpmath.mpc(real='-0.086284431728879651523587154225056925999', imag='-0.47895473673524769799315307118030360125')
hshsmall[4] = mpmath.mpc(real='0.38227431206477012435003846534732521481', imag='0.075978322116792343414260277907204930548')
hshlarge[5] = mpmath.mpc(real='-0.12478632571146230180674455154377443619', imag='-0.34496808987208682112615424269863734187')
hshsmall[5] = mpmath.mpc(real='0.49861266262973762068733600088431750246', imag='0.09950145298172628640301103128790835141')
hshlarge[6] = mpmath.mpc(real='-0.47879605469300122406734066689901191648', imag='-0.037664821140362833498355389563784333178')
hshsmall[6] = mpmath.mpc(real='0.084625286173874002963427170340723915457', imag='-0.068618159207890910475619292439924035174')
hshlarge[7] = mpmath.mpc(real='-0.12450365286042409590305998116846648052', imag='-0.46915318302045998578707746528839440078')
hshsmall[7] = mpmath.mpc(real='0.3312467161137057160271820052109396338', imag='0.15274450953979755629112250174842872684')
hshlarge[8] = mpmath.mpc(real='-0.24317832564263572299400245608811943233', imag='0.38109171505298784863247484365250795923')
hshsmall[8] = mpmath.mpc(real='0.18515120104584755306282742021365608432', imag='-0.032332696802521927627312516781219906095')
hshlarge[9] = mpmath.mpc(real='-0.17311511990193992632462391244965654666', imag='0.41316932737455076029082858410328775683')
hshsmall[9] = mpmath.mpc(real='0.20863631922680808989184509620503368785', imag='-0.081734031261366555825336930219952598286')
hshlarge[10] = mpmath.mpc(real='-0.29524238818991216346973554897928554016', imag='0.27632985942217571812258784068481768504')
hshsmall[10] = mpmath.mpc(real='0.13780486600936199267661474877179454695', imag='-0.0020791955949959433366216365685413967049')
hshlarge[13] = mpmath.mpc(real='-0.12433206735972361647270010116678114479', imag='0.39657768405635846990569372129115712254')
hshsmall[13] = mpmath.mpc(real='0.18331583357261410086927358719396140111', imag='-0.12557216336273864710661572355631038832')
hshlarge[14] = mpmath.mpc(real='-0.17875997535297894814901157353369388503', imag='0.33210944241592798186976856915173589735')
hshsmall[14] = mpmath.mpc(real='0.14938764247783435716216112969613115487', imag='-0.066467131234062360651890641616734648859')
hshlarge[16] = mpmath.mpc(real='-0.20224085045916246360579880266793119055', imag='-0.28203687914990680878143139988322567178')
hshsmall[16] = mpmath.mpc(real='0.12746086898167198681162195975877666836', imag='0.043482997667701239518901432709277324633')

# mpmath.zetazero(186615) (missing 3, 8, 9, 10, 14)
hshlarge[2] = mpmath.mpc(real='-0.54081582661438453180472214739710706575', imag='0.53312397014031766914569996153333529393')
hshsmall[2] = mpmath.mpc(real='0.21019818271333870157569524464179502133', imag='0.091929606396383105324767703597326149251')
hshlarge[4] = mpmath.mpc(real='-0.45095478228199357105892629990698132361', imag='-0.36070880790372458168084273717740901912')
hshsmall[4] = mpmath.mpc(real='0.16957083519935106518388957534341996189', imag='-0.052598673669247482038826766898448748158')
hshlarge[5] = mpmath.mpc(real='-0.36974203868236588514733263692408697069', imag='-0.37891461989987249532182368000851523769')
hshsmall[5] = mpmath.mpc(real='0.17939490850098227718796632282064366747', imag='-0.02576793474229564364185771339178807308')
hshlarge[6] = mpmath.mpc(real='-0.29199359077285253977885253078898630016', imag='0.40196179545774024319075281989158231961')
hshsmall[6] = mpmath.mpc(real='0.1938377779316648520908444433520486308', imag='-0.0056890319826908998744669246714064886422')
hshlarge[7] = mpmath.mpc(real='-0.44061940075348507236948250169304267742', imag='-0.098472725994177544728928115728105258468')
hshsmall[7] = mpmath.mpc(real='0.095703759881827910430915706364780395236', imag='-0.056092287961881996144569159545667084103')
hshlarge[11] = mpmath.mpc(real='-0.17667081334971148896243489765316104345', imag='-0.37750923296835106555915305923550211436')
hshsmall[11] = mpmath.mpc(real='0.1795701420029239150125143550946646506', imag='0.076011828663684504619525442306318476302')
hshlarge[12] = mpmath.mpc(real='-0.32058825794193886133318931069636080944', imag='-0.17502529844463204592782741558819390278')
hshsmall[12] = mpmath.mpc(real='0.1053485934245226759556039720920124842', imag='-0.017342110831896563477831808625200813354')
hshlarge[13] = mpmath.mpc(real='-0.081113711362776438894042263183590392325', imag='-0.49370455081379215710631938948391244795')
hshsmall[13] = mpmath.mpc(real='0.24878902463585457355238941958395775007', imag='0.27277907414382538933321991147242853175')
hshlarge[15] = mpmath.mpc(real='-0.27056880511362652795627105609865411487', imag='-0.20248134608119780476766261498168600966')
hshsmall[15] = mpmath.mpc(real='0.10753759293505000487792288453235599072', imag='0.0022627392479401005460066523727586618718')
hshlarge[16] = mpmath.mpc(real='-0.21487413172583431798746988938093849523', imag='0.26738934804331623462214242246092270402')
hshsmall[16] = mpmath.mpc(real='0.12322798307744903397348354624613644765', imag='-0.034793166995737407053608256168045663499')

# mpmath.zetazero(186616) (missing 16)
hshlarge[2] = mpmath.mpc(real='-0.3818059536899821924308232561343599091', imag='0.62917221833014071232584652271920978415')
hshsmall[2] = mpmath.mpc(real='0.25868632309875469583856902974092077879', imag='0.067133430478684964285440902661947105673')
hshlarge[3] = mpmath.mpc(real='-0.007494720209400847758306470836686829696', imag='-0.43362500279099236423789163847549444391')
hshsmall[3] = mpmath.mpc(real='0.4348312003381909131620936327409107089', imag='0.045402301130631514469575756806834576247')
hshlarge[4] = mpmath.mpc(real='-0.56886899600967477909587462331927241561', imag='-0.085984974432599670450524042004654225558')
hshsmall[4] = mpmath.mpc(real='0.099185882883515422300032933650746221979', imag='-0.085472814087255536843813382972607048555')
hshlarge[5] = mpmath.mpc(real='-0.51174477902869131938841869885959699945', imag='-0.10515010786620724231263538488284813042')
hshsmall[5] = mpmath.mpc(real='0.10120543853395330465491601041854077021', imag='-0.072212373809435240993663371638202117923')
hshlarge[6] = mpmath.mpc(real='-0.12231784368621168877211636416723031648', imag='0.471559649468438255188577431758703618')
hshsmall[6] = mpmath.mpc(real='0.34002599427653235298089732621236206369', imag='-0.12620500879712929804787906133387504421')
hshlarge[7] = mpmath.mpc(real='-0.43829641130372131514795229791882737399', imag='0.11081105560478330708753225971996283183')
hshsmall[7] = mpmath.mpc(real='0.098497834115885793724038532082200864406', imag='0.054700484168929880151772671269023241993')
hshlarge[8] = mpmath.mpc(real='-0.12311737631271917550457965499889615725', imag='-0.46659167090051791315587009737306602723')
hshsmall[8] = mpmath.mpc(real='0.30033161437439383279066227179668671981', imag='0.16065848566521183455720691517949148596')
hshlarge[9] = mpmath.mpc(real='-0.17531539111735118167931542239885072284', imag='-0.4115696227321201977088890426016510699')
hshsmall[9] = mpmath.mpc(real='0.20721499228174542121365258870830545782', imag='0.079766177064864221293141544490199864783')
hshlarge[10] = mpmath.mpc(real='-0.11078655698435564168703932314794759219', imag='-0.47320829213770458947947862422569491547')
hshsmall[10] = mpmath.mpc(real='0.28483050680662135176904054353428453194', imag='0.20918423351753896177112697887159288653')
hshlarge[11] = mpmath.mpc(real='-0.35575564824772930561659377262718000727', imag='-0.11111850710715405433952802163442767271')
hshsmall[11] = mpmath.mpc(real='0.091548465232410966105018145103350994803', imag='-0.03415246505246560251805127386760624885')
hshlarge[12] = mpmath.mpc(real='-0.34858398474599263455420562470259855493', imag='0.072458637374848199362509387139184164854')
hshsmall[12] = mpmath.mpc(real='0.081307450526838388612343773265143081358', imag='0.036612841890496885402720272448856787859')
hshlarge[13] = mpmath.mpc(real='-0.25997472322348372390116580226042470848', imag='-0.2569690786943010547021841732402047023')
hshsmall[13] = mpmath.mpc(real='0.12614083368563622577280502670667854666', imag='0.014046113674012869803004205510911166128')
hshlarge[14] = mpmath.mpc(real='-0.21104687744305299235890900324988400276', imag='-0.29946988715953249425729799930195000468')
hshsmall[14] = mpmath.mpc(real='0.13763613265436088704259306994491313509', imag='0.042488498770916025032732292073035358801')
hshlarge[15] = mpmath.mpc(real='-0.31704341219822534756992429047861721885', imag='0.051712325833643341065969198384335241354')
hshsmall[15] = mpmath.mpc(real='0.072748833667539776759672400468134352888', imag='0.031874907445018103342820382632446431204')

# mpmath.zetazero(186617) (missing 6)
hshlarge[2] = mpmath.mpc(real='-0.16893444648096111469505839023142720626', imag='0.65866333451579139331181834699701330877')
hshsmall[2] = mpmath.mpc(real='0.32631516792077776325195990100513642959', imag='0.030706891501464762664727992959056129477')
hshlarge[3] = mpmath.mpc(real='-0.18751232353922064229183032403439376822', imag='-0.56924073600545656291183669656922823343')
hshsmall[3] = mpmath.mpc(real='0.3023233396066210752989335119326307433', imag='0.0034211853332440593918098959432554288551')
hshlarge[4] = mpmath.mpc(real='-0.56007345883433830961927861993623923252', imag='0.13488991627443271613576270003980108882')
hshsmall[4] = mpmath.mpc(real='0.10961084179617263703691106579811176573', imag='0.08209725074501775324643857016537978289')
hshlarge[5] = mpmath.mpc(real='-0.50050899212279890917539979452307996528', imag='0.15453120203469394408999015460055501484')
hshsmall[5] = mpmath.mpc(real='0.11234433203439605857387136400952155908', imag='0.067568317682154329644378741147303667558')
hshlarge[7] = mpmath.mpc(real='-0.21401052929709467666662672177193213804', imag='0.4259449450744899336282523861505003218')
hshsmall[7] = mpmath.mpc(real='0.21548140051089328812271726818512776049', imag='-0.047983334067478699434105514875419075433')
hshlarge[8] = mpmath.mpc(real='-0.3547205442729921354820470619552713989', imag='-0.2551135743546826109469360583481430456')
hshsmall[8] = mpmath.mpc(real='0.13424192025081509801487637913493537107', imag='-0.021272344876539258094315915931186243033')
hshlarge[9] = mpmath.mpc(real='-0.39555034535455273838415574593697740634', imag='-0.083319197668542990041557818429071639373')
hshsmall[9] = mpmath.mpc(real='0.088580150842077165829449858220476049638', imag='-0.046605437378410376390901261005492254569')
hshlarge[10] = mpmath.mpc(real='-0.33359295079625290895938297293001633422', imag='-0.21542604461064219593973092658395823623')
hshsmall[10] = mpmath.mpc(real='0.11939452044857113027842722113878669663', imag='-0.017208932201937123501675520663005798111')
hshlarge[11] = mpmath.mpc(real='-0.31208010573984572469504225928501855798', imag='0.22293234700028313386630159821848142861')
hshsmall[11] = mpmath.mpc(real='0.11978213110565480280187247590548746012', imag='0.009297237378363537022193117766190218623')
hshlarge[12] = mpmath.mpc(real='-0.12545061086860659513449060870690700728', imag='0.40916119936828128067817706646407952087')
hshsmall[12] = mpmath.mpc(real='0.19650812145065630065408927433000879058', imag='-0.1293681266820276142852230903858054739')
hshlarge[13] = mpmath.mpc(real='-0.33533368849701909454479589415151914592', imag='0.077945589347689391520032241586789017552')
hshsmall[13] = mpmath.mpc(real='0.081073775203448155666612952411610647122', imag='0.032846889706724366253128962814623599823')
hshlarge[14] = mpmath.mpc(real='-0.32815215425640213118202186819280537699', imag='0.022580097770392678724349176450797349003')
hshsmall[14] = mpmath.mpc(real='0.067828159823425228835850308922500582795', imag='0.037917748067544719085554539772032351646')
hshlarge[15] = mpmath.mpc(real='-0.093590447193939133621827814040431512779', imag='0.40432804534589146209391630842396913967')
hshsmall[15] = mpmath.mpc(real='0.17469311861843377820107230699842129042', imag='-0.15919742026106627658694252207628671225')
hshlarge[16] = mpmath.mpc(real='-0.040746974151362283601752749777608193086', imag='-0.50071704880895148033147842418886299028')
hshsmall[16] = mpmath.mpc(real='0.19658011284910849660873973287673747067', imag='0.30522783457039306130982920945183145683')

# mpmath.zetazero(186618) (missing 6, 12)
hshlarge[2] = mpmath.mpc(real='-0.07434104535071739730370117763508954134', imag='0.63216445229149466581527726494785766167')
hshsmall[2] = mpmath.mpc(real='0.36129727092843583858189051577286262298', imag='0.014098748426440045697512244030542480488')
hshlarge[3] = mpmath.mpc(real='-0.31199513881900892965888435245117087641', imag='-0.54555696653946587307252214113257998167')
hshsmall[3] = mpmath.mpc(real='0.25069494926164365100238315186056526433', imag='-0.02852980398704993384817732490308284115')
hshlarge[4] = mpmath.mpc(real='-0.48836273983434106127549560282289181789', imag='0.30861705723122905682132591658528803238')
hshsmall[4] = mpmath.mpc(real='0.15305049062996192403130634683774879664', imag='0.06228144038435895035146002553775171334')
hshlarge[5] = mpmath.mpc(real='-0.41365938167218193384846371089306547849', imag='0.32887540912016532698935504088672098012')
hshsmall[5] = mpmath.mpc(real='0.16041690871816730408608033883740803024', imag='0.039727697068774932135558829452467306761')
hshlarge[7] = mpmath.mpc(real='-0.12495580613013503915318934566208293969', imag='0.46913707824389005206297801671912519318')
hshsmall[7] = mpmath.mpc(real='0.32151292693057760262793812218473982619', imag='-0.1463020722117326804781147500412938603')
hshlarge[8] = mpmath.mpc(real='-0.42024759141533028195302789779914351395', imag='-0.055643849055815356327761864373865881451')
hshsmall[8] = mpmath.mpc(real='0.084329603783143140025558928129561750212', imag='-0.054624485406720924211682280005675153494')
hshlarge[9] = mpmath.mpc(real='-0.40000651064969691939717858023372010794', imag='0.016774374015927307535129327601751871244')
hshsmall[9] = mpmath.mpc(real='0.074188603795901416379882113303789382746', imag='0.053608881695374855071368129337800771115')
hshlarge[10] = mpmath.mpc(real='-0.38133456273633144108675009977052428009', imag='-0.0072488442682023161404311371882617219043')
hshsmall[10] = mpmath.mpc(real='0.070450435341242656419565588054256954347', imag='-0.050639490772582947632867313557328898147')
hshlarge[11] = mpmath.mpc(real='-0.18315913759350565911084873073851896377', imag='0.37197528088845072515456537096480246')
hshsmall[11] = mpmath.mpc(real='0.17638223408226881618675583260182147074', imag='-0.070540106285534990979175190782105930121')
hshlarge[13] = mpmath.mpc(real='-0.24954354341232566671973046679110250513', imag='0.27070315426431430947723045598380921883')
hshsmall[13] = mpmath.mpc(real='0.13037914171366861691333277632539171552', imag='-0.020257706529926404313470950857283679389')
hshlarge[14] = mpmath.mpc(real='-0.26778229747918886166838116164823932877', imag='0.22643175066689510117145155733906815671')
hshsmall[14] = mpmath.mpc(real='0.11554920267237172867742902881973051497', imag='-0.0067646018391515044355596045041475871209')
hshlarge[16] = mpmath.mpc(real='-0.16457409389770140159401544439347132447', imag='-0.32105521528737966323501699171326634827')
hshsmall[16] = mpmath.mpc(real='0.13944270283070071630967215429888968838', imag='0.072321596363363929054267294350982606331')

# mpmath.zetazero(186619) (missing 4, 5, 9, 10)
hshlarge[2] = mpmath.mpc(real='0.1763799401756846675805355351999815545', imag='0.26903486898475421072517537170251178867')
hshsmall[2] = mpmath.mpc(real='0.47999519367692104048820435502051823714', imag='-0.0060297670190814227282175942200639685271')
hshlarge[3] = mpmath.mpc(real='-0.65177197418821375666679604620558515521', imag='-0.034238182043547053597486724416890359732')
hshsmall[3] = mpmath.mpc(real='0.091123224840061500913390307389078272877', imag='-0.10362520391402404636156603251085720816')
hshlarge[6] = mpmath.mpc(real='-0.44965336701418553758929069233481834132', imag='-0.18454038874764187956601517645616367724')
hshsmall[6] = mpmath.mpc(real='0.11791624299760005255008697472275524523', imag='-0.053403191152869931768404419162375340859')
hshlarge[7] = mpmath.mpc(real='-0.13326379935386734047223600903816948015', imag='-0.46617058580835496513330895157623254578')
hshsmall[7] = mpmath.mpc(real='0.29011199493507853436763477727033677609', imag='0.12228719510729045899216817421558587802')
hshlarge[8] = mpmath.mpc(real='-0.12920787094815618258781589923958704666', imag='0.45943828013972242371831374781604260044')
hshsmall[8] = mpmath.mpc(real='0.27578514538995706018671189959736974765', imag='-0.13770065004772807537640338106457038126')
hshlarge[11] = mpmath.mpc(real='-0.1039793155482316036754352975204574231', imag='-0.45680931768965484327883639364243540005')
hshsmall[11] = mpmath.mpc(real='0.24694517515773328494303130779574595329', imag='0.19134773121204945324214434679200132113')
hshlarge[12] = mpmath.mpc(real='-0.011167806475167899905790347772593111979', imag='0.067118944013494354401239589182188831232')
hshsmall[12] = mpmath.mpc(real='0.41919820527144741019777776890380896218', imag='-0.053782515525485616713620656060483584612')
hshlarge[13] = mpmath.mpc(real='-0.086618964085196513866845960885484187028', imag='-0.52350145675299227559290196567450418036')
hshsmall[13] = mpmath.mpc(real='0.27149887700768658229499746216556620557', imag='0.31675887594088813085725836260291822963')
hshlarge[14] = mpmath.mpc(real='-0.056192564936871190436094110962980161048', imag='-0.028091343048160172315331200820940890679')
hshsmall[14] = mpmath.mpc(real='0.46422296373315070072808153209419601125', imag='0.041427771536168910002950133942646137298')
hshlarge[15] = mpmath.mpc(real='0.028242056281000649852444467874538352841', imag='0.078055027105628099733045410204338229544')
hshsmall[15] = mpmath.mpc(real='0.37978834251527886043954295325667749736', imag='-0.064718598617619362045426477082632982924')
hshlarge[16] = mpmath.mpc(real='-0.13661413934414434331068733037546039865', imag='0.34774449744947201899087798934088696111')
hshsmall[16] = mpmath.mpc(real='0.14820517926709262883485366113666157841', imag='-0.098013346422002842743769730428430979659')

# mpmath.zetazero(186620) (missing 2, 4, 5, 8, 9, 10, 16)
hshlarge[3] = mpmath.mpc(real='-0.64322797444546089385568536180355341009', imag='0.11198995615961740406273756603576567142')
hshsmall[3] = mpmath.mpc(real='0.10636180328017307882495949371921846641', imag='0.10039659612573144299511480382680512232')
hshlarge[6] = mpmath.mpc(real='-0.47391637322204725321669850272504148184', imag='0.089053868440312910421527674739841960772')
hshsmall[6] = mpmath.mpc(real='0.095615828660822538878674783639187701006', imag='0.064423702075210630266831608147046902983')
hshlarge[7] = mpmath.mpc(real='-0.37387257898561764119972169780765213631', imag='-0.27005436958161918858420585877956395396')
hshsmall[7] = mpmath.mpc(real='0.14022993538020763608543751355822265415', imag='-0.027045374521633482644257075753595466447')
hshlarge[11] = mpmath.mpc(real='-0.33477927653313850067639789238573877335', imag='-0.17653690422555266082170125363291647182')
hshsmall[11] = mpmath.mpc(real='0.10736829937396027139780095315997069148', imag='-0.021436170652317099437122115394667120981')
hshlarge[12] = mpmath.mpc(real='-0.34830908374760165342348105039009052433', imag='0.074533090020344361585354816921417741483')
hshsmall[12] = mpmath.mpc(real='0.081764662994343647514452753507689418157', imag='0.036315478299880217556862376485459106104')
hshlarge[13] = mpmath.mpc(real='-0.29283230863383693978186593853729820589', imag='-0.20492708984974730634865823512441854847')
hshsmall[13] = mpmath.mpc(real='0.11145339187234158322569834125038024941', imag='-0.0048937038707594843094428417826351119838')
hshlarge[14] = mpmath.mpc(real='-0.27799551418182131161810862145041603641', imag='-0.20936197896550416759999015400803521343')
hshsmall[14] = mpmath.mpc(real='0.11096344565677435988267850888880620651', imag='0.0007262689041260171360623072212726555408')
hshlarge[15] = mpmath.mpc(real='-0.26866916522924979287108223900896570467', imag='0.20585708525475473885159064004956716466')
hshsmall[15] = mpmath.mpc(real='0.10840375296112083623509384332491179143', imag='-0.0034177997956489334363972397394898717717')

# mpmath.zetazero(186621) (missing 2, 4, 15)
hshlarge[3] = mpmath.mpc(real='-0.40116065763539418525076391389556805003', imag='0.49857818640169440096676638815030567563')
hshsmall[3] = mpmath.mpc(real='0.21822505511358157416524473854397147103', imag='0.049023766355337612140178139072377827354')
hshlarge[5] = mpmath.mpc(real='-0.30790007204316827077171037664025626123', imag='-0.43081347078611690054263094418976624722')
hshsmall[5] = mpmath.mpc(real='0.20567238173427695307314328729787693563', imag='-0.0045593571833251797574413282202445445073')
hshlarge[6] = mpmath.mpc(real='-0.16873767847779020022384530078864520794', imag='0.46904756555911989990565751431576953955')
hshsmall[6] = mpmath.mpc(real='0.26429425886041649138631186593797273072', imag='-0.07214001131979158661806676241891223715')
hshlarge[7] = mpmath.mpc(real='-0.41845899616310422491940863299397171741', imag='0.18042286672201193889780201734429357951')
hshsmall[7] = mpmath.mpc(real='0.1151942155515064849323996133787759608', imag='0.045159968834557720597169253511357848802')
hshlarge[8] = mpmath.mpc(real='-0.22910914981084721821521511612833337358', imag='-0.39214225376086027625957544225497067685')
hshsmall[8] = mpmath.mpc(real='0.19198217062158788386683322908491159742', imag='0.040543636846230897479794782045493449784')
hshlarge[9] = mpmath.mpc(real='-0.37458678614163288451786438845582733933', imag='-0.16641980890821267582186795257662170483')
hshsmall[9] = mpmath.mpc(real='0.1081843221483367762895931526002201121', imag='-0.033931977431244955887465603940804829395')
hshlarge[10] = mpmath.mpc(real='-0.34024450671060717137753329484934745517', imag='-0.20216853793785027218410300237772592865')
hshsmall[10] = mpmath.mpc(real='0.1157682321810295049813347157974076221', imag='-0.020565388919558859759114633303393447203')
hshlarge[11] = mpmath.mpc(real='-0.25731732455550139428647607359636124972', imag='0.29992115047499404686331580538494905352')
hshsmall[11] = mpmath.mpc(real='0.14421231408078695262643904443657370909', imag='-0.020428131752512097419109451455897880707')
hshlarge[12] = mpmath.mpc(real='-0.11676742490705835129993581543589346851', imag='0.5435199941207377786224040693551044672')
hshsmall[12] = mpmath.mpc(real='0.32282666847122482982920177149539077464', imag='-0.34134946838788806303070686301949597726')
hshlarge[13] = mpmath.mpc(real='-0.24038812767854512335128808253792539953', imag='0.28198621812529479552561797825953571059')
hshsmall[13] = mpmath.mpc(real='0.13400542865994086305752163130828098156', imag='-0.025849929652548358661527582486753961266')
hshlarge[14] = mpmath.mpc(real='-0.2284927750880828922235293147124491352', imag='0.27980080754383518517423449523782937724')
hshsmall[14] = mpmath.mpc(real='0.13120513478758856255326478536195499421', imag='-0.030875745580735414718485700743744322092')
hshlarge[16] = mpmath.mpc(real='-0.26005921581961138682610430821356879327', imag='-0.20279731908662713815694986650521397842')
hshsmall[16] = mpmath.mpc(real='0.10601644162359782972662781880100531231', imag='0.0058942370437195928974091264592432536284')

# mpmath.zetazero(186622) (missing 6, 12)
hshlarge[2] = mpmath.mpc(real='0.05422786268915849109286589591756344721', imag='-0.53075857541584093699631009425180231251')
hshsmall[2] = mpmath.mpc(real='0.41857480196104835532265325960707497763', imag='0.0049661826412173468696991189226015065896')
hshlarge[3] = mpmath.mpc(real='-0.21854840993360939951172875115885834342', imag='0.56819324351580144618003427975556429907')
hshsmall[3] = mpmath.mpc(real='0.28822361832445376652950113617921179371', imag='0.0049373687088691564738978340302464487723')
hshlarge[4] = mpmath.mpc(real='-0.28850450413409339280905823286461765932', imag='-0.49075022526968814206559990023356651062')
hshsmall[4] = mpmath.mpc(real='0.23558922353476530219978134981616414954', imag='-0.0064418634436122551031276414218244360185')
hshlarge[5] = mpmath.mpc(real='-0.47470961505597734892005768181048582819', imag='-0.22611738179432430768080339944764124656')
hshsmall[5] = mpmath.mpc(real='0.12997446243464769519719462296863544588', imag='-0.05876447889032607670780980960521103168')
hshlarge[7] = mpmath.mpc(real='-0.25116687127784669253330769350625701434', imag='0.40097868024243754111085838990016253777')
hshsmall[7] = mpmath.mpc(real='0.19621767271558811302875997765848709253', imag='-0.02702984893725972427099151508916730842')
hshlarge[8] = mpmath.mpc(real='-0.39657442127753475119460907291655966771', imag='-0.1672599068252494939989711303309814242')
hshsmall[8] = mpmath.mpc(real='0.1101361176162798861362329099703659605', imag='-0.039991385560739635556115008223820119828')
hshlarge[9] = mpmath.mpc(real='-0.40001300272751292597957942709607652295', imag='0.027202651783635568576616576045294911024')
hshsmall[9] = mpmath.mpc(real='0.076388938722794771222131254713586357441', imag='0.05266333790021670807309905081690186148')
hshlarge[10] = mpmath.mpc(real='-0.38064630667024787494668789595746902356', imag='-0.0051492851649282922368627307815994849361')
hshsmall[10] = mpmath.mpc(real='0.067865892724818182032931972424002356611', imag='0.051715503093010560770406010694642311318')
hshlarge[11] = mpmath.mpc(real='-0.10187975834157161396806291245475255439', imag='0.47424475476856963207365529833423016671')
hshsmall[11] = mpmath.mpc(real='0.26792825618533027913425339033998884845', imag='-0.22257634738909304987429810748261201444')
hshlarge[13] = mpmath.mpc(real='-0.080949509913438027061900472081015434221', imag='0.49119652028086618392265592414396326606')
hshsmall[13] = mpmath.mpc(real='0.24692075333687290206384729313691648788', imag='-0.26898800721362150588941906473913037003')
hshlarge[14] = mpmath.mpc(real='-0.068597942188746750076178259830834452282', imag='0.51068465945058917165437973276224793221')
hshsmall[14] = mpmath.mpc(real='0.23923726547534109125018470685551744687', imag='-0.30498878497357256762998290921491249878')
hshlarge[15] = mpmath.mpc(real='-0.060927358427213739168579795808756089356', imag='-0.46546398517144124960547544852388921284')
hshsmall[15] = mpmath.mpc(real='0.20018238005457005092968765845097031831', imag='0.24803651308423881796441949243697865381')
hshlarge[16] = mpmath.mpc(real='-0.30888803164341945261720007600011117169', imag='0.018149610391753959768396057470995418172')
hshsmall[16] = mpmath.mpc(real='0.064488085485230708241409423842979058974', imag='0.034468507380306671101353854187747399998')

# mpmath.zetazero(186623) (missing 6, 7, 11)
hshlarge[2] = mpmath.mpc(real='-0.14888114317145004420305492311935374339', imag='-0.65546275476532452208490996800743029114')
hshsmall[2] = mpmath.mpc(real='0.33335610345715713979250479354596368446', imag='-0.027156457554096494851822386172953217689')
hshlarge[3] = mpmath.mpc(real='-0.0023732629234456168728963318056202214042', imag='0.42006010065934209393900597520223268051')
hshsmall[3] = mpmath.mpc(real='0.44120707266087269041288871685325345779', imag='-0.044882515021994898342596274332079694382')
hshlarge[4] = mpmath.mpc(real='-0.55007173571333475038984715476686602203', imag='-0.17293214459905851899777242735953540808')
hshsmall[4] = mpmath.mpc(real='0.1181337576581611706754240087830003205', imag='-0.078920159566713184738033213943402470188')
hshlarge[5] = mpmath.mpc(real='-0.51257312367578675313338423409174659119', imag='0.10033283090332317525527558352977289746')
hshsmall[5] = mpmath.mpc(real='0.10015367951729207753401420695529132015', imag='0.072612831314606685142381881477774958222')
hshlarge[8] = mpmath.mpc(real='-0.37512505170579118253764086618651693972', imag='0.21820014900295619893233387309074802718')
hshsmall[8] = mpmath.mpc(real='0.12352408886770409655131953166049095452', imag='0.03018856953906519202301643157574617505')
hshlarge[9] = mpmath.mpc(real='-0.16346176338383767972781772457699095987', imag='0.42018285671565765868157929527801201183')
hshsmall[9] = mpmath.mpc(real='0.21527865518783303564719365746896245915', imag='-0.090901638249003915614800661326926963465')
hshlarge[10] = mpmath.mpc(real='-0.16014378887315416966619590822945073306', imag='0.40683367570517506859338207250541794102')
hshsmall[10] = mpmath.mpc(real='0.20211876000822640204601703733816630449', imag='-0.093404095419252066645213965274077055202')
hshlarge[12] = mpmath.mpc(real='-0.23811959624429741907726481605302998261', imag='-0.30222775542810126664994603304992260358')
hshsmall[12] = mpmath.mpc(real='0.14305994717818145306049487661552838108', imag='0.029653001548068915471763150981160838576')
hshlarge[13] = mpmath.mpc(real='-0.091988261420507860905619103496046083788', imag='-0.53990334340377524990944513417723530679')
hshsmall[13] = mpmath.mpc(real='0.284388094745522830197856655612446437', imag='0.34014003080713406590000505802399295705')
hshlarge[14] = mpmath.mpc(real='-0.068218053252402860168432272618673840197', imag='-0.50003278372196183914936073806859301202')
hshsmall[14] = mpmath.mpc(real='0.23324995594724826042167586597038196415', imag='0.2898113706321186149458908173333720952')
hshlarge[15] = mpmath.mpc(real='-0.31743493255166630611963605781494302732', imag='-0.046162204258779823568426147321985155147')
hshsmall[15] = mpmath.mpc(real='0.07156600066442692261481430152159785922', imag='-0.032673923241844579898204275476158705834')
hshlarge[16] = mpmath.mpc(real='-0.05739057530559286523875744131668217357', imag='0.44565236711602320763089073717939680245')
hshsmall[16] = mpmath.mpc(real='0.18053140907837609108832469356436887111', imag='-0.22808321705622320822807016805377199018')

# mpmath.zetazero(186624) (missing 3, 8, 9, 10)
hshlarge[2] = mpmath.mpc(real='-0.45566421305776651966838374321547354422', imag='-0.59334708526090420469611436317561390895')
hshsmall[2] = mpmath.mpc(real='0.23644646529472880903389041954533071243', imag='-0.078920405449230591730542300863518168034')
hshlarge[4] = mpmath.mpc(real='-0.53334689239807615836747602020381670532', imag='0.22060501902863722122025285467374103757')
hshsmall[4] = mpmath.mpc(real='0.12945973426667380873725538351051616795', imag='0.074140911386932033148571321458193031122')
hshlarge[5] = mpmath.mpc(real='-0.19009188646044317212413546820015264765', imag='0.48670321406657793638359663410882591375')
hshsmall[5] = mpmath.mpc(real='0.26620732818667708391519499671908440576', imag='-0.046014617060914208553705637620455974257')
hshlarge[6] = mpmath.mpc(real='-0.36613242240703472386958618065766520717', imag='-0.32994341345336378916236999795299919681')
hshsmall[6] = mpmath.mpc(real='0.16123102473415292128143549995708550483', imag='-0.023160089642210461586965854376383270964')
hshlarge[7] = mpmath.mpc(real='-0.1438123659815993932934352925596807177', imag='-0.46188749178883083365765047835294135137')
hshsmall[7] = mpmath.mpc(real='0.27217601548179023724757314500938425337', imag='0.10638796106602522050039417861744259723')
hshlarge[11] = mpmath.mpc(real='-0.35558489397899091826772188405849975028', imag='-0.11186019475013195847705566783087228641')
hshsmall[11] = mpmath.mpc(real='0.091719578244753990286978634774219824228', imag='-0.034030812723126539749943874167548277502')
hshlarge[12] = mpmath.mpc(real='-0.30589349998218685819380001157511095862', imag='0.20606269639832943437654116336638230485')
hshsmall[12] = mpmath.mpc(real='0.11343151690651452739239521691396131185', imag='0.0090924067340688699795889088904962528989')
hshlarge[13] = mpmath.mpc(real='-0.33908047949793126708470812566660962002', imag='-0.012121615359839814860495076173224018602')
hshsmall[13] = mpmath.mpc(real='0.066948687441910698482988870247149937206', imag='-0.041426164010136897824567121933679498925')
hshlarge[14] = mpmath.mpc(real='-0.32290112842473751039944424784011890565', imag='0.035465641360012541151854526677383348899')
hshsmall[14] = mpmath.mpc(real='0.055770760819010690079724223352514700179', imag='-0.043828543452030812354631587890094805001')
hshlarge[15] = mpmath.mpc(real='-0.083934134861489821368028719653586790239', imag='0.41725340886497414892022245174931688257')
hshsmall[15] = mpmath.mpc(real='0.18009267035705841224802470540158920572', imag='-0.17762827930212103362319269113207217332')
hshlarge[16] = mpmath.mpc(real='-0.088647707593713782970105243976871900012', imag='-0.39704208372020937395190688581441454374')
hshsmall[16] = mpmath.mpc(real='0.16489738060063459719132705442158807771', imag='0.15895389130752870815239729696417533395')

# zetazero(186625) (missing 5, 8, 12, 15)
hshlarge[2] = mpmath.mpc(real='-0.65877397023173752661065482315201106178', imag='-0.4016098224530197546494093099405266536')
hshsmall[2] = mpmath.mpc(real='0.16968027893667863183210535416508628817', imag='-0.10906361638570977644305202095374895386')
hshlarge[3] = mpmath.mpc(real='-0.045025393319581688503963545035030000097', imag='-0.5017351474281010919684010489248002822')
hshsmall[3] = mpmath.mpc(real='0.3940599786233229939542704859299482048', imag='0.041834949999160355869224997543788293808')
hshlarge[4] = mpmath.mpc(real='-0.26672764247712246809253831388085604087', imag='0.50018024541230129294982252457841249055')
hshsmall[4] = mpmath.mpc(real='0.24515292020637520590514336630835456813', imag='-0.00064593091634985181136674648890544674432')
hshlarge[6] = mpmath.mpc(real='-0.47727308021854972642449020683995378838', imag='-0.025771851046881309029167176315325647035')
hshsmall[6] = mpmath.mpc(real='0.071703651159054972912507116466073663247', imag='0.072463444284016827046215061411273032519')
hshlarge[7] = mpmath.mpc(real='-0.41594950258718759871292088894390976589', imag='-0.18703386951945051222893237894259485804')
hshsmall[7] = mpmath.mpc(real='0.11687972934136137842224523092750160034', imag='-0.044081715389557613022738478488637659638')
hshlarge[9] = mpmath.mpc(real='-0.2559323501046481528224210414252965161', imag='-0.34572053384143024237308158741291022765')
hshsmall[9] = mpmath.mpc(real='0.16624930024762415165442975431678572144', imag='0.024678384459992076057300013598250689931')
hshlarge[10] = mpmath.mpc(real='-0.27252957256961086849653921206798800419', imag='-0.30457949562231961880923370032853882451')
hshsmall[10] = mpmath.mpc(real='0.14773410877570119639183858693576564125', imag='0.014017811609332489803314652448743183264')
hshlarge[11] = mpmath.mpc(real='-0.28377025710787951980577087715559291545', imag='0.26678142193956790602337177842856947975')
hshsmall[11] = mpmath.mpc(real='0.13292151104409902670404778639413387431', imag='-0.0057186962967140614803277325890128015626')
hshlarge[13] = mpmath.mpc(real='-0.18465844831029347510592426743367115244', imag='0.3403059964879038634178566280391350097')
hshsmall[13] = mpmath.mpc(real='0.15557327219138707436154837698586267286', imag='-0.064485167953855115672050295660623574922')
hshlarge[14] = mpmath.mpc(real='-0.1373249141357331654036660684670770999', imag='0.3709209317589602922662773156741978545')
hshsmall[14] = mpmath.mpc(real='0.16557346297260299593469891760848666757', imag='-0.1051567676638317543438121077781284792')
hshlarge[16] = mpmath.mpc(real='-0.30629355427024719992194845444203235552', imag='0.016899509913899181184724175873785881482')
hshsmall[16] = mpmath.mpc(real='0.05722449155236695572437324599829749594', imag='-0.038454138113815722157719208614586187829')

# zetazero(186626) (missing 4, 5, 12, 13, 14) 
hshlarge[2] = mpmath.mpc(real='-0.74761046769056389858803201254685251668', imag='-0.21871792498652291333368978367499503542')
hshsmall[2] = mpmath.mpc(real='0.1278510189123665310162669050932697417', imag='-0.12172035965570846546636201429901483512')
hshlarge[3] = mpmath.mpc(real='-0.20064440623908394507468163194957234451', imag='-0.56923796550847350610812481857344304629')
hshsmall[3] = mpmath.mpc(real='0.29621992610921563183139199263144109747', imag='-0.00014648574997752365943306591263218131331')
hshlarge[6] = mpmath.mpc(real='-0.39909918164875534998848254486271460367', imag='0.28534126957407497029156629259252341291')
hshsmall[6] = mpmath.mpc(real='0.14602508424896761587846919543880394451', imag='0.035002558042361894158621118607171542661')
hshlarge[7] = mpmath.mpc(real='-0.44735411490476428062652767466997278482', imag='0.010162047861605597176525831750925613517')
hshsmall[7] = mpmath.mpc(real='0.076729045737185160267828886171508579108', imag='0.063960829589759241368799907069089597708')
hshlarge[8] = mpmath.mpc(real='-0.21944919654413829118428754560325876711', imag='-0.3993420150941372238363749580410202683')
hshsmall[8] = mpmath.mpc(real='0.19688555392825949376167571587951263993', imag='0.046509360664444593920113184521581751781')
hshlarge[9] = mpmath.mpc(real='-0.39837796783080544864314359193652018342', imag='-0.059445775406815352296666671395141557699')
hshsmall[9] = mpmath.mpc(real='0.083313994494363989064540641018729890857', imag='-0.049392654463176874288690776466479273884')
hshlarge[10] = mpmath.mpc(real='-0.38076977491862910070569792211634756417', imag='0.0033593247724124786512324368843927962292')
hshsmall[10] = mpmath.mpc(real='0.068237807175583201505880009292457977547', imag='-0.051564813450152460166881365323125874004')
hshlarge[11] = mpmath.mpc(real='-0.10239915853136010137100517855987184968', imag='0.46356801143892808784675146975725647606')
hshsmall[11] = mpmath.mpc(real='0.25482957719350360899886873794225303869', imag='-0.20342563047116927740510968609115337075')
hshlarge[15] = mpmath.mpc(real='-0.18623538924535822585159237140961029982', imag='-0.31172214098536969115666768132204366346')
hshsmall[15] = mpmath.mpc(real='0.13925638022728389019656685817478849413', imag='0.057833111331967067200450835297062028552')
hshlarge[16] = mpmath.mpc(real='-0.22561751812921975394853843108844437285', imag='0.25402855016100226788318496894771485963')
hshsmall[16] = mpmath.mpc(real='0.11948380519945528104438421422678115817', imag='-0.027675650953277637631584152471904247044')



# 5 - 6 math.exp(1.22475208054203 - 0.9741004278660732) - 2 * math.pi = -4.9983228792022665 and math.exp(1.22475208054203 + 0.9741004278660732) = 9.014663311839092
# 5 - 6 mpmath.mpc(real='0.013860955637531449918697562085847273529914', imag='0.62413234824969049357283008419981430490087')
# 5 - 6 math.exp(0.6241323482496904) = 1.8666256735799562 and 1.8666256735799562 * 2 * math.pi - math.e = 9.010073177782735

# eval_n(i, mpc_pow, re_pow, n, wt=1, bprint=True)
eval_n(2, 1, 1, 0.055707778010163757352)
eval_n(2, mpc_pow, 1, 0.055707778010163757352)
mpmath.mpf('1.4221232494665417124839455991597385054') + mpmath.mpf('0.57787675053345828347810243276491771946')
mpmath.mpc(real='0.000000000011748110717189344757096185754490550841', imag='-1.2154998099146943440141254195313693493e-12') + mpmath.mpc(real='0.71119427586221106687959728889137635253', imag='0.06191017772312175966563159737902262864')
mpmath.power(2, mpc_pow)
mpc(real='-0.40156722498628746061060121096582263213003', imag='1.3560028627612894489601963957458833096241')

class target:
    def __init__(self, i, t, mp, w, r):
        self.int = i
        self.tpl = t
        self.mpc_pow = mp
        self.iwt = w
        self.ire = r
    
    @property
    def i(self):
        return self.int

def find_n(tgt, iprec_hi, iprec_lo, iwt, ire, n, mpc_pow=1):
    mpmath.mp.prec = iprec_hi
    ipythag = 1
    if n > 2**12:
        ipow2, dpow2 = max(mpmath.log(n, 2), 24), 1
        this_exp = avg_exp(tgt, mpc_pow, ipythag, mpmath.power(2, 24), iweight)
        while mpmath.fabs(this_exp) < mpmath.fabs(tgt.i) and dpow2 <= 1/4096:
            ipow2 += dpow2
            prev_exp = this_exp
            this_exp = avg_exp(tgt, mpc_pow, ipythag, mpmath.power(2, ipow2), iwt)
            if mpmath.fabs(this_exp) > mpmath.fabs(tgt.i):
                ipow2 -= dpow2
                this_exp = prev_exp
                dpow2 /= 2
        n, dn = mpmath.power(2, ipow2), mpmath.power(2, ipow2 - 4)
    else:
        # n = mpmath.mpf(0.1)
        # n = mpmath.mpf(0.05)
        # i = mpmath.power(j, -mpmath.zetazero(izz))
        n = mpmath.mpf(2) if n > 2 else mpmath.mpf(n)
        this_exp = avg_exp(tgt, mpc_pow, ipythag, n, iwt)
        prev_exp = this_exp
        min_exp = this_exp
        min_nrot = 0
        nrot, drot = mpmath.mpf(0), mpmath.mpf(1/128)
        if type(tgt.i) is mpmath.mpc:
            n0, dn = n, mpmath.mpf(1/1024)
            nrot0, drot0 = nrot, drot
            iter = 0
            for imult in [1 + x / 32 + random.random() / 65536 for x in range(-6, 6 + 1)]:
                iter += 1
                #                                find_nrot(tgt, this_exp, n, dn, nrot, drot, mpc_pow=1, ipythag=1, iwt=1, jfirstloop=16384, jouterloop=3, jinnerloop=64)
                n1, min_exp1, min_nrot1, drot1 = find_nrot(tgt, this_exp, imult * n0, dn, nrot0, drot0, mpc_pow, 1, 1, 16384 if imult == 1 or iter == 1 or iter == 13 else 1024, 2, 128)
                if mpmath.fabs(min_exp1 - tgt.i) < mpmath.fabs(this_exp - tgt.i) and (abs(mpmath.fabs(min_exp1) - mpmath.fabs(tgt.i)) < 1/128 or mpmath.fabs(min_exp1) > mpmath.fabs(tgt.i)):
                    n = n1
                    min_exp = min_exp1
                    min_nrot = min_nrot1
                    drot = drot1
        
        this_exp = min_exp
        nrot = min_nrot
        bsubtract = mpmath.fabs(avg_exp(tgt, mpc_pow, ipythag, (n - 1/256) * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt)) > mpmath.fabs(avg_exp(tgt, mpc_pow, ipythag, n * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt))
        iter = 0
        if mpmath.fabs(this_exp) > mpmath.fabs(tgt.i):
            while iter < 96:
                iter += 1
                tmp_add = avg_exp(tgt, mpc_pow, ipythag, (n + 1/2**(iter + 8)) * mpmath.exp(mpmath.mpc(0, nrot * 2 * mpmath.pi())), iwt)
                tmp_sub = avg_exp(tgt, mpc_pow, ipythag, (n - 1/2**(iter + 8)) * mpmath.exp(mpmath.mpc(0, nrot * 2 * mpmath.pi())), iwt)
                if mpmath.fabs(tmp_add) < mpmath.fabs(this_exp) and mpmath.fabs(tmp_add) > mpmath.fabs(tgt.i):
                    n = mpmath.fadd(n, 1/2**(iter + 8))
                    prev_exp = this_exp
                    this_exp = tmp_add
                elif mpmath.fabs(tmp_sub) < mpmath.fabs(this_exp) and mpmath.fabs(tmp_sub) > mpmath.fabs(tgt.i):
                    n = mpmath.fsub(n, 1/2**(iter + 8))
                    prev_exp = this_exp
                    this_exp = tmp_sub
        else:
            while mpmath.fabs(this_exp) < mpmath.fabs(tgt.i) and n > 2/256 and iter < 1024:
                iter += 1
                n += -1/256 if bsubtract else 1/256
                prev_exp = this_exp
                this_exp = avg_exp(tgt, mpc_pow, ipythag, n * mpmath.exp(mpmath.mpc(0, nrot * 2 * mpmath.pi())), iwt)
                if abs(mpmath.fabs(this_exp) - mpmath.fabs(prev_exp)) < 1/1024 and abs(mpmath.fabs(this_exp) - mpmath.fabs(tgt.i)) < 1/128:
                    break
        try:
            # n = mpmath.mpf('0.081287065089707549731534553317833694836201')
            n1 = mpmath.fmul(n, mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)))
            n2 = mpmath.findroot(lambda z: avg_exp(tgt, mpc_pow, ipythag, z, iwt) - i, n1)
            # avg_exp(tgt, mpc_pow, ipythag, n1, iwt) - i
            return n2
        except:
            pass
        dn = min(mpmath.fdiv(n, 256), mpmath.mpf(1/256)) + mpmath.fdiv(0.25 + random.random(), 1024)
        if mpmath.fabs(prev_exp) > mpmath.fabs(this_exp):
            # this_exp = prev_exp
            prev_exp = avg_exp(tgt, mpc_pow, ipythag, ((n + 1/256) if bsubtract else (n - 1/256)) * mpmath.exp(mpmath.mpc(0, nrot * 2 * mpmath.pi())), iwt)
    
    # this_exp = avg_exp(tgt, mpc_pow, ipythag, n, iwt)
    # prev_exp = this_exp
    tol = mpmath.power(2, -mpmath.mp.prec + 2)
    iter, iter_rot, maxiter, ireset = 0, 0, 2**12, 0
    mpmath.mp.prec = iprec_hi
    if n > 2**12:
        while mpmath.fabs(this_exp) < mpmath.fabs(tgt.i) and dn > tol and iter < maxiter:
            iter += 1
            n = mpmath.fadd(n, dn)
            prev_exp = this_exp
            this_exp = avg_exp(tgt, mpc_pow, ipythag, n, iweight)
            if mpmath.fabs(this_exp) > mpmath.fabs(tgt.i):
                n = mpmath.fsub(n, dn)
                dn = mpmath.fdiv(dn, 2)
                this_exp = avg_exp(tgt, mpc_pow, ipythag, n, iweight)
                while mpmath.fabs(this_exp) > mpmath.fabs(tgt.i) and iter < maxiter:
                    iter += 1
                    n = mpmath.fsub(n, dn)
                    this_exp = avg_exp(tgt, mpc_pow, ipythag, n, iweight)
            if iter >= maxiter and dn > 1 and ireset < 4:
                ireset += 1
                iter = 0
    else:
        # prev_exp = this_exp
        # this_exp = avg_exp(tgt, mpc_pow, ipythag, n * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * drot)), iwt)
        # nrot, drot = mpmath.mpf(0), mpmath.mpf(1/384)
        iter = 0
        for imult in [1 + x/512 for x in range(-16, 16 + 1)]:
            iter += 1
            drot = mpmath.mpf(1/384)
            #                            find_nrot(tgt, this_exp, n, dn, nrot, drot, mpc_pow=1, ipythag=1, iwt=1, jfirstloop=16384, jouterloop=3, jinnerloop=64)
            n1, min_exp1, min_nrot1, drot1 = find_nrot(tgt, this_exp, imult * n, dn, nrot, drot, mpc_pow, 1, 1, 16384 if imult == 1 or iter <= 2 or iter >= 32 else 1024, 2, 384)
            if mpmath.fabs(min_exp1 - tgt.i) < mpmath.fabs(min_exp - tgt.i):
                n = n1
                min_exp = min_exp1
                min_nrot = min_nrot1
        
        # mpmath.fabs(min_exp) - mpmath.fabs(tgt.i)
        this_exp = min_exp
        nrot = min_nrot
        drot = mpmath.fdiv(drot, 2)
        if mpmath.fabs(avg_exp(tgt, mpc_pow, ipythag, mpmath.fsub(n, dn) * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt)) < mpmath.fabs(this_exp):
            dn = -dn
        iter = 0
        dn0 = dn
        drot0 = drot
        while mpmath.fabs(this_exp) <= mpmath.fabs(tgt.i):
            iter += 1
            if iter >= 512 and iter % 64 == 0:
                if dn < 1024 * tol:
                    dn = mpmath.mpf(1/32 + random.random()/256)
                if drot < 1024 * tol:
                    drot = mpmath.mpf(1/128 + random.random()/1024)
                if iter >= 1024 and iter % 512 == 0:
                    print("Warning, too many iterations (" + str(iter) + ")")
            tmp_sub = avg_exp(tgt, mpc_pow, ipythag, mpmath.fsub(n, dn) * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt)
            tmp_add = avg_exp(tgt, mpc_pow, ipythag, mpmath.fadd(n, dn) * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt)
            if mpmath.fabs(tmp_sub) > mpmath.fabs(this_exp):
                n -= dn
                prev_exp = this_exp
                this_exp = tmp_sub
            elif mpmath.fabs(tmp_add) > mpmath.fabs(this_exp):
                n += dn
                prev_exp = this_exp
                this_exp = tmp_add
            else:
                dn = mpmath.fdiv(dn, 2)
                if dn <= 32 * tol:
                    dn = mpmath.mpf(128 * dn0 + random.random()/512)
                if iter % 2 == 0:
                    tmp_sub = avg_exp(tgt, mpc_pow, ipythag, n * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * mpmath.fsub(nrot, drot))), iwt)
                    tmp_add = avg_exp(tgt, mpc_pow, ipythag, n * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * mpmath.fadd(nrot, drot))), iwt)
                    if mpmath.fabs(tmp_sub) > mpmath.fabs(this_exp):
                        nrot -= drot 
                        prev_exp = this_exp
                        this_exp = tmp_sub
                    elif mpmath.fabs(tmp_add) > mpmath.fabs(this_exp):
                        nrot += drot
                        prev_exp = this_exp
                        this_exp = tmp_add
                    else:
                        drot = mpmath.fdiv(drot, 2)
                        if drot <= 32 * tol:
                            drot = mpmath.mpf(32 * drot0 + random.random()/4096)
        iter = 0
        while mpmath.fabs(this_exp) > mpmath.fabs(tgt.i) and abs(mpmath.fabs(this_exp) - mpmath.fabs(tgt.i)) > (tol if iter < 1536 else 1/1024) and abs(dn) > tol and iter < maxiter:
            iter += 1
            if mpmath.fadd(n, dn) < 0:
                dn = mpmath.fdiv(dn, 2)
            elif iter % 16 == 0:
                dn = mpmath.fdiv(dn, 2)
            n = mpmath.fadd(n, dn + mpmath.sign(dn) * mpmath.fdiv(dn * random.random(), 65536))
            if type(tgt.i) is mpmath.mpc and iter <= 2 or iter % 4 == 0:
                if mpmath.fabs(this_exp - tgt.i) >= mpmath.fabs(prev_exp - tgt.i):
                    for idiv in [1, 2, 4, 8]:
                        n1 = n - dn/8192 + 2 * random.random()/8192
                        tmp_add = avg_exp(tgt, mpc_pow, ipythag, n1 * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * (nrot + drot/idiv))), iwt)
                        tmp_sub = avg_exp(tgt, mpc_pow, ipythag, n1 * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * (nrot - drot/idiv))), iwt)
                        if mpmath.sign(tmp_add.real) == mpmath.sign(tgt.i.real) and mpmath.sign(tmp_add.imag) == mpmath.sign(tgt.i.imag) and mpmath.fabs(tmp_add - tgt.i) < mpmath.fabs(this_exp - tgt.i) and mpmath.fabs(tmp_add) >= mpmath.fabs(tgt.i):
                            n = n1
                            prev_exp = this_exp
                            this_exp = tmp_add
                            nrot = mpmath.fadd(nrot, drot/idiv)
                            break
                        elif mpmath.sign(tmp_sub.real) == mpmath.sign(tgt.i.real) and mpmath.sign(tmp_sub.imag) == mpmath.sign(tgt.i.imag) and mpmath.fabs(tmp_sub - tgt.i) < mpmath.fabs(this_exp - tgt.i) and mpmath.fabs(tmp_sub) >= mpmath.fabs(tgt.i):
                            n = n1
                            prev_exp = this_exp
                            this_exp = tmp_sub
                            nrot = mpmath.fsub(nrot, drot/idiv)
                            break
                iter_rot = 0
                if drot <= tol:
                    drot = mpmath.fmul(drot, 4)
                while mpmath.fabs(this_exp - tgt.i) <= mpmath.fabs(prev_exp - tgt.i) and drot > tol and iter_rot < 4:
                    iter_rot += 1
                    nrot = mpmath.fadd(nrot, drot)
                    prev_exp = this_exp
                    this_exp = avg_exp(tgt, mpc_pow, ipythag, n * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt)
                    if (mpmath.fabs(this_exp - tgt.i) >= mpmath.fabs(prev_exp - tgt.i) or mpmath.fabs(this_exp) < mpmath.fabs(tgt.i)) and iter_rot < 6:
                        nrot = mpmath.fsub(nrot, drot)
                        drot = mpmath.fdiv(drot, 2)
                        prev_exp = this_exp
                        this_exp = avg_exp(tgt, mpc_pow, ipythag, n * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt)
                        while (mpmath.fabs(this_exp - tgt.i) >= mpmath.fabs(prev_exp - tgt.i) or mpmath.fabs(this_exp) < mpmath.fabs(tgt.i)) and iter_rot < 6:
                            iter_rot += 1
                            nrot = mpmath.fsub(nrot, drot/2)
                            this_exp = avg_exp(tgt, mpc_pow, ipythag, n * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt)
            prev_exp = this_exp
            this_exp = avg_exp(tgt, mpc_pow, ipythag, n * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt)
            if this_exp == prev_exp:
                for idiv in [1, 2, 4, 8]:
                    tmp_add = 0.5 * i
                    tmp_sub = 0.5 * i
                    if mpmath.fadd(n, dn/idiv) > 0:
                        tmp_add = avg_exp(tgt, mpc_pow, ipythag, mpmath.fadd(n, dn/idiv) * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt)
                    if mpmath.fsub(n, dn/idiv) > 0:
                        tmp_sub = avg_exp(tgt, mpc_pow, ipythag, mpmath.fsub(n, dn/idiv) * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt)
                    if mpmath.sign(tmp_add.real) == mpmath.sign(tgt.i.real) and mpmath.sign(tmp_add.imag) == mpmath.sign(tgt.i.imag) and mpmath.fabs(tmp_add) > mpmath.fabs(tgt.i):
                        dn = mpmath.fdiv(dn, idiv)
                        n = mpmath.fadd(n, dn)
                        prev_exp = this_exp
                        this_exp = tmp_add
                        break
                    elif mpmath.sign(tmp_sub.real) == mpmath.sign(tgt.i.real) and mpmath.sign(tmp_sub.imag) == mpmath.sign(tgt.i.imag) and mpmath.fabs(tmp_sub) > mpmath.fabs(tgt.i):
                        dn = mpmath.fdiv(-dn, idiv)
                        n = mpmath.fadd(n, dn)
                        prev_exp = this_exp
                        this_exp = tmp_sub
                        break
            if mpmath.fabs(this_exp) < mpmath.fabs(tgt.i):
                if mpmath.fsub(n, dn) < 0 or mpmath.fadd(n, dn) < 0:
                    dn = mpmath.fdiv(dn, 2)
                if mpmath.fabs(avg_exp(tgt, mpc_pow, ipythag, mpmath.fsub(n, dn) * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt)) < mpmath.fabs(this_exp):
                    dn = -dn
                n = mpmath.fsub(n, dn)
                dn = mpmath.fdiv(dn, 2)
                this_exp = avg_exp(tgt, mpc_pow, ipythag, n * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt)
                iter1 = 0
                while mpmath.fabs(this_exp) < mpmath.fabs(tgt.i) and iter1 < 8:
                    iter1 += 1
                    if mpmath.fsub(n, dn) < 0:
                        dn = mpmath.fdiv(dn, 4)
                    n = mpmath.fsub(n, dn/4)
                    this_exp = avg_exp(tgt, mpc_pow, ipythag, n * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt)
        
        # avg_exp(tgt, mpc_pow, ipythag, n * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt)
        n1 = mpmath.fmul(n, mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)))
        iter = 0
        while iter < 20: 
            try:
                iter += 1
                itol = tol if iter <= 8 else mpmath.power(2, -64) if iter <= 12 else mpmath.power(2, -32) if iter <= 16 else mpmath.power(2, -16)
                if iter == 1:
                    n2 = mpmath.findroot(lambda z: avg_exp(tgt, mpc_pow, ipythag, z, iwt) - tgt.i, n1)
                else:
                    n2 = mpmath.findroot(lambda z: avg_exp(tgt, mpc_pow, ipythag, z, iwt) - tgt.i, n1 + mpmath.mpc(-1/4503599627370496 + mpmath.fdiv(random.random(), 2251799813685248), -1/4503599627370496 + mpmath.fdiv(random.random(), 2251799813685248)), x1=n1 - mpmath.mpc(1/8192 + random.random()/1024, 1/8192 + random.random()/1024), x2=n1 + mpmath.mpc(1/8192 + random.random()/1024, 1/8192 + random.random()/1024), tol=itol)
                if mpmath.fabs(n2 - n1) < 0.25:
                    break
            except:
                if iter < 20:
                   pass
                else:
                   raise
        # n1 = mpmath.mpc(real='-0.29293760459553386197687490240269375575825', imag='0.156578411795062646306461920404049832603')
        # n2 = mpmath.mpc(real='-0.28055534062118857455540951982247980930281', imag='0.15537151536636155274331918518997323262672')
        # n1 = mpmath.mpc(real='-0.48316822776560251116805473934093987113167', imag='0.32028362878067024883823132673327567041233')
        # n2 = mpmath.mpc(real='-0.48254414210036863423634610068360155775766', imag='0.32027540784431889306351473105854512074203')
        # avg_exp(tgt, mpc_pow, ipythag, n2, iwt) - i
    mpmath.mp.prec = iprec_lo
    return n2


def find_nrot(tgt, this_exp, n, dn, nrot, drot, mpc_pow=1, ipythag=1, iwt=1, jfirstloop=16384, jouterloop=3, jinnerloop=64):
    min_nrot = nrot
    min_exp = this_exp
    prev_exp = this_exp
    if (mpmath.sign(min_exp.real) != mpmath.sign(tgt.i.real)) or (mpmath.sign(min_exp.imag) != mpmath.sign(tgt.i.imag)):
        nrot0, drot0 = min_nrot, drot
        for imult in range(1, jfirstloop):
            nrot1 = (nrot0 - nrot0 / 1048576 + random.random() / 524288 + imult / jfirstloop)
            tmp = avg_exp(tgt, mpc_pow, 1, n * mpmath.exp(mpmath.mpc(0, nrot1 * 2 * mpmath.pi())), 1)
            if (mpmath.sign(tmp.real) == mpmath.sign(tgt.i.real)) and (mpmath.sign(tmp.imag) == mpmath.sign(tgt.i.imag)) and abs(mpmath.fabs(this_exp) - mpmath.fabs(tgt.i)) < 1/4096:
                min_exp = tmp
                min_nrot = nrot1
    
    for j1 in range(0, jouterloop):
        for j2 in range(0, jinnerloop):
            nrot = mpmath.fadd(nrot, drot)
            if mpmath.frac(nrot) == 0:
                nrot += mpmath.mpf(random.random() / 512)
            this_exp = avg_exp(tgt, mpc_pow, ipythag, n * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * nrot)), iwt)
            if mpmath.fabs(this_exp - tgt.i) < mpmath.fabs(min_exp - tgt.i) and (mpmath.fabs(this_exp) > mpmath.fabs(tgt.i) or abs(mpmath.fabs(this_exp) - mpmath.fabs(tgt.i)) < abs(dn/1024)):
                if (mpmath.sign(min_exp.real) != mpmath.sign(tgt.i.real)) or (mpmath.sign(min_exp.imag) != mpmath.sign(tgt.i.imag)):
                    nrot0, drot0 = min_nrot, drot
                    for imult in range(1, 48):
                        nrot1 = (nrot0 - nrot0 / 512 + random.random() / 256 + imult / 48)
                        tmp = avg_exp(tgt, mpc_pow, 1, n * mpmath.exp(mpmath.mpc(0, nrot1 * 2 * mpmath.pi())), 1)
                        if (mpmath.sign(tmp.real) == mpmath.sign(tgt.i.real)) and (mpmath.sign(tmp.imag) == mpmath.sign(tgt.i.imag)) and (mpmath.fabs(this_exp) > mpmath.fabs(tgt.i) or abs(mpmath.fabs(this_exp) - mpmath.fabs(tgt.i)) < abs(dn/1024)):
                            min_exp = tmp
                            min_nrot = nrot1
                else:
                    min_exp = this_exp
                    min_nrot = nrot
        
        if mpmath.fabs(min_exp) < mpmath.fabs(tgt.i):
            for imult in [1/32, 1/16, 1/8, 1/4, 1/2, 1, 2, 4, 8, 16]:
                if mpmath.fsub(n, imult * dn) > 0:
                    n1 = mpmath.fsub(n, mpmath.fdiv(random.random(), 65536) + imult * dn)
                    tmp = avg_exp(tgt, mpc_pow, ipythag, n1 * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * min_nrot)), iwt)
                    # if mpmath.fabs(tmp - tgt.i) < mpmath.fabs(min_exp - tgt.i) and mpmath.fabs(tmp) > mpmath.fabs(tgt.i):
                    if (mpmath.sign(tmp.real) == mpmath.sign(tgt.i.real)) and (mpmath.sign(tmp.imag) == mpmath.sign(tgt.i.imag)) and mpmath.fabs(tmp - tgt.i) < mpmath.fabs(min_exp - tgt.i) and (mpmath.fabs(tmp) > mpmath.fabs(min_exp) or abs(mpmath.fabs(tmp) - mpmath.fabs(tgt.i)) < abs(dn/1024)):
                        n = n1 
                        min_exp = tmp
            for imult in [1/32, 1/16, 1/8, 1/4, 1/2, 1, 2, 4, 8, 16]:
                if mpmath.fadd(n, imult * dn) > 0:
                    n1 = mpmath.fadd(n, mpmath.fdiv(random.random(), 65536) + imult * dn)
                    tmp = avg_exp(tgt, mpc_pow, ipythag, n1 * mpmath.exp(mpmath.mpc(0, 2 * mpmath.pi() * min_nrot)), iwt)
                    # if mpmath.fadd(n, imult * dn) > 0 and mpmath.fabs(tmp - tgt.i) < mpmath.fabs(min_exp - tgt.i) and mpmath.fabs(tmp) > mpmath.fabs(tgt.i):
                    if (mpmath.sign(tmp.real) == mpmath.sign(tgt.i.real)) and (mpmath.sign(tmp.imag) == mpmath.sign(tgt.i.imag)) and mpmath.fabs(tmp - tgt.i) < mpmath.fabs(min_exp - tgt.i) and (mpmath.fabs(tmp) > mpmath.fabs(min_exp) or abs(mpmath.fabs(tmp) - mpmath.fabs(tgt.i)) < abs(dn/1024)):
                        n = n1
                        min_exp = tmp
    return n, min_exp, min_nrot, drot




avg_exp(tgt, 1, 1, n, iweight) - i
avg_exp(tgt, 1, 1, n, iweight, 2) - i
mpmath.mp.prec = 192

def split_exp(tgt, mpc_pow, n):
    mpmath.mp.prec = mpmath.mp.prec * 2
    x1, x2, x3 = 0, 0, 0
    if tgt.tpl is not None:
        for i in range(tgt.tpl[0], tgt.tpl[1] + 1):
            mpc_pow_log_i = mpmath.fmul(mpc_pow, mpmath.log(i))
            x1 = mpmath.fadd(x1, mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, n)), n))
            x2 = mpmath.fadd(x2, mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, n)), mpmath.fdiv(mpc_pow_log_i, 2)))
            # x3 = mpmath.fadd(x3, mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, n)), mpmath.fadd(n, mpmath.fdiv(mpc_pow_log_i, 2))))
        x1 = mpmath.fadd(x1, mpmath.fdiv(x1, mpmath.sqrt(2)))
        x2 = mpmath.fadd(x2, mpmath.fdiv(x2, mpmath.sqrt(2)))
        x3 = mpmath.fdiv(tgt.i, mpmath.fadd(x1, x2))
    else:
        mpc_pow_log_i = mpmath.fmul(mpc_pow, mpmath.log(i))
        x1 = mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, n)), n)
        x2 = mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, n)), mpmath.fdiv(mpc_pow_log_i, 2))
        # x3 = mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, n)), mpmath.fadd(n, mpmath.fdiv(mpc_pow_log_i, 2)))
        x1 = mpmath.fdiv(x1, mpmath.sqrt(2))
        x2 = mpmath.fdiv(x2, mpmath.sqrt(2))
        x3 = mpmath.fdiv(tgt.i, mpmath.fadd(x1, x2) / 2)
    mpmath.mp.prec = int(mpmath.mp.prec / 2)
    return x1, x2, x3

def eval_n(tgt, mpc_pow, re_pow, n, wt=1, bprint=True):
    mpmath.mp.prec = mpmath.mp.prec * 2
    if tgt.tpl is not None:
        for i in range(tpl[0], tpl[1] + 1):
            mpc_pow_log_i = mpmath.fmul(mpc_pow, mpmath.log(i))
            f1 = mpmath.fadd(f1, mpmath.fdiv(mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, n)), mpmath.fadd(n, mpmath.fdiv(mpc_pow_log_i, 2))), 2))
            f2 = mpmath.fadd(f2, mpmath.fdiv(mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, n)), n), 2))
        # f3 = mpmath.fdiv(i, mpmath.fadd(f1, f2))
    else:
        mpc_pow_log_i = mpmath.fmul(mpc_pow, mpmath.log(tgt.i))
        f1 = mpmath.fdiv(mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, n)), mpmath.fadd(n, mpmath.fdiv(mpc_pow_log_i, 2))), 2)
        f2 = mpmath.fdiv(mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, n)), n), 2)
        # f3 = mpmath.fdiv(tgt.i, mpmath.fadd(f1, f2))
    mpmath.mp.prec = int(mpmath.mp.prec / 2)
    if bprint:
        if type(f1) is mpmath.mpf:
            # print("mpmath.mpf('" + str(f1) + "') + mpmath.mpf('" + str(f2) + "') * mpmath.mpf('" + str(f3) + "')")
            print("mpmath.mpf('" + str(f1) + "') + mpmath.mpf('" + str(f2) + "')")
        else:
            print("mpmath.mpc(real='" + str(f1.real) + "', imag='" + str(f1.imag) + "') + mpmath.mpc(real='" + str(f2.real) + "', imag='" + str(f2.imag) + "')")
    else:
        if type(f1) is mpmath.mpf:
            return "mpmath.mpf('" + str(f1) + "') + mpmath.mpf('" + str(f2) + "')"
        else:
            return "mpmath.mpc(real='" + str(f1.real) + "', imag='" + str(f1.imag) + "') + mpmath.mpc(real='" + str(f2.real) + "', imag='" + str(f2.imag) + "')"

# mpc_pow = 1
# re_pow = 2
# wt = 1
# n = -mpmath.mpf(0.5)
# (2 * f1**mpmath.fdiv(1, 40) + f2**mpmath.fdiv(1, 40))**(40)/(2 + 1)**(40)
def avg_exp(tgt, mpc_pow, re_pow, n, wt=1):
    rtn = mpmath.mpf(0)
    mpmath.mp.prec = mpmath.mp.prec * 2
    if tgt.tpl is not None:
        for i in range(tgt.tpl[0], tgt.tpl[1] + 1):
            mpc_pow_log_i = mpmath.fmul(mpc_pow, mpmath.log(i))
            f1 = mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, n)), mpmath.fadd(n, mpmath.fdiv(mpc_pow_log_i, 2)))
            f2 = mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, n)), n)
            if re_pow == 1:
                rtn = mpmath.fadd((-1)**(j - 1) * rtn, mpmath.fdiv(mpmath.fadd(mpmath.fmul(wt, f1), f2), mpmath.fadd(1, wt)))
            else:
                rtn = mpmath.fadd((-1)**(j - 1) * rtn, mpmath.fdiv(mpmath.power(mpmath.fadd(mpmath.fmul(wt, mpmath.power(f1, re_pow)), mpmath.power(f2, re_pow)), mpmath.fdiv(1, re_pow)), mpmath.power(mpmath.fadd(1, wt), mpmath.fdiv(1, re_pow))))
    else:
        mpc_pow_log_i = mpmath.fmul(mpc_pow, mpmath.log(tgt.i))
        f1 = mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, n)), mpmath.fadd(n, mpmath.fdiv(mpc_pow_log_i, 2)))
        f2 = mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpc_pow_log_i, n)), n)
        if re_pow == 1:
            rtn = mpmath.fdiv(mpmath.fadd(mpmath.fmul(wt, f1), f2), mpmath.fadd(1, wt))
        else:
            rtn = mpmath.fdiv(mpmath.power(mpmath.fadd(mpmath.fmul(wt, mpmath.power(f1, re_pow)), mpmath.power(f2, re_pow)), mpmath.fdiv(1, re_pow)), mpmath.power(mpmath.fadd(1, wt), mpmath.fdiv(1, re_pow)))
    mpmath.mp.prec = int(mpmath.mp.prec / 2)
    return rtn


lenfactorscount = 0
hshfactorscount = {}
def factorscount(n, iteration=0, maxiter=1, busecache=False, bexpand=False):
    global lenfactorscount
    global hshfactorscount
    rslt = {}
    if busecache:
        if n <= lenfactorscount:
            if n in hshfactorscount:
                return {k:v for k, v in hshfactorscount[n].items()}
        else:
            for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:
                while n % p == 0:
                    n /= p
                    rslt[p] = 1 if p not in rslt else rslt[p] + 1
                    if n <= lenfactorscount and n in hshfactorscount:
                        for k in hshfactorscount[n].keys():
                            rslt[k] = rslt[k] + hshfactorscount[n][k] if k in rslt else hshfactorscount[n][k]
                        return rslt
    global aryprimes
    isqrtn = int(math.sqrt(n))
    if iteration == 0 and bexpand:
        # if isqrtn > 94906265:
        if isqrtn > 536870909:
            isqrtn = 536870909
            if aryprimes[-1] < 536870909:
                aryprimes = primesieve.primes(536870909)
        elif aryprimes[-1] < isqrtn:
            aryprimes = primesieve.primes(isqrtn)
    bbreak = False
    # for p in aryprimes:
    for p in primesieve.primes(isqrtn):
        while n % p == 0:
            n = n/p
            rslt[p] = 1 if p not in rslt else rslt[p] + 1
            if n == 1:
                bbreak = True
                break
            else:
                isqrtn = int(math.sqrt(n))
                if busecache and n <= lenfactorscount:
                    for k in hshfactorscount[n].keys():
                        rslt[k] = rslt[k] + hshfactorscount[n][k] if k in rslt else hshfactorscount[n][k]
                        n /= (k**hshfactorscount[n][k])
                    if n == 1:
                        bbreak = True
                        break
        if p >= isqrtn or bbreak:
            break
    if n != 1 and int(n) not in rslt:
        # if iteration < maxiter:
        if False:
            # note, calling factors() from factorscount()
            for p in factors(n, iteration + 1, maxiter=maxiter, busecache=busecache):
                rslt[int(p)] = 1 if int(p) not in rslt else rslt[int(p)] + 1
        else:
            rslt[int(n)] = 1
    # if busecache and n <= lenfactorscount:
    #     hshfactorscount[n] = rslt
    return rslt, sorted([k for k in rslt.keys()])



# 
# all items in the array must be primes!
# 
def calc_a6(a, ilen):
    if ilen == 2:
        if a[0] != a[1]:
            return fractions.Fraction(1, a[0]) + fractions.Fraction(1, a[1]) - fractions.Fraction(1, a[0]*a[1])
        else:
            return fractions.Fraction(1, a[0]*a[1])
    elif ilen == 3:
        ca6 = [fractions.Fraction(1, 4294967296),] * 4
        if a[0] not in [a[1], a[2]]:
            ca6[0] = calc_a6([a[0], a[1]*a[2]], 2)
        if a[1] not in [a[0], a[2]]:
            ca6[1] = calc_a6([a[1], a[0]*a[2]], 2)
        if a[2] not in [a[0], a[1]]:
            ca6[2] = calc_a6([a[2], a[0]*a[1]], 2)
        if a[0] not in [a[1], a[2]] and a[1] != a[2]:
            ca6[3] = fractions.Fraction(1, a[0]) + fractions.Fraction(1, a[1]) - fractions.Fraction(1, a[0]*a[1])  + fractions.Fraction(1, a[2]) - fractions.Fraction(1, a[0]*a[2]) - fractions.Fraction(1, a[1]*a[2]) + fractions.Fraction(1, a[0]*a[1]*a[2])
        else:
            ca6[3] = fractions.Fraction(1, math.prod(a))
        minden, minca6 = ca6[0].denominator, ca6[0]
        for ca in ca6[1:]:
            if ca.denominator < minden:
                minden, minca6 = ca.denominator, ca
        return minca6
    elif ilen == 4:
        ca6 = [fractions.Fraction(1, 4294967296),] * 7
        if False:
            if a[0] not in [a[1], a[2], a[3]]:
                ca6[ 0] = calc_a6([a[0], a[1]*a[2]*a[3]], 2)
            if a[1] not in [a[0], a[2], a[3]]:
                ca6[ 1] = calc_a6([a[1], a[0]*a[2]*a[3]], 2)
            if a[2] not in [a[0], a[1], a[3]]:
                ca6[ 2] = calc_a6([a[2], a[0]*a[1]*a[3]], 2)
            if a[3] not in [a[0], a[1], a[2]]:
                ca6[ 3] = calc_a6([a[3], a[0]*a[1]*a[2]], 2)
            if a[0] not in [a[2], a[3]] and a[1] not in [a[2], a[3]]:
                ca6[ 4] = calc_a6([a[0]*a[1], a[2]*a[3]], 2)
            if a[0] not in [a[1], a[3]] and a[2] not in [a[1], a[3]]:
                ca6[ 5] = calc_a6([a[0]*a[2], a[1]*a[3]], 2)
            if a[0] not in [a[1], a[2]] and a[3] not in [a[1], a[2]]:
                ca6[ 6] = calc_a6([a[0]*a[3], a[1]*a[2]], 2)
        if a[0] not in [a[2], a[3]] and a[1] not in [a[2], a[3]]:
            ca6[ 0] = calc_a6([a[0], a[1], a[2]*a[3]], 3)
        if a[0] not in [a[1], a[3]] and a[2] not in [a[1], a[3]]:
            ca6[ 1] = calc_a6([a[0], a[2], a[1]*a[3]], 3)
        if a[0] not in [a[1], a[2]] and a[3] not in [a[1], a[2]]:
            ca6[ 2] = calc_a6([a[0], a[3], a[1]*a[2]], 3)
        if a[1] not in [a[2], a[3]] and a[2] not in [a[0], a[3]]:
            ca6[ 3] = calc_a6([a[1], a[2], a[0]*a[3]], 3)
        if a[1] not in [a[0], a[2]] and a[3] not in [a[0], a[2]]:
            ca6[ 4] = calc_a6([a[1], a[3], a[0]*a[2]], 3)
        if a[2] not in [a[0], a[1]] and a[3] not in [a[0], a[1]]:
            ca6[ 5] = calc_a6([a[2], a[3], a[0]*a[1]], 3)
        if a[0] not in [a[1], a[2], a[3]] and a[1] not in [a[2], a[3]] and a[2] != a[3]:
            ca6[ 6] = fractions.Fraction(1, a[0]) + fractions.Fraction(1, a[1]) - fractions.Fraction(1, a[0]*a[1])  + fractions.Fraction(1, a[2]) - fractions.Fraction(1, a[0]*a[2]) - fractions.Fraction(1, a[1]*a[2]) + fractions.Fraction(1, a[0]*a[1]*a[2]) + fractions.Fraction(1, a[3]) - fractions.Fraction(1, a[0]*a[3]) - fractions.Fraction(1, a[1]*a[3]) - fractions.Fraction(1, a[2]*a[3]) + fractions.Fraction(1, a[0]*a[1]*a[3]) + fractions.Fraction(1, a[0]*a[2]*a[3]) + fractions.Fraction(1, a[1]*a[2]*a[3]) - fractions.Fraction(1, a[0]*a[1]*a[2]*a[3])
        else:
            ca6[ 6] = fractions.Fraction(1, math.prod(a))
        minden, minca6 = ca6[0].denominator, ca6[0]
        for ca in ca6[1:]:
            if ca.denominator < minden:
                minden, minca6 = ca.denominator, ca
        return minca6
    elif ilen == 5:
        ca6 = [fractions.Fraction(1, 4294967296),] * 11
        if False:
            ca6[ 0] = calc_a6([a[0], a[1]*a[2]*a[3]*a[4]], 2)
            ca6[ 1] = calc_a6([a[1], a[0]*a[2]*a[3]*a[4]], 2)
            ca6[ 2] = calc_a6([a[2], a[0]*a[1]*a[3]*a[4]], 2)
            ca6[ 3] = calc_a6([a[3], a[0]*a[1]*a[2]*a[4]], 2)
            ca6[ 4] = calc_a6([a[4], a[0]*a[1]*a[2]*a[3]], 2)
            ca6[ 5] = calc_a6([a[0]*a[1], a[2]*a[3]*a[4]], 2)
            ca6[ 6] = calc_a6([a[0]*a[2], a[1]*a[3]*a[4]], 2)
            ca6[ 7] = calc_a6([a[0]*a[3], a[1]*a[2]*a[4]], 2)
            ca6[ 8] = calc_a6([a[1]*a[2], a[0]*a[3]*a[4]], 2)
            ca6[ 9] = calc_a6([a[1]*a[3], a[0]*a[2]*a[4]], 2)
            ca6[10] = calc_a6([a[1]*a[4], a[0]*a[2]*a[3]], 2)
            ca6[11] = calc_a6([a[2]*a[3], a[0]*a[1]*a[4]], 2)
            ca6[12] = calc_a6([a[2]*a[4], a[0]*a[1]*a[3]], 2)
            ca6[13] = calc_a6([a[3]*a[4], a[0]*a[1]*a[2]], 2)
            ca6[14] = calc_a6([a[0], a[1], a[2]*a[3]*a[4]], 3)
            ca6[15] = calc_a6([a[0], a[2], a[1]*a[3]*a[4]], 3)
            ca6[16] = calc_a6([a[0], a[3], a[1]*a[2]*a[4]], 3)
            ca6[17] = calc_a6([a[0], a[4], a[1]*a[2]*a[2]], 3)
            ca6[18] = calc_a6([a[1], a[2], a[0]*a[3]*a[4]], 3)
            ca6[19] = calc_a6([a[1], a[3], a[0]*a[2]*a[4]], 3)
            ca6[20] = calc_a6([a[1], a[4], a[0]*a[3]*a[4]], 3)
            ca6[21] = calc_a6([a[2], a[3], a[0]*a[1]*a[4]], 3)
            ca6[22] = calc_a6([a[2], a[4], a[0]*a[1]*a[3]], 3)
            ca6[23] = calc_a6([a[3], a[4], a[0]*a[1]*a[2]], 3)
            ca6[24] = calc_a6([a[0], a[1]*a[2], a[3]*a[4]], 3)
            ca6[25] = calc_a6([a[0], a[1]*a[3], a[2]*a[4]], 3)
            ca6[26] = calc_a6([a[0], a[1]*a[4], a[3]*a[4]], 3)
            ca6[27] = calc_a6([a[0], a[2]*a[3], a[1]*a[4]], 3)
        if a[0] not in [a[3], a[4]] and a[1] not in [a[3], a[4]] and a[2] not in [a[3], a[4]]:
            ca6[ 0] = calc_a6([a[0], a[1], a[2], a[3]*a[4]], 4)
        if a[0] not in [a[2], a[4]] and a[1] not in [a[2], a[4]] and a[3] not in [a[2], a[4]]:
            ca6[ 1] = calc_a6([a[0], a[1], a[3], a[2]*a[4]], 4)
        if a[0] not in [a[2], a[3]] and a[1] not in [a[2], a[3]] and a[4] not in [a[2], a[3]]:
            ca6[ 2] = calc_a6([a[0], a[1], a[4], a[2]*a[3]], 4)
        if a[0] not in [a[1]*a[4]] and a[2] not in [a[1]*a[4]] and a[3] not in [a[1]*a[4]]:
            ca6[ 3] = calc_a6([a[0], a[2], a[3], a[1]*a[4]], 4)
        if a[0] not in [a[1]*a[3]] and a[2] not in [a[1]*a[3]] and a[4] not in [a[1]*a[3]]:
            ca6[ 4] = calc_a6([a[0], a[2], a[4], a[1]*a[3]], 4)
        if a[0] not in [a[1]*a[2]] and a[3] not in [a[1]*a[2]] and a[4] not in [a[1]*a[2]]:
            ca6[ 5] = calc_a6([a[0], a[3], a[4], a[1]*a[2]], 4)
        if a[1] not in [a[0]*a[4]] and a[2] not in [a[0]*a[4]] and a[3] not in [a[0]*a[4]]:
            ca6[ 6] = calc_a6([a[1], a[2], a[3], a[0]*a[4]], 4)
        if a[1] not in [a[0]*a[3]] and a[2] not in [a[0]*a[3]] and a[4] not in [a[0]*a[3]]:
            ca6[ 7] = calc_a6([a[1], a[2], a[4], a[0]*a[3]], 4)
        if a[1] not in [a[0]*a[2]] and a[3] not in [a[0]*a[2]] and a[4] not in [a[0]*a[2]]:
            ca6[ 8] = calc_a6([a[1], a[3], a[4], a[0]*a[2]], 4)
        if a[2] not in [a[0]*a[1]] and a[3] not in [a[0]*a[1]] and a[4] not in [a[0]*a[1]]:
            ca6[ 9] = calc_a6([a[2], a[3], a[4], a[0]*a[1]], 4)
        if a[0] not in [a[1], a[2], a[3], a[4]] and a[1] not in [a[2], a[3], a[4]] and a[2] not in [a[3], a[4]] and a[3] != a[4]:
            ca6[10] = fractions.Fraction(1, a[0]) + fractions.Fraction(1, a[1]) - fractions.Fraction(1, a[0]*a[1])  + fractions.Fraction(1, a[2]) - fractions.Fraction(1, a[0]*a[2]) - fractions.Fraction(1, a[1]*a[2]) + fractions.Fraction(1, a[0]*a[1]*a[2]) + fractions.Fraction(1, a[3]) - fractions.Fraction(1, a[0]*a[3]) - fractions.Fraction(1, a[1]*a[3]) - fractions.Fraction(1, a[2]*a[3]) + fractions.Fraction(1, a[0]*a[1]*a[3]) + fractions.Fraction(1, a[0]*a[2]*a[3]) + fractions.Fraction(1, a[1]*a[2]*a[3]) - fractions.Fraction(1, a[0]*a[1]*a[2]*a[3])
        else:
            ca6[10] = fractions.Fraction(1, math.prod(a))
        minden, minca6 = ca6[0].denominator, ca6[0]
        for ca in ca6[1:]:
            if ca.denominator < minden:
                minden, minca6 = ca.denominator, ca
        return minca6



math.log((256)**3, 2)  # 24.0
math.log((128)**3, 2)  # 21.0
len(aryprimes[25:153]) # 128

# 1024**(2/3) = 101
# aryprimes.index(101) = 25
aryprimes = primesieve.primes(1024**2)
aryprimes = primesieve.primes(1024)     # len = 172
arycoords = []
t1, dt = time.time(), 0
for ap1 in range(0, len(aryprimes[25:128])):
    for ap2 in range(ap1, len(aryprimes[25:128])):
        for ap3 in range(ap2, len(aryprimes[25:128])):
            arycoords.append([(aryprimes[ap1], aryprimes[ap2], aryprimes[ap3], aryprimes[ap1]*aryprimes[ap2]*aryprimes[ap3]), calc_a6([aryprimes[ap1], aryprimes[ap2], aryprimes[ap3]], 3)])
        dt = time.time() - t1

arycoords = sorted(arycoords, key=lambda itm: itm[0][3])

_ = matplotlib.pyplot([ac[0][3] for ac in arycoords], [ac[1] for ac in arycoords])
matplotlib.pyplot.grid()
matplotlib.pyplot.show()



aryprimes = primesieve.primes(10**6)
setprimes = frozenset(aryprimes)
aryprimes.index(10**4 + 7) # 1229
aryprimes.index(10**5 + 1) # 9592

p1 = aryprimes[int(1229 + random.random() * (9591 - 1229))]
p2 = aryprimes[int(1229 + random.random() * (9591 - 1229))]
p1 = aryprimes[int(9592 + random.random() * (78497 - 9592))]
p2 = aryprimes[int(9592 + random.random() * (78497 - 9592))]

p1p2 = p1 * p2
p1p2c6 = calc_a6([p1, p2], 2)


def convertprimes(hsh, ary):
    for tpl in [(2, 3, 7), (2, 5, 11), (2, 7, 13), (2, 11, 23), (2, 13, 23), (2, 17, 31), (2, 19, 37), (3, 7, 23), (3, 11, 31), (3, 13, 37), (5, 7, 37), (5, 11, 53), (5, 13, 67)]:
        if tpl[0] in hsh and tpl[1] in hsh and tpl[2] not in hsh:
            _ = hsh.pop(tpl[0])
            _ = hsh.pop(tpl[1])
            ary.remove(tpl[0])
            ary.remove(tpl[1])
            hsh[tpl[2]] = 1 if tpl[2] not in hsh else hsh[tpl[2]] + 1
            ary.append(tpl[2])
            break

def countduplicates(hsh, ary):
    bok, iduplicates = True, 0
    for a in ary:
        if hsh[a] > 1:
            if hsh[a] == 2:
                iduplicates += 1
            else:
                bok = False
    if iduplicates > 1:
        bok = False
    return bok, iduplicates

def get1(i1):
    hshfactors1, arykeys1 = factorscount(i1)
    bok, iduplicates = countduplicates(hshfactors1, arykeys1)
    while len(arykeys1) > 4 or max(hshfactors1.values()) > 2 or not bok or iduplicates > 1:
        i1 += 1
        hshfactors1, arykeys1 = factorscount(i1)
        if max(hshfactors1.values()) <= 2 and len(arykeys1) >= 3:
            convertprimes(hshfactors1, arykeys1)
        bok, iduplicates = countduplicates(hshfactors1, arykeys1)
    return i1, hshfactors1, arykeys1, bok, iduplicates

def get2(i2):
    hshfactors2, arykeys2 = factorscount(i2)
    bok, iduplicates = countduplicates(hshfactors2, arykeys2)
    while len(arykeys2) > 4 or max(hshfactors1.values()) > 2 or not bok or iduplicates > 1:
        i2 += 1
        hshfactors1, arykeys1 = factorscount(i2)
        if max(hshfactors2.values()) <= 2 and len(arykeys2) >= 3:
            convertprimes(hshfactors2, arykeys2)
        bok, iduplicates = countduplicates(hshfactors2, arykeys2)
    return i2, hshfactors2, arykeys2, bok, iduplicates


isqrtp1p2 = round(math.sqrt(p1p2))
if isqrtp1p2 % 2 == 0:
    isqrtp1p2 -= 1
while isqrtp1p2 not in setprimes:
    isqrtp1p2 -= 2
aryprimes.index(isqrtp1p2) # 55412
aryprimes.index(10**5 + 3) #  9592

arysmallprimes = sorted([k for k in hshsmallprimes.keys()])
hshsmallprimes = {1/2:2}
frac = 1/2
for p in aryprimes[2:25]:
    frac = frac + (1 - frac) / p
    hshsmallprimes[frac] = p
aryprimes = primesieve.primes(2 * 10**6) # 148,933
setprimes = frozenset(aryprimes)
bverbose = False
t1, dt, iter = time.time(), 0, 0
while len(aryfactors) < 144 and iter < 2000:
    iter += 1
    ifactors = int(round(1.501 + random.random() * 3.499))
    iary = [0,] * ifactors
    t2 = time.time()
    if ifactors == 2:
        iary[0] = int(round(10**5 + 250 + 1 + random.random() * (10**6 - 2 * 10**5 - 250 - 1)))
        if iary[0] % 2 == 0:
            iary[0] += 1
        while (iary[0] not in setprimes):
            iary[0] += -2 if iary[0] > isqrtp1p2 and iary[0] >= 5 else 2
        ap0 = aryprimes.index(iary[0])
        while round(p1p2/iary[0], 1) not in setprimes:
            ap0 += -1 if iary[0] > isqrtp1p2 else 1
            iary[0] = aryprimes[ap0]
        iary[1] = int(round(p1p2/iary[0]))
    elif ifactors == 3:
        r = random.random()
        if r < arysmallprimes[-1]:
            for asp in arysmallprimes:
                if r < asp:
                    iary[0] = hshsmallprimes[asp]
                    break
        else:
            iary[0] = aryprimes[25 + int(round(random.random() * (9592 - 25)))]
        iary[1] = int(round(10**5 + 250 + 1 + random.random() * (10**6 - 2 * 10**5 - 250 - 1) / iary[0]))
        if iary[1] % 2 == 0:
            iary[1] -= 1
        while (iary[1] not in setprimes):
            iary[1] += -2 if iary[0] * iary[1] > isqrtp1p2 else 2
        ap1 = aryprimes.index(iary[1])
        iter2 = 0
        maxiter2 = 2**18
        while (iter2 < maxiter2 and round(p1p2/(iary[0] * iary[1]), 1) not in setprimes) or (iter2 >= maxiter2 and round(p1p2/(iary[0] * iary[1]), 0) not in setprimes):
            iter2 += 1
            ap1 += -1 if iary[0] * iary[1] > isqrtp1p2 and ap1 > 0 else 1
            iary[1] = aryprimes[ap1]
            if iter2 > 2 * maxiter2:
                break
        if iter2 < 2 * maxiter2:
            iary[2] = int(round(p1p2/(iary[0] * iary[1])))
    elif ifactors == 4:
        ia = -1
        iter1 = 0
        while iter1 < 2 or ia < 1:
            iter1 += 1
            ia += 1
            r = random.random()
            while iary[ia] == 0:
                if r < arysmallprimes[-1]:
                    for asp in arysmallprimes:
                        if r < asp:
                            if hshsmallprimes[asp] not in iary:
                                iary[ia] = hshsmallprimes[asp]
                            else:
                                r = random.random()
                                ia -= 1
                            # break
                else:
                    ap = aryprimes[25 + int(round(random.random() * (9592 - 25)))]
                    if (ap not in iary) and (ia < 1 or iary[0] * ap < p1p2 / 1009):
                        iary[ia] = ap
                    else:
                        r = random.random()
                        ia -= 1
        while iary[2] == 0:
            if iary[0] * iary[1] > isqrtp1p2:
                ap = aryprimes[int(random.random() * 25)]
                if ap not in iary:
                    iary[2] = ap
            else:
                iary[2] = int(round(10**5 + 250 + 1 + random.random() * (10**6 - 2 * 10**5 - 250 - 1) / (iary[0] * iary[1])))
                if (iary[0] * iary[1] * iary[2]) > p1p2 / 1009:
                    iary[2] = 0
                if iary[2] % 2 == 0:
                    iary[2] += 1
                while iary[2] not in setprimes:
                    iary[2] += -2 if (iary[0] * iary[1] * iary[2]) > p1p2 / 1009 and iary[2] > 3 else 2
        init2 = aryprimes.index(iary[2])
        ap2 = init2
        iter2 = 0
        maxiter2 = 2**18
        while (iter2 < maxiter2 and round(p1p2/(iary[0] * iary[1] * iary[2]), 1) not in setprimes) or (iter2 >= maxiter2 and round(p1p2/(iary[0] * iary[1] * iary[2]), 0) not in setprimes):
            iter2 += 1
            ap2 += -1 if (iary[0] * iary[1] * iary[2]) > p1p2 / 1009 and ap2 > 0 else 1
            iary[2] = aryprimes[ap2]
            if ap2 == 0:
                ap2 = max(init2, aryprimes.index(1009) + 1)
                if iter2 > maxiter2:
                    break
            if iter2 > 2 * maxiter2:
                break
        iary[3] = int(round(p1p2/(iary[0] * iary[1] * iary[2]), 0))
    elif ifactors == 5:
        ia = -1
        iter1 = 0
        while iter1 < 3 or ia < 2:
            iter1 += 1
            ia += 1
            r = random.random()
            while iary[ia] == 0:
                if r < arysmallprimes[-1]:
                    for asp in arysmallprimes:
                        if r < asp:
                            if hshsmallprimes[asp] not in iary:
                                iary[ia] = hshsmallprimes[asp]
                            else:
                                r = random.random()
                                ia -= 1
                            # break
                else:
                    ap = aryprimes[25 + int(round(random.random() * ((9592 + 55412) / 2 - 25)))]
                    if (ap not in iary) and (ia < 2 or iary[0] * iary[1] * ap < p1p2 / 10007):
                        iary[ia] = ap
                    else:
                        r = random.random()
                        ia -= 1        
        while iary[3] == 0:
            if iary[0] * iary[1] * iary[2] > isqrtp1p2:
                ap = aryprimes[int(random.random() * 25)]
                if ap not in iary:
                    iary[3] = ap
            else:
                iary[3] = int(round(10**3 + random.random() * (10**5 - 10**3) / (iary[0] * iary[1] * iary[2])))
                if (iary[0] * iary[1] * iary[2] * iary[2]) > p1p2 / 10007:
                    iary[3] = 0
                if iary[3] % 2 == 0:
                    iary[3] += 1
                while iary[3] not in setprimes:
                    iary[3] += -2 if (iary[0] * iary[1] * iary[2] * iary[3]) > p1p2 / 10007 and iary[3] > 3 else 2
        
        init3 = aryprimes.index(iary[3])
        ap3 = init3
        iter2 = 0
        maxiter2 = 2**18
        while (iter2 < maxiter2 and round(p1p2/(iary[0] * iary[1] * iary[2] * iary[3]), 1) not in setprimes) or (iter2 >= maxiter2 and round(p1p2/(iary[0] * iary[1] * iary[2] * iary[3]), 0) not in setprimes):
            iter2 += 1
            ap3 += -1 if (iary[0] * iary[1] * iary[2] * iary[3]) > p1p2 / 10007 and ap3 > 0 else 1
            iary[3] = aryprimes[ap3]
            if ap3 == 0:
                ap3 = max(init3, aryprimes.index(10007) + 1)
                if iter2 > maxiter2:
                    break
            if iter2 > 2 * maxiter2:
                break
        iary[4] = int(round(p1p2/(iary[0] * iary[1] * iary[2] * iary[3]), 0))
        
    iary = sorted(iary)
    bok = True
    for ia in range(0, ifactors - 1):
        if iary[ia] in iary[(ia + 1):]:
            bok = False
    for ia in iary:
        if ia == 0 or ia not in setprimes:
            bok = False
    imod = math.prod(iary) % p1p2 if math.prod(iary) > p1p2 else p1p2 % math.prod(iary)
    if bok and imod/p1p2 < 6387237/p1p2:
        if bverbose:
            dt2 = round((time.time() - t2)/60, 2)
            print(f"ifactors {ifactors}, time elapsed {dt2} minutes")
        
        aryfactors.append((math.prod(iary), tuple(iary), calc_a6(iary, len(iary))))
        dt = time.time() - t1
        for hc in hshcount.keys():
            if hc in iary:
                hshcount[hc] += 1


p1p2/6387237 # 73409.4 or p1p2**(1/2.4)

sorted([af[0] % p1p2 if af[0] > p1p2 else p1p2 % af[0] for af in aryfactors])[:12]
sorted([af[0] % p1p2 if af[0] > p1p2 else p1p2 % af[0] for af in aryfactors])[-12:]
af = -1
while af < len(aryfactors):
    af += 1
    imod = aryfactors[af][0] % p1p2 if aryfactors[af][0] > p1p2 else p1p2 % aryfactors[af][0]
    if imod > 6387237:
        aryfactors.remove(aryfactors[af])
        af -= 1




# 484,027 * 968,713 = 468,883,247,251
# (fractions.Fraction(1, p1) + fractions.Fraction(1, p2) - fractions.Fraction(1, p1*p2)) 
# 1452739 / 468883247251 # (p1 + p2 - 1) / p1p2
# 1 / 322758.07784536656 # 1 / p1p2**(1/2.118592312190858)
aryfactors = sorted(aryfactors, key=lambda ary: ary[0])
_ = matplotlib.pyplot.scatter([af[0] for af in aryfactors if af[2] < 0.0002 and len(af[1]) == 2], [float(af[2]) for af in aryfactors if af[2] < 0.0002 and len(af[1]) == 2])
_ = matplotlib.pyplot.scatter([af[0] for af in aryfactors if af[2] < 0.0002 and len(af[1]) > 2], [float(af[2]) for af in aryfactors if af[2] < 0.0002 and len(af[1]) > 2])
_ = matplotlib.pyplot.scatter([p1p2], [float(1/p1 + 1/p2 - 1/(p1*p2))])
_ = matplotlib.pyplot.plot([p1p2, p1p2], [0.000006, 1/322758])
_ = matplotlib.pyplot.plot([p1p2 - 6387237/150, p1p2 + 6387237/150], [1/322758, 1/322758])
matplotlib.pyplot.grid()
matplotlib.pyplot.show()

#   left 100003 # aryprimes[9592] 
#   left 469009 # aryprimes[39151] 
# center 684751 # aryprimes[55412]
#  right 999983 # aryprimes[78497]
# 

# p1p2 - 468883181363 # 65888
# 468883327159 - p1p2 # 79908
def findp(i1, idir, icenter):
    global aryprimes
    i2 = aryprimes[int(round(39151 + (i1 - (icenter - 65000)) * (55412 - 39151) / (icenter - 65000)))]
    if idir == -1:
        return i2
    else:
        return round(icenter / i2, 2)
        
fsqrtp1p2 = math.sqrt(p1p2)
    
_ = matplotlib.pyplot.scatter([p1p2 + x for x in range(-65000, 1, 3250)], [1/findp(p1p2 + x, -1, p1p2) + 1/findp(p1p2 + x, 1, p1p2) - 1/p1p2 for x in range(-65000, 1, 3250)])
_ = matplotlib.pyplot.scatter([p1p2], [float(1/p1 + 1/p2 - 1/(p1*p2))])
matplotlib.pyplot.grid()
matplotlib.pyplot.show()



# 62,981 * 96,157 = 6,056,064,017
# 62,981 * 96,157 = 6,056,064,017
# 484,027 * 968,713 = 468,883,247,251
hshcount, aryfactors = {2:0, 3:0, 5:0, 7:0, 11:0, 13:0, 17:0, 19:0, 23:0}, []
hshfactors1, arykeys1 = {}, []
hshfactors2, arykeys2 = {}, []
t1, dt, iter = time.time(), 0, 0
while len(aryfactors) < 72 and iter < 2000:
    iter += 1
    i1 = int(round(10**5 + 250 + 1 + random.random() * (10**6 - 2 * 10**5 - 250 - 1)))
    bok = False
    while bok == False:
        # while ((p1p2 / i1) % 1 < 0.90 and (p1p2 / i1) % 1 > 0.10) or (i1 % 2 == 0 and round(p1p2 / i1) % 2 == 0) or (i1 % 3 == 0 and round(p1p2 / i1) % 3 == 0) or (i1 % 5 == 0 and round(p1p2 / i1) % 5 == 0) or (i1 % 7 == 0 and round(p1p2 / i1) % 7 == 0) or (i1 % 11 == 0 and round(p1p2 / i1) % 11 == 0) or (i1 % 13 == 0 and round(p1p2 / i1) % 13 == 0):
        # while (i1 % 2 == 0 and round(p1p2 / i1) % 2 == 0) or (i1 % 3 == 0 and round(p1p2 / i1) % 3 == 0) or (i1 % 5 == 0 and round(p1p2 / i1) % 5 == 0) or (i1 % 7 == 0 and round(p1p2 / i1) % 7 == 0) or (i1 % 11 == 0 and round(p1p2 / i1) % 11 == 0) or (i1 % 13 == 0 and round(p1p2 / i1) % 13 == 0):
        #     i1 += 1
        i1, hshfactors1, arykeys1, bok, iduplicates1 = get1(i1)
        iduplicates2 = 0
        if bok:
            i2 = int(round(p1p2 / i1))
            if i1 > aryprimes[-1] or i2 > aryprimes[-1]:
                print(f"Error, aryprimes not large enough, {min(i1, i2)} or {max(i1, i2)} > {aryprimes[-1]}")
                break
            if len(arykeys1) == 4:
                if i2 % 2 == 0:
                    i2 += 1
                while i2 not in setprimes:
                    i2 += 2
                if int(round(p1p2/i2)) % i1 > 50:
                    i1 = int(round(p1p2/i2))
                    i1, hshfactors1, arykeys1, bok, iduplicates1 = get1(i1)
            else:
                bok = False
                hshfactors2, arykeys2 = factorscount(i2)
                if len(arykeys1) + len(arykeys2) > 5:
                    convertprimes(hshfactors2, arykeys2)
                while len(arykeys1) + len(arykeys2) > 5 or (max(hshfactors1.values()) >= 2 and max(hshfactors2.values()) >= 2):
                    i2 += 1
                    i2, hshfactors2, arykeys2 = factorscount(i2)
                    if int(round(p1p2/i2)) != i1:
                        while len(arykeys1) + len(arykeys2) > 5 or (max(hshfactors1.values()) >= 2 and max(hshfactors2.values()) >= 2):
                            i1 = int(round(p1p2/i2))
                            i1, hshfactors1, arykeys1, bok, iduplicates1 = get1(i1)
                            if len(arykeys1) == 4:
                                if i2 % 2 == 0:
                                    i2 += 1
                                while i2 not in setprimes:
                                    i2 += 2
                                if int(round(p1p2/i2)) % i1 > 50:
                                    i1 = int(round(p1p2/i2))
                                    arykeys1 = []
                                    while len(arykeys1) == 0 or len(arykeys1) > 4:
                                        if len(arykeys1) > 0:
                                            i1 += 1
                                        i1, hshfactors1, arykeys1, bok, iduplicates1 = get1(i1)
                                hshfactors2, arykeys2 = {i2:1}, [i2,]
                            elif int(round(p1p2/i1)) != i2:
                                i2 = int(round(p1p2/i1))
                                i2, hshfactors2, arykeys2, bok, iduplicates2= get2(i2)
                if len(arykeys1) + len(arykeys2) <= 5:
                    bok = True
                    for ak2 in arykeys2:
                        if hshfactors2[ak2] >= 3:
                            bok = False
                        elif hshfactors2[ak2] == 2:
                            if ak2 in hshfactors1:
                                bok = False
                            iduplicates += 1
                        elif ak2 in hshfactors1:
                            iduplicates += 1
                    if iduplicates >= 2:
                        bok = False
    if False:
        for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]:
            if p in arykeys1 and p in arykeys2:
                bok = False
    print(f"Now adding p1p2 / ({i1} * {i2}) = {round(p1p2 / (i1 * i2), 6)}")
    iary = sorted(arykeys1 + arykeys2)
    aryfactors.append((math.prod(iary),) + tuple(iary) + (calc_a6(iary, len(iary)),))
    dt = time.time() - t1
    for hc in hshcount.keys():
        if i1 % hc == 0 or i2 % hc == 0:
            hshcount[hc] += 1

[(af[0], af[1], af[2], float(af[3])) for af in aryfactors if af[0] == minx]
[(af[0], af[1], af[2], float(af[3])) for af in aryfactors if af[0] == maxx]
[(af[0] - p1p2, af[1], af[2], float(af[3])) for af in aryfactors if abs(af[0] - p1p2) <= 24]
[(p1, p2, p1p2, float(p1p2c6))]

mind = min([abs(af[0] - p1p2) for af in aryfactors])
minx = min([af[0] for af in aryfactors])
maxx = max([af[0] for af in aryfactors])
miny = min([float(af[3]) for af in aryfactors])
maxy = max([float(af[3]) for af in aryfactors])
_ = matplotlib.pyplot.scatter([af[0] for af in aryfactors], [float(af[3]) for af in aryfactors])
_ = matplotlib.pyplot.scatter([p1*p2], [float(p1p2c6)])
_ = matplotlib.pyplot.plot([p1*p2, p1*p2], [miny, maxy])
_ = matplotlib.pyplot.plot([minx, maxx], [p1p2c6, p1p2c6])
_ = matplotlib.pyplot.scatter([minx, maxx], [float(p1p2c6), float(p1p2c6)])
matplotlib.pyplot.grid()
matplotlib.pyplot.show()




